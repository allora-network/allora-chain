syntax = "proto3";
package mint.v2;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "mint/v2/types.proto";

option go_package = "github.com/allora-network/allora-chain/x/mint/types";

// Msg defines the x/mint Msg service.
service MsgService {
  option (cosmos.msg.v1.service) = true;

  // update params. Only callable by someone on the emissions module whitelist
  rpc UpdateParams(UpdateParamsRequest) returns (UpdateParamsResponse);
  // force a target emission calculation right now. Otherwise waits until the
  // end of params.BlocksPerMonth
  rpc RecalculateTargetEmission(RecalculateTargetEmissionRequest) returns (RecalculateTargetEmissionResponse);
}

// UpdateParams allows an update to the minting parameters of the module.
message UpdateParamsRequest {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "allora-chain/x/mint/MsgUpdateParams";

  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the x/mint parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  bool recalculate_target_emission = 3;
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message UpdateParamsResponse {}

// Force a recalculation of the target emission right now.
// This indirectly controls recalculating the inflation rate for the network
// and the stakers APY %.
message RecalculateTargetEmissionRequest {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "allora-chain/x/mint/MsgRecalculateTargetEmission";

  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// response from recalculating the target emission
message RecalculateTargetEmissionResponse {}
