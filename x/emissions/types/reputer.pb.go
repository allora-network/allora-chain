// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: emissions/v4/reputer.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	github_com_allora_network_allora_chain_math "github.com/allora-network/allora-chain/math"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type WorkerAttributedValue struct {
	Worker string                                          `protobuf:"bytes,1,opt,name=worker,proto3" json:"worker,omitempty"`
	Value  github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,2,opt,name=value,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"value"`
}

func (m *WorkerAttributedValue) Reset()         { *m = WorkerAttributedValue{} }
func (m *WorkerAttributedValue) String() string { return proto.CompactTextString(m) }
func (*WorkerAttributedValue) ProtoMessage()    {}
func (*WorkerAttributedValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_edaae37ffff29ff7, []int{0}
}
func (m *WorkerAttributedValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkerAttributedValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkerAttributedValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkerAttributedValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkerAttributedValue.Merge(m, src)
}
func (m *WorkerAttributedValue) XXX_Size() int {
	return m.Size()
}
func (m *WorkerAttributedValue) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkerAttributedValue.DiscardUnknown(m)
}

var xxx_messageInfo_WorkerAttributedValue proto.InternalMessageInfo

func (m *WorkerAttributedValue) GetWorker() string {
	if m != nil {
		return m.Worker
	}
	return ""
}

type WithheldWorkerAttributedValue struct {
	Worker string                                          `protobuf:"bytes,1,opt,name=worker,proto3" json:"worker,omitempty"`
	Value  github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,2,opt,name=value,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"value"`
}

func (m *WithheldWorkerAttributedValue) Reset()         { *m = WithheldWorkerAttributedValue{} }
func (m *WithheldWorkerAttributedValue) String() string { return proto.CompactTextString(m) }
func (*WithheldWorkerAttributedValue) ProtoMessage()    {}
func (*WithheldWorkerAttributedValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_edaae37ffff29ff7, []int{1}
}
func (m *WithheldWorkerAttributedValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithheldWorkerAttributedValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithheldWorkerAttributedValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithheldWorkerAttributedValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithheldWorkerAttributedValue.Merge(m, src)
}
func (m *WithheldWorkerAttributedValue) XXX_Size() int {
	return m.Size()
}
func (m *WithheldWorkerAttributedValue) XXX_DiscardUnknown() {
	xxx_messageInfo_WithheldWorkerAttributedValue.DiscardUnknown(m)
}

var xxx_messageInfo_WithheldWorkerAttributedValue proto.InternalMessageInfo

func (m *WithheldWorkerAttributedValue) GetWorker() string {
	if m != nil {
		return m.Worker
	}
	return ""
}

type OneOutInfererForecasterValues struct {
	Forecaster          string                           `protobuf:"bytes,3,opt,name=forecaster,proto3" json:"forecaster,omitempty"`
	OneOutInfererValues []*WithheldWorkerAttributedValue `protobuf:"bytes,4,rep,name=one_out_inferer_values,json=oneOutInfererValues,proto3" json:"one_out_inferer_values,omitempty"`
}

func (m *OneOutInfererForecasterValues) Reset()         { *m = OneOutInfererForecasterValues{} }
func (m *OneOutInfererForecasterValues) String() string { return proto.CompactTextString(m) }
func (*OneOutInfererForecasterValues) ProtoMessage()    {}
func (*OneOutInfererForecasterValues) Descriptor() ([]byte, []int) {
	return fileDescriptor_edaae37ffff29ff7, []int{2}
}
func (m *OneOutInfererForecasterValues) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OneOutInfererForecasterValues) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OneOutInfererForecasterValues.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OneOutInfererForecasterValues) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OneOutInfererForecasterValues.Merge(m, src)
}
func (m *OneOutInfererForecasterValues) XXX_Size() int {
	return m.Size()
}
func (m *OneOutInfererForecasterValues) XXX_DiscardUnknown() {
	xxx_messageInfo_OneOutInfererForecasterValues.DiscardUnknown(m)
}

var xxx_messageInfo_OneOutInfererForecasterValues proto.InternalMessageInfo

func (m *OneOutInfererForecasterValues) GetForecaster() string {
	if m != nil {
		return m.Forecaster
	}
	return ""
}

func (m *OneOutInfererForecasterValues) GetOneOutInfererValues() []*WithheldWorkerAttributedValue {
	if m != nil {
		return m.OneOutInfererValues
	}
	return nil
}

// These losses and inferences are calculated per reputer or by the network
// The `m`s in the comments below exist for when they're made by reputers,
// but they may be absent implying that they were made by the network
type ValueBundle struct {
	TopicId             uint64               `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	ReputerRequestNonce *ReputerRequestNonce `protobuf:"bytes,2,opt,name=reputer_request_nonce,json=reputerRequestNonce,proto3" json:"reputer_request_nonce,omitempty"`
	Reputer             string               `protobuf:"bytes,3,opt,name=reputer,proto3" json:"reputer,omitempty"`
	ExtraData           []byte               `protobuf:"bytes,4,opt,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"`
	// R_im || log10 L_im || I_i
	CombinedValue github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,5,opt,name=combined_value,json=combinedValue,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"combined_value"`
	// R_ijm || log10 L_ijm || I_ij
	InfererValues []*WorkerAttributedValue `protobuf:"bytes,6,rep,name=inferer_values,json=infererValues,proto3" json:"inferer_values,omitempty"`
	// R_ikm || log10 L_ikm || I_ik
	ForecasterValues []*WorkerAttributedValue `protobuf:"bytes,7,rep,name=forecaster_values,json=forecasterValues,proto3" json:"forecaster_values,omitempty"`
	// R^-_im  || log10 L^-_im || I^-_i
	NaiveValue github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,8,opt,name=naive_value,json=naiveValue,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"naive_value"`
	// Note: forecast-implied inferences are recomputed for each left-out
	// inference
	OneOutInfererValues []*WithheldWorkerAttributedValue `protobuf:"bytes,9,rep,name=one_out_inferer_values,json=oneOutInfererValues,proto3" json:"one_out_inferer_values,omitempty"`
	// R^-_ilm || log10 L^-_ilm || I^-_il where l = any k
	OneOutForecasterValues []*WithheldWorkerAttributedValue `protobuf:"bytes,10,rep,name=one_out_forecaster_values,json=oneOutForecasterValues,proto3" json:"one_out_forecaster_values,omitempty"`
	// R^+_ikm || log10 L^+_ikm || I^+_ik
	// aka one_in_forecaster_values because equivalent to using only one
	// forecast-implied inference
	OneInForecasterValues []*WorkerAttributedValue `protobuf:"bytes,11,rep,name=one_in_forecaster_values,json=oneInForecasterValues,proto3" json:"one_in_forecaster_values,omitempty"`
	// R^-_ilm || log10 L^-_ilm || I^-_il where l = any j
	// log10 L^-_j'ikm || I^-_j'ik
	OneOutInfererForecasterValues []*OneOutInfererForecasterValues `protobuf:"bytes,12,rep,name=one_out_inferer_forecaster_values,json=oneOutInfererForecasterValues,proto3" json:"one_out_inferer_forecaster_values,omitempty"`
}

func (m *ValueBundle) Reset()         { *m = ValueBundle{} }
func (m *ValueBundle) String() string { return proto.CompactTextString(m) }
func (*ValueBundle) ProtoMessage()    {}
func (*ValueBundle) Descriptor() ([]byte, []int) {
	return fileDescriptor_edaae37ffff29ff7, []int{3}
}
func (m *ValueBundle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValueBundle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValueBundle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValueBundle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValueBundle.Merge(m, src)
}
func (m *ValueBundle) XXX_Size() int {
	return m.Size()
}
func (m *ValueBundle) XXX_DiscardUnknown() {
	xxx_messageInfo_ValueBundle.DiscardUnknown(m)
}

var xxx_messageInfo_ValueBundle proto.InternalMessageInfo

func (m *ValueBundle) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *ValueBundle) GetReputerRequestNonce() *ReputerRequestNonce {
	if m != nil {
		return m.ReputerRequestNonce
	}
	return nil
}

func (m *ValueBundle) GetReputer() string {
	if m != nil {
		return m.Reputer
	}
	return ""
}

func (m *ValueBundle) GetExtraData() []byte {
	if m != nil {
		return m.ExtraData
	}
	return nil
}

func (m *ValueBundle) GetInfererValues() []*WorkerAttributedValue {
	if m != nil {
		return m.InfererValues
	}
	return nil
}

func (m *ValueBundle) GetForecasterValues() []*WorkerAttributedValue {
	if m != nil {
		return m.ForecasterValues
	}
	return nil
}

func (m *ValueBundle) GetOneOutInfererValues() []*WithheldWorkerAttributedValue {
	if m != nil {
		return m.OneOutInfererValues
	}
	return nil
}

func (m *ValueBundle) GetOneOutForecasterValues() []*WithheldWorkerAttributedValue {
	if m != nil {
		return m.OneOutForecasterValues
	}
	return nil
}

func (m *ValueBundle) GetOneInForecasterValues() []*WorkerAttributedValue {
	if m != nil {
		return m.OneInForecasterValues
	}
	return nil
}

func (m *ValueBundle) GetOneOutInfererForecasterValues() []*OneOutInfererForecasterValues {
	if m != nil {
		return m.OneOutInfererForecasterValues
	}
	return nil
}

// For when the bundle is computed on a per-reputer basis (ie.. if there is an
// index `m` in the above)
type ReputerValueBundle struct {
	ValueBundle *ValueBundle `protobuf:"bytes,1,opt,name=value_bundle,json=valueBundle,proto3" json:"value_bundle,omitempty"`
	Signature   []byte       `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	Pubkey      string       `protobuf:"bytes,3,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
}

func (m *ReputerValueBundle) Reset()         { *m = ReputerValueBundle{} }
func (m *ReputerValueBundle) String() string { return proto.CompactTextString(m) }
func (*ReputerValueBundle) ProtoMessage()    {}
func (*ReputerValueBundle) Descriptor() ([]byte, []int) {
	return fileDescriptor_edaae37ffff29ff7, []int{4}
}
func (m *ReputerValueBundle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReputerValueBundle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReputerValueBundle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReputerValueBundle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReputerValueBundle.Merge(m, src)
}
func (m *ReputerValueBundle) XXX_Size() int {
	return m.Size()
}
func (m *ReputerValueBundle) XXX_DiscardUnknown() {
	xxx_messageInfo_ReputerValueBundle.DiscardUnknown(m)
}

var xxx_messageInfo_ReputerValueBundle proto.InternalMessageInfo

func (m *ReputerValueBundle) GetValueBundle() *ValueBundle {
	if m != nil {
		return m.ValueBundle
	}
	return nil
}

func (m *ReputerValueBundle) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *ReputerValueBundle) GetPubkey() string {
	if m != nil {
		return m.Pubkey
	}
	return ""
}

type ReputerValueBundles struct {
	ReputerValueBundles []*ReputerValueBundle `protobuf:"bytes,1,rep,name=reputer_value_bundles,json=reputerValueBundles,proto3" json:"reputer_value_bundles,omitempty"`
}

func (m *ReputerValueBundles) Reset()         { *m = ReputerValueBundles{} }
func (m *ReputerValueBundles) String() string { return proto.CompactTextString(m) }
func (*ReputerValueBundles) ProtoMessage()    {}
func (*ReputerValueBundles) Descriptor() ([]byte, []int) {
	return fileDescriptor_edaae37ffff29ff7, []int{5}
}
func (m *ReputerValueBundles) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReputerValueBundles) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReputerValueBundles.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReputerValueBundles) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReputerValueBundles.Merge(m, src)
}
func (m *ReputerValueBundles) XXX_Size() int {
	return m.Size()
}
func (m *ReputerValueBundles) XXX_DiscardUnknown() {
	xxx_messageInfo_ReputerValueBundles.DiscardUnknown(m)
}

var xxx_messageInfo_ReputerValueBundles proto.InternalMessageInfo

func (m *ReputerValueBundles) GetReputerValueBundles() []*ReputerValueBundle {
	if m != nil {
		return m.ReputerValueBundles
	}
	return nil
}

func init() {
	proto.RegisterType((*WorkerAttributedValue)(nil), "emissions.v4.WorkerAttributedValue")
	proto.RegisterType((*WithheldWorkerAttributedValue)(nil), "emissions.v4.WithheldWorkerAttributedValue")
	proto.RegisterType((*OneOutInfererForecasterValues)(nil), "emissions.v4.OneOutInfererForecasterValues")
	proto.RegisterType((*ValueBundle)(nil), "emissions.v4.ValueBundle")
	proto.RegisterType((*ReputerValueBundle)(nil), "emissions.v4.ReputerValueBundle")
	proto.RegisterType((*ReputerValueBundles)(nil), "emissions.v4.ReputerValueBundles")
}

func init() { proto.RegisterFile("emissions/v4/reputer.proto", fileDescriptor_edaae37ffff29ff7) }

var fileDescriptor_edaae37ffff29ff7 = []byte{
	// 667 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x55, 0xc1, 0x6e, 0xd3, 0x4c,
	0x10, 0x8e, 0xff, 0xa6, 0x4d, 0x33, 0x4e, 0xab, 0x9f, 0x2d, 0xad, 0xdc, 0x8a, 0xb8, 0x69, 0xb9,
	0x54, 0x42, 0xc4, 0x52, 0xa9, 0x04, 0x42, 0x5c, 0xa8, 0x2a, 0xa4, 0x22, 0x41, 0x91, 0x05, 0x14,
	0x21, 0x84, 0xd9, 0xd8, 0x93, 0x64, 0xd5, 0x64, 0x37, 0xac, 0xd7, 0xa1, 0xbd, 0x73, 0x44, 0x88,
	0x47, 0xe0, 0xc6, 0x13, 0xf0, 0x0e, 0x3d, 0xf6, 0x88, 0x38, 0x54, 0xa8, 0xbd, 0xf0, 0x18, 0xc8,
	0x6b, 0xa7, 0x71, 0x93, 0x50, 0x05, 0x95, 0x03, 0x37, 0xcf, 0xec, 0xec, 0x7c, 0xdf, 0x7c, 0x3b,
	0x33, 0x86, 0x25, 0x6c, 0xb3, 0x30, 0x64, 0x82, 0x87, 0x4e, 0x77, 0xc3, 0x91, 0xd8, 0x89, 0x14,
	0xca, 0x6a, 0x47, 0x0a, 0x25, 0x48, 0xe9, 0xec, 0xac, 0xda, 0xdd, 0x58, 0xb2, 0xce, 0x45, 0x72,
	0xc1, 0x7d, 0x4c, 0xe2, 0x96, 0xae, 0x36, 0x44, 0x43, 0xe8, 0x4f, 0x27, 0xfe, 0x4a, 0xbc, 0xab,
	0xef, 0x0d, 0x98, 0xdf, 0x15, 0x72, 0x0f, 0xe5, 0x7d, 0xa5, 0x24, 0xab, 0x45, 0x0a, 0x83, 0xe7,
	0xb4, 0x15, 0x21, 0x59, 0x80, 0xa9, 0x77, 0xfa, 0xc0, 0x32, 0x2a, 0xc6, 0x5a, 0xd1, 0x4d, 0x2d,
	0xf2, 0x08, 0x26, 0xbb, 0x71, 0x80, 0xf5, 0x5f, 0xec, 0xde, 0xbc, 0x7d, 0x78, 0xbc, 0x9c, 0xfb,
	0x7e, 0xbc, 0xec, 0x34, 0x98, 0x6a, 0x46, 0xb5, 0xaa, 0x2f, 0xda, 0x0e, 0x6d, 0xb5, 0x84, 0xa4,
	0x37, 0x39, 0xaa, 0xf8, 0x4e, 0xcf, 0xf4, 0x9b, 0x94, 0x71, 0xa7, 0x4d, 0x55, 0xb3, 0xba, 0x85,
	0xbe, 0x9b, 0x64, 0xb9, 0x9b, 0xff, 0xf9, 0x79, 0xd9, 0x58, 0xfd, 0x60, 0x40, 0x79, 0x97, 0xa9,
	0x66, 0x13, 0x5b, 0xc1, 0x3f, 0x40, 0xe7, 0x8b, 0x01, 0xe5, 0x1d, 0x8e, 0x3b, 0x91, 0xda, 0xe6,
	0x75, 0x94, 0x28, 0x1f, 0x08, 0x89, 0x3e, 0x0d, 0x15, 0x4a, 0xcd, 0x26, 0x24, 0x36, 0x40, 0xfd,
	0xcc, 0x67, 0x4d, 0x68, 0x4a, 0x19, 0x0f, 0x79, 0x03, 0x0b, 0x82, 0xa3, 0x27, 0x22, 0xe5, 0xb1,
	0x24, 0x85, 0xa7, 0x01, 0x42, 0x2b, 0x5f, 0x99, 0x58, 0x33, 0xd7, 0x6f, 0x54, 0xb3, 0xcf, 0x56,
	0xbd, 0xb0, 0x76, 0x77, 0x4e, 0x64, 0xb9, 0x24, 0x0c, 0x52, 0xa6, 0x5f, 0x0b, 0x60, 0x6a, 0xc7,
	0x66, 0xc4, 0x83, 0x16, 0x92, 0x45, 0x98, 0x56, 0xa2, 0xc3, 0x7c, 0x8f, 0x05, 0x5a, 0xa8, 0xbc,
	0x5b, 0xd0, 0xf6, 0x76, 0x40, 0x9e, 0xc1, 0x7c, 0xda, 0x39, 0x9e, 0xc4, 0xb7, 0x11, 0x86, 0xca,
	0xd3, 0xfd, 0xa1, 0x95, 0x33, 0xd7, 0x57, 0xce, 0x33, 0x72, 0x93, 0x50, 0x37, 0x89, 0x7c, 0x1c,
	0x07, 0xba, 0x73, 0x72, 0xd8, 0x49, 0x2c, 0x28, 0xa4, 0xee, 0x54, 0x86, 0x9e, 0x49, 0xca, 0x00,
	0xb8, 0xaf, 0x24, 0xf5, 0x02, 0xaa, 0xa8, 0x95, 0xaf, 0x18, 0x6b, 0x25, 0xb7, 0xa8, 0x3d, 0x5b,
	0x54, 0x51, 0xf2, 0x1a, 0x66, 0x7d, 0xd1, 0xae, 0x31, 0x8e, 0x41, 0xa2, 0x8d, 0x35, 0x79, 0xb9,
	0x27, 0x9c, 0xe9, 0xa5, 0x4b, 0x3a, 0xe6, 0x21, 0xcc, 0x0e, 0x48, 0x3f, 0xa5, 0xa5, 0xbf, 0x3e,
	0x20, 0xfd, 0x48, 0xc9, 0x67, 0x58, 0x56, 0x6c, 0xf2, 0x04, 0xae, 0xf4, 0x1f, 0xb7, 0x97, 0xae,
	0x30, 0x7e, 0xba, 0xff, 0xeb, 0x83, 0x0d, 0xf4, 0x02, 0x4c, 0x4e, 0x59, 0x17, 0xd3, 0xd2, 0xa7,
	0x2f, 0x57, 0x3a, 0xe8, 0x5c, 0x49, 0xdd, 0xbf, 0x6f, 0xbd, 0xe2, 0xdf, 0x69, 0x3d, 0x52, 0x87,
	0xc5, 0x1e, 0xc2, 0xb0, 0x2a, 0xf0, 0xe7, 0x20, 0x0b, 0x09, 0xc8, 0xd0, 0x90, 0xbd, 0x02, 0x2b,
	0xc6, 0x61, 0x7c, 0x04, 0x8c, 0x39, 0xbe, 0xf8, 0xf3, 0x82, 0xe3, 0x36, 0x1f, 0xca, 0x1e, 0xc1,
	0xca, 0xa0, 0x4e, 0xc3, 0x30, 0xa5, 0x51, 0xd5, 0x5c, 0xb8, 0x1a, 0xdc, 0xb2, 0xb8, 0xe8, 0x38,
	0x9d, 0xdb, 0x8f, 0x06, 0x90, 0x74, 0xc4, 0xb2, 0xe3, 0x7b, 0x0f, 0x4a, 0x1a, 0xd8, 0xab, 0x69,
	0x5b, 0x8f, 0xb0, 0xb9, 0xbe, 0x78, 0x1e, 0x3e, 0x73, 0xc1, 0x35, 0xbb, 0x99, 0xdb, 0xd7, 0xa0,
	0x18, 0xb2, 0x06, 0xa7, 0x2a, 0x92, 0xc9, 0x54, 0x97, 0xdc, 0xbe, 0x23, 0xde, 0xa0, 0x9d, 0xa8,
	0xb6, 0x87, 0x07, 0xe9, 0x9c, 0xa6, 0x56, 0x4a, 0x68, 0x0f, 0xe6, 0x86, 0xf9, 0x84, 0xe4, 0x69,
	0x7f, 0x69, 0x64, 0x89, 0x85, 0x96, 0xa1, 0x85, 0xa9, 0x8c, 0x5c, 0x1a, 0x59, 0x82, 0xbd, 0x9d,
	0x91, 0xcd, 0xba, 0xe9, 0x1e, 0x9e, 0xd8, 0xc6, 0xd1, 0x89, 0x6d, 0xfc, 0x38, 0xb1, 0x8d, 0x4f,
	0xa7, 0x76, 0xee, 0xe8, 0xd4, 0xce, 0x7d, 0x3b, 0xb5, 0x73, 0x2f, 0xef, 0x8c, 0xd9, 0xf9, 0xfb,
	0x4e, 0xff, 0x47, 0xa7, 0x0e, 0x3a, 0x18, 0xd6, 0xa6, 0xf4, 0x0f, 0xed, 0xd6, 0xaf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x84, 0x4d, 0x16, 0x0b, 0x2c, 0x07, 0x00, 0x00,
}

func (this *WorkerAttributedValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkerAttributedValue)
	if !ok {
		that2, ok := that.(WorkerAttributedValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Worker != that1.Worker {
		return false
	}
	if !this.Value.Equal(that1.Value) {
		return false
	}
	return true
}
func (this *WithheldWorkerAttributedValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WithheldWorkerAttributedValue)
	if !ok {
		that2, ok := that.(WithheldWorkerAttributedValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Worker != that1.Worker {
		return false
	}
	if !this.Value.Equal(that1.Value) {
		return false
	}
	return true
}
func (this *OneOutInfererForecasterValues) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OneOutInfererForecasterValues)
	if !ok {
		that2, ok := that.(OneOutInfererForecasterValues)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Forecaster != that1.Forecaster {
		return false
	}
	if len(this.OneOutInfererValues) != len(that1.OneOutInfererValues) {
		return false
	}
	for i := range this.OneOutInfererValues {
		if !this.OneOutInfererValues[i].Equal(that1.OneOutInfererValues[i]) {
			return false
		}
	}
	return true
}
func (this *ValueBundle) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValueBundle)
	if !ok {
		that2, ok := that.(ValueBundle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TopicId != that1.TopicId {
		return false
	}
	if !this.ReputerRequestNonce.Equal(that1.ReputerRequestNonce) {
		return false
	}
	if this.Reputer != that1.Reputer {
		return false
	}
	if !bytes.Equal(this.ExtraData, that1.ExtraData) {
		return false
	}
	if !this.CombinedValue.Equal(that1.CombinedValue) {
		return false
	}
	if len(this.InfererValues) != len(that1.InfererValues) {
		return false
	}
	for i := range this.InfererValues {
		if !this.InfererValues[i].Equal(that1.InfererValues[i]) {
			return false
		}
	}
	if len(this.ForecasterValues) != len(that1.ForecasterValues) {
		return false
	}
	for i := range this.ForecasterValues {
		if !this.ForecasterValues[i].Equal(that1.ForecasterValues[i]) {
			return false
		}
	}
	if !this.NaiveValue.Equal(that1.NaiveValue) {
		return false
	}
	if len(this.OneOutInfererValues) != len(that1.OneOutInfererValues) {
		return false
	}
	for i := range this.OneOutInfererValues {
		if !this.OneOutInfererValues[i].Equal(that1.OneOutInfererValues[i]) {
			return false
		}
	}
	if len(this.OneOutForecasterValues) != len(that1.OneOutForecasterValues) {
		return false
	}
	for i := range this.OneOutForecasterValues {
		if !this.OneOutForecasterValues[i].Equal(that1.OneOutForecasterValues[i]) {
			return false
		}
	}
	if len(this.OneInForecasterValues) != len(that1.OneInForecasterValues) {
		return false
	}
	for i := range this.OneInForecasterValues {
		if !this.OneInForecasterValues[i].Equal(that1.OneInForecasterValues[i]) {
			return false
		}
	}
	if len(this.OneOutInfererForecasterValues) != len(that1.OneOutInfererForecasterValues) {
		return false
	}
	for i := range this.OneOutInfererForecasterValues {
		if !this.OneOutInfererForecasterValues[i].Equal(that1.OneOutInfererForecasterValues[i]) {
			return false
		}
	}
	return true
}
func (this *ReputerValueBundle) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReputerValueBundle)
	if !ok {
		that2, ok := that.(ReputerValueBundle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ValueBundle.Equal(that1.ValueBundle) {
		return false
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return false
	}
	if this.Pubkey != that1.Pubkey {
		return false
	}
	return true
}
func (m *WorkerAttributedValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkerAttributedValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkerAttributedValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Value.Size()
		i -= size
		if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintReputer(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Worker) > 0 {
		i -= len(m.Worker)
		copy(dAtA[i:], m.Worker)
		i = encodeVarintReputer(dAtA, i, uint64(len(m.Worker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WithheldWorkerAttributedValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithheldWorkerAttributedValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithheldWorkerAttributedValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Value.Size()
		i -= size
		if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintReputer(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Worker) > 0 {
		i -= len(m.Worker)
		copy(dAtA[i:], m.Worker)
		i = encodeVarintReputer(dAtA, i, uint64(len(m.Worker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OneOutInfererForecasterValues) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OneOutInfererForecasterValues) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OneOutInfererForecasterValues) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OneOutInfererValues) > 0 {
		for iNdEx := len(m.OneOutInfererValues) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OneOutInfererValues[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintReputer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Forecaster) > 0 {
		i -= len(m.Forecaster)
		copy(dAtA[i:], m.Forecaster)
		i = encodeVarintReputer(dAtA, i, uint64(len(m.Forecaster)))
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func (m *ValueBundle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValueBundle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValueBundle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OneOutInfererForecasterValues) > 0 {
		for iNdEx := len(m.OneOutInfererForecasterValues) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OneOutInfererForecasterValues[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintReputer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.OneInForecasterValues) > 0 {
		for iNdEx := len(m.OneInForecasterValues) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OneInForecasterValues[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintReputer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.OneOutForecasterValues) > 0 {
		for iNdEx := len(m.OneOutForecasterValues) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OneOutForecasterValues[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintReputer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.OneOutInfererValues) > 0 {
		for iNdEx := len(m.OneOutInfererValues) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OneOutInfererValues[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintReputer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	{
		size := m.NaiveValue.Size()
		i -= size
		if _, err := m.NaiveValue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintReputer(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.ForecasterValues) > 0 {
		for iNdEx := len(m.ForecasterValues) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ForecasterValues[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintReputer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.InfererValues) > 0 {
		for iNdEx := len(m.InfererValues) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InfererValues[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintReputer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	{
		size := m.CombinedValue.Size()
		i -= size
		if _, err := m.CombinedValue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintReputer(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.ExtraData) > 0 {
		i -= len(m.ExtraData)
		copy(dAtA[i:], m.ExtraData)
		i = encodeVarintReputer(dAtA, i, uint64(len(m.ExtraData)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Reputer) > 0 {
		i -= len(m.Reputer)
		copy(dAtA[i:], m.Reputer)
		i = encodeVarintReputer(dAtA, i, uint64(len(m.Reputer)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ReputerRequestNonce != nil {
		{
			size, err := m.ReputerRequestNonce.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReputer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintReputer(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReputerValueBundle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReputerValueBundle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReputerValueBundle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintReputer(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintReputer(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if m.ValueBundle != nil {
		{
			size, err := m.ValueBundle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReputer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReputerValueBundles) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReputerValueBundles) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReputerValueBundles) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReputerValueBundles) > 0 {
		for iNdEx := len(m.ReputerValueBundles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReputerValueBundles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintReputer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintReputer(dAtA []byte, offset int, v uint64) int {
	offset -= sovReputer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WorkerAttributedValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Worker)
	if l > 0 {
		n += 1 + l + sovReputer(uint64(l))
	}
	l = m.Value.Size()
	n += 1 + l + sovReputer(uint64(l))
	return n
}

func (m *WithheldWorkerAttributedValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Worker)
	if l > 0 {
		n += 1 + l + sovReputer(uint64(l))
	}
	l = m.Value.Size()
	n += 1 + l + sovReputer(uint64(l))
	return n
}

func (m *OneOutInfererForecasterValues) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Forecaster)
	if l > 0 {
		n += 1 + l + sovReputer(uint64(l))
	}
	if len(m.OneOutInfererValues) > 0 {
		for _, e := range m.OneOutInfererValues {
			l = e.Size()
			n += 1 + l + sovReputer(uint64(l))
		}
	}
	return n
}

func (m *ValueBundle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovReputer(uint64(m.TopicId))
	}
	if m.ReputerRequestNonce != nil {
		l = m.ReputerRequestNonce.Size()
		n += 1 + l + sovReputer(uint64(l))
	}
	l = len(m.Reputer)
	if l > 0 {
		n += 1 + l + sovReputer(uint64(l))
	}
	l = len(m.ExtraData)
	if l > 0 {
		n += 1 + l + sovReputer(uint64(l))
	}
	l = m.CombinedValue.Size()
	n += 1 + l + sovReputer(uint64(l))
	if len(m.InfererValues) > 0 {
		for _, e := range m.InfererValues {
			l = e.Size()
			n += 1 + l + sovReputer(uint64(l))
		}
	}
	if len(m.ForecasterValues) > 0 {
		for _, e := range m.ForecasterValues {
			l = e.Size()
			n += 1 + l + sovReputer(uint64(l))
		}
	}
	l = m.NaiveValue.Size()
	n += 1 + l + sovReputer(uint64(l))
	if len(m.OneOutInfererValues) > 0 {
		for _, e := range m.OneOutInfererValues {
			l = e.Size()
			n += 1 + l + sovReputer(uint64(l))
		}
	}
	if len(m.OneOutForecasterValues) > 0 {
		for _, e := range m.OneOutForecasterValues {
			l = e.Size()
			n += 1 + l + sovReputer(uint64(l))
		}
	}
	if len(m.OneInForecasterValues) > 0 {
		for _, e := range m.OneInForecasterValues {
			l = e.Size()
			n += 1 + l + sovReputer(uint64(l))
		}
	}
	if len(m.OneOutInfererForecasterValues) > 0 {
		for _, e := range m.OneOutInfererForecasterValues {
			l = e.Size()
			n += 1 + l + sovReputer(uint64(l))
		}
	}
	return n
}

func (m *ReputerValueBundle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValueBundle != nil {
		l = m.ValueBundle.Size()
		n += 1 + l + sovReputer(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovReputer(uint64(l))
	}
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovReputer(uint64(l))
	}
	return n
}

func (m *ReputerValueBundles) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ReputerValueBundles) > 0 {
		for _, e := range m.ReputerValueBundles {
			l = e.Size()
			n += 1 + l + sovReputer(uint64(l))
		}
	}
	return n
}

func sovReputer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozReputer(x uint64) (n int) {
	return sovReputer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WorkerAttributedValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReputer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkerAttributedValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkerAttributedValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Worker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReputer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReputer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReputer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Worker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReputer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReputer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReputer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReputer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReputer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithheldWorkerAttributedValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReputer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithheldWorkerAttributedValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithheldWorkerAttributedValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Worker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReputer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReputer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReputer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Worker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReputer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReputer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReputer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReputer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReputer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OneOutInfererForecasterValues) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReputer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OneOutInfererForecasterValues: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OneOutInfererForecasterValues: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forecaster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReputer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReputer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReputer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Forecaster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneOutInfererValues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReputer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReputer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReputer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OneOutInfererValues = append(m.OneOutInfererValues, &WithheldWorkerAttributedValue{})
			if err := m.OneOutInfererValues[len(m.OneOutInfererValues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReputer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReputer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValueBundle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReputer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValueBundle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValueBundle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReputer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReputerRequestNonce", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReputer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReputer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReputer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReputerRequestNonce == nil {
				m.ReputerRequestNonce = &ReputerRequestNonce{}
			}
			if err := m.ReputerRequestNonce.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reputer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReputer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReputer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReputer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reputer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReputer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthReputer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthReputer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraData = append(m.ExtraData[:0], dAtA[iNdEx:postIndex]...)
			if m.ExtraData == nil {
				m.ExtraData = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CombinedValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReputer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReputer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReputer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CombinedValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfererValues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReputer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReputer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReputer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InfererValues = append(m.InfererValues, &WorkerAttributedValue{})
			if err := m.InfererValues[len(m.InfererValues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForecasterValues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReputer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReputer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReputer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForecasterValues = append(m.ForecasterValues, &WorkerAttributedValue{})
			if err := m.ForecasterValues[len(m.ForecasterValues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NaiveValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReputer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReputer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReputer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NaiveValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneOutInfererValues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReputer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReputer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReputer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OneOutInfererValues = append(m.OneOutInfererValues, &WithheldWorkerAttributedValue{})
			if err := m.OneOutInfererValues[len(m.OneOutInfererValues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneOutForecasterValues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReputer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReputer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReputer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OneOutForecasterValues = append(m.OneOutForecasterValues, &WithheldWorkerAttributedValue{})
			if err := m.OneOutForecasterValues[len(m.OneOutForecasterValues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneInForecasterValues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReputer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReputer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReputer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OneInForecasterValues = append(m.OneInForecasterValues, &WorkerAttributedValue{})
			if err := m.OneInForecasterValues[len(m.OneInForecasterValues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneOutInfererForecasterValues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReputer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReputer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReputer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OneOutInfererForecasterValues = append(m.OneOutInfererForecasterValues, &OneOutInfererForecasterValues{})
			if err := m.OneOutInfererForecasterValues[len(m.OneOutInfererForecasterValues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReputer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReputer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReputerValueBundle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReputer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReputerValueBundle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReputerValueBundle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueBundle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReputer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReputer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReputer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValueBundle == nil {
				m.ValueBundle = &ValueBundle{}
			}
			if err := m.ValueBundle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReputer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthReputer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthReputer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReputer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReputer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReputer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReputer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReputer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReputerValueBundles) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReputer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReputerValueBundles: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReputerValueBundles: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReputerValueBundles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReputer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReputer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReputer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReputerValueBundles = append(m.ReputerValueBundles, &ReputerValueBundle{})
			if err := m.ReputerValueBundles[len(m.ReputerValueBundles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReputer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReputer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReputer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReputer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReputer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReputer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReputer
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupReputer
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthReputer
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthReputer        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReputer          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupReputer = fmt.Errorf("proto: unexpected end of group")
)
