// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: emissions/v3/worker.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	github_com_allora_network_allora_chain_math "github.com/allora-network/allora-chain/math"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TimestampedValue struct {
	BlockHeight int64                                           `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	Value       github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,2,opt,name=value,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"value"`
}

func (m *TimestampedValue) Reset()         { *m = TimestampedValue{} }
func (m *TimestampedValue) String() string { return proto.CompactTextString(m) }
func (*TimestampedValue) ProtoMessage()    {}
func (*TimestampedValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_60e5359cc895864b, []int{0}
}
func (m *TimestampedValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimestampedValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimestampedValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimestampedValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimestampedValue.Merge(m, src)
}
func (m *TimestampedValue) XXX_Size() int {
	return m.Size()
}
func (m *TimestampedValue) XXX_DiscardUnknown() {
	xxx_messageInfo_TimestampedValue.DiscardUnknown(m)
}

var xxx_messageInfo_TimestampedValue proto.InternalMessageInfo

func (m *TimestampedValue) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type Inference struct {
	TopicId     uint64                                          `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	BlockHeight int64                                           `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	Inferer     string                                          `protobuf:"bytes,3,opt,name=inferer,proto3" json:"inferer,omitempty"`
	Value       github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,4,opt,name=value,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"value"`
	ExtraData   []byte                                          `protobuf:"bytes,5,opt,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"`
	Proof       string                                          `protobuf:"bytes,6,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *Inference) Reset()         { *m = Inference{} }
func (m *Inference) String() string { return proto.CompactTextString(m) }
func (*Inference) ProtoMessage()    {}
func (*Inference) Descriptor() ([]byte, []int) {
	return fileDescriptor_60e5359cc895864b, []int{1}
}
func (m *Inference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Inference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Inference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Inference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Inference.Merge(m, src)
}
func (m *Inference) XXX_Size() int {
	return m.Size()
}
func (m *Inference) XXX_DiscardUnknown() {
	xxx_messageInfo_Inference.DiscardUnknown(m)
}

var xxx_messageInfo_Inference proto.InternalMessageInfo

func (m *Inference) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *Inference) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *Inference) GetInferer() string {
	if m != nil {
		return m.Inferer
	}
	return ""
}

func (m *Inference) GetExtraData() []byte {
	if m != nil {
		return m.ExtraData
	}
	return nil
}

func (m *Inference) GetProof() string {
	if m != nil {
		return m.Proof
	}
	return ""
}

type Inferences struct {
	Inferences []*Inference `protobuf:"bytes,1,rep,name=inferences,proto3" json:"inferences,omitempty"`
}

func (m *Inferences) Reset()         { *m = Inferences{} }
func (m *Inferences) String() string { return proto.CompactTextString(m) }
func (*Inferences) ProtoMessage()    {}
func (*Inferences) Descriptor() ([]byte, []int) {
	return fileDescriptor_60e5359cc895864b, []int{2}
}
func (m *Inferences) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Inferences) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Inferences.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Inferences) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Inferences.Merge(m, src)
}
func (m *Inferences) XXX_Size() int {
	return m.Size()
}
func (m *Inferences) XXX_DiscardUnknown() {
	xxx_messageInfo_Inferences.DiscardUnknown(m)
}

var xxx_messageInfo_Inferences proto.InternalMessageInfo

func (m *Inferences) GetInferences() []*Inference {
	if m != nil {
		return m.Inferences
	}
	return nil
}

type ForecastElement struct {
	Inferer string                                          `protobuf:"bytes,1,opt,name=inferer,proto3" json:"inferer,omitempty"`
	Value   github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,2,opt,name=value,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"value"`
}

func (m *ForecastElement) Reset()         { *m = ForecastElement{} }
func (m *ForecastElement) String() string { return proto.CompactTextString(m) }
func (*ForecastElement) ProtoMessage()    {}
func (*ForecastElement) Descriptor() ([]byte, []int) {
	return fileDescriptor_60e5359cc895864b, []int{3}
}
func (m *ForecastElement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForecastElement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForecastElement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForecastElement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForecastElement.Merge(m, src)
}
func (m *ForecastElement) XXX_Size() int {
	return m.Size()
}
func (m *ForecastElement) XXX_DiscardUnknown() {
	xxx_messageInfo_ForecastElement.DiscardUnknown(m)
}

var xxx_messageInfo_ForecastElement proto.InternalMessageInfo

func (m *ForecastElement) GetInferer() string {
	if m != nil {
		return m.Inferer
	}
	return ""
}

type Forecast struct {
	TopicId          uint64             `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	BlockHeight      int64              `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	Forecaster       string             `protobuf:"bytes,3,opt,name=forecaster,proto3" json:"forecaster,omitempty"`
	ForecastElements []*ForecastElement `protobuf:"bytes,4,rep,name=forecast_elements,json=forecastElements,proto3" json:"forecast_elements,omitempty"`
	ExtraData        []byte             `protobuf:"bytes,5,opt,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"`
}

func (m *Forecast) Reset()         { *m = Forecast{} }
func (m *Forecast) String() string { return proto.CompactTextString(m) }
func (*Forecast) ProtoMessage()    {}
func (*Forecast) Descriptor() ([]byte, []int) {
	return fileDescriptor_60e5359cc895864b, []int{4}
}
func (m *Forecast) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Forecast) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Forecast.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Forecast) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Forecast.Merge(m, src)
}
func (m *Forecast) XXX_Size() int {
	return m.Size()
}
func (m *Forecast) XXX_DiscardUnknown() {
	xxx_messageInfo_Forecast.DiscardUnknown(m)
}

var xxx_messageInfo_Forecast proto.InternalMessageInfo

func (m *Forecast) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *Forecast) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *Forecast) GetForecaster() string {
	if m != nil {
		return m.Forecaster
	}
	return ""
}

func (m *Forecast) GetForecastElements() []*ForecastElement {
	if m != nil {
		return m.ForecastElements
	}
	return nil
}

func (m *Forecast) GetExtraData() []byte {
	if m != nil {
		return m.ExtraData
	}
	return nil
}

type Forecasts struct {
	Forecasts []*Forecast `protobuf:"bytes,1,rep,name=forecasts,proto3" json:"forecasts,omitempty"`
}

func (m *Forecasts) Reset()         { *m = Forecasts{} }
func (m *Forecasts) String() string { return proto.CompactTextString(m) }
func (*Forecasts) ProtoMessage()    {}
func (*Forecasts) Descriptor() ([]byte, []int) {
	return fileDescriptor_60e5359cc895864b, []int{5}
}
func (m *Forecasts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Forecasts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Forecasts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Forecasts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Forecasts.Merge(m, src)
}
func (m *Forecasts) XXX_Size() int {
	return m.Size()
}
func (m *Forecasts) XXX_DiscardUnknown() {
	xxx_messageInfo_Forecasts.DiscardUnknown(m)
}

var xxx_messageInfo_Forecasts proto.InternalMessageInfo

func (m *Forecasts) GetForecasts() []*Forecast {
	if m != nil {
		return m.Forecasts
	}
	return nil
}

type InferenceForecastBundle struct {
	Inference *Inference `protobuf:"bytes,1,opt,name=inference,proto3" json:"inference,omitempty"`
	Forecast  *Forecast  `protobuf:"bytes,2,opt,name=forecast,proto3" json:"forecast,omitempty"`
}

func (m *InferenceForecastBundle) Reset()         { *m = InferenceForecastBundle{} }
func (m *InferenceForecastBundle) String() string { return proto.CompactTextString(m) }
func (*InferenceForecastBundle) ProtoMessage()    {}
func (*InferenceForecastBundle) Descriptor() ([]byte, []int) {
	return fileDescriptor_60e5359cc895864b, []int{6}
}
func (m *InferenceForecastBundle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InferenceForecastBundle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InferenceForecastBundle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InferenceForecastBundle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InferenceForecastBundle.Merge(m, src)
}
func (m *InferenceForecastBundle) XXX_Size() int {
	return m.Size()
}
func (m *InferenceForecastBundle) XXX_DiscardUnknown() {
	xxx_messageInfo_InferenceForecastBundle.DiscardUnknown(m)
}

var xxx_messageInfo_InferenceForecastBundle proto.InternalMessageInfo

func (m *InferenceForecastBundle) GetInference() *Inference {
	if m != nil {
		return m.Inference
	}
	return nil
}

func (m *InferenceForecastBundle) GetForecast() *Forecast {
	if m != nil {
		return m.Forecast
	}
	return nil
}

type WorkerDataBundle struct {
	Worker                             string                   `protobuf:"bytes,1,opt,name=worker,proto3" json:"worker,omitempty"`
	Nonce                              *Nonce                   `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	TopicId                            uint64                   `protobuf:"varint,3,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	InferenceForecastsBundle           *InferenceForecastBundle `protobuf:"bytes,4,opt,name=inference_forecasts_bundle,json=inferenceForecastsBundle,proto3" json:"inference_forecasts_bundle,omitempty"`
	InferencesForecastsBundleSignature []byte                   `protobuf:"bytes,5,opt,name=inferences_forecasts_bundle_signature,json=inferencesForecastsBundleSignature,proto3" json:"inferences_forecasts_bundle_signature,omitempty"`
	Pubkey                             string                   `protobuf:"bytes,6,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
}

func (m *WorkerDataBundle) Reset()         { *m = WorkerDataBundle{} }
func (m *WorkerDataBundle) String() string { return proto.CompactTextString(m) }
func (*WorkerDataBundle) ProtoMessage()    {}
func (*WorkerDataBundle) Descriptor() ([]byte, []int) {
	return fileDescriptor_60e5359cc895864b, []int{7}
}
func (m *WorkerDataBundle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkerDataBundle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkerDataBundle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkerDataBundle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkerDataBundle.Merge(m, src)
}
func (m *WorkerDataBundle) XXX_Size() int {
	return m.Size()
}
func (m *WorkerDataBundle) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkerDataBundle.DiscardUnknown(m)
}

var xxx_messageInfo_WorkerDataBundle proto.InternalMessageInfo

func (m *WorkerDataBundle) GetWorker() string {
	if m != nil {
		return m.Worker
	}
	return ""
}

func (m *WorkerDataBundle) GetNonce() *Nonce {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *WorkerDataBundle) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *WorkerDataBundle) GetInferenceForecastsBundle() *InferenceForecastBundle {
	if m != nil {
		return m.InferenceForecastsBundle
	}
	return nil
}

func (m *WorkerDataBundle) GetInferencesForecastsBundleSignature() []byte {
	if m != nil {
		return m.InferencesForecastsBundleSignature
	}
	return nil
}

func (m *WorkerDataBundle) GetPubkey() string {
	if m != nil {
		return m.Pubkey
	}
	return ""
}

type WorkerDataBundles struct {
	WorkerDataBundles []*WorkerDataBundle `protobuf:"bytes,1,rep,name=worker_data_bundles,json=workerDataBundles,proto3" json:"worker_data_bundles,omitempty"`
}

func (m *WorkerDataBundles) Reset()         { *m = WorkerDataBundles{} }
func (m *WorkerDataBundles) String() string { return proto.CompactTextString(m) }
func (*WorkerDataBundles) ProtoMessage()    {}
func (*WorkerDataBundles) Descriptor() ([]byte, []int) {
	return fileDescriptor_60e5359cc895864b, []int{8}
}
func (m *WorkerDataBundles) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkerDataBundles) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkerDataBundles.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkerDataBundles) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkerDataBundles.Merge(m, src)
}
func (m *WorkerDataBundles) XXX_Size() int {
	return m.Size()
}
func (m *WorkerDataBundles) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkerDataBundles.DiscardUnknown(m)
}

var xxx_messageInfo_WorkerDataBundles proto.InternalMessageInfo

func (m *WorkerDataBundles) GetWorkerDataBundles() []*WorkerDataBundle {
	if m != nil {
		return m.WorkerDataBundles
	}
	return nil
}

func init() {
	proto.RegisterType((*TimestampedValue)(nil), "emissions.v3.TimestampedValue")
	proto.RegisterType((*Inference)(nil), "emissions.v3.Inference")
	proto.RegisterType((*Inferences)(nil), "emissions.v3.Inferences")
	proto.RegisterType((*ForecastElement)(nil), "emissions.v3.ForecastElement")
	proto.RegisterType((*Forecast)(nil), "emissions.v3.Forecast")
	proto.RegisterType((*Forecasts)(nil), "emissions.v3.Forecasts")
	proto.RegisterType((*InferenceForecastBundle)(nil), "emissions.v3.InferenceForecastBundle")
	proto.RegisterType((*WorkerDataBundle)(nil), "emissions.v3.WorkerDataBundle")
	proto.RegisterType((*WorkerDataBundles)(nil), "emissions.v3.WorkerDataBundles")
}

func init() { proto.RegisterFile("emissions/v3/worker.proto", fileDescriptor_60e5359cc895864b) }

var fileDescriptor_60e5359cc895864b = []byte{
	// 647 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x4f, 0x4f, 0x13, 0x41,
	0x14, 0xef, 0xd0, 0x16, 0xe8, 0x83, 0x44, 0x18, 0x08, 0x2c, 0x24, 0x2c, 0xb5, 0x09, 0x49, 0x3d,
	0xd8, 0x4d, 0x40, 0x83, 0xf1, 0x26, 0x01, 0x23, 0x26, 0x92, 0x38, 0x1a, 0x4d, 0xbc, 0x6c, 0xa6,
	0xdb, 0x69, 0x3b, 0xa1, 0xdd, 0xd9, 0xec, 0x4c, 0xf9, 0x73, 0xf3, 0xec, 0xc9, 0x8f, 0xe0, 0xa7,
	0x31, 0x1c, 0x39, 0xaa, 0x07, 0x62, 0xe0, 0xe2, 0xc5, 0xef, 0x60, 0x76, 0x76, 0x76, 0x97, 0x5d,
	0xac, 0x9a, 0xc8, 0x6d, 0xdf, 0xdb, 0x5f, 0xdf, 0xfb, 0xfd, 0xd9, 0x99, 0xc2, 0x0a, 0x1b, 0x72,
	0x29, 0xb9, 0xf0, 0xa5, 0x73, 0xb4, 0xe5, 0x1c, 0x8b, 0xf0, 0x90, 0x85, 0xad, 0x20, 0x14, 0x4a,
	0xe0, 0xd9, 0xf4, 0x55, 0xeb, 0x68, 0x6b, 0xd5, 0xca, 0x01, 0x7d, 0xe1, 0x7b, 0x2c, 0xc6, 0xad,
	0x2e, 0xf6, 0x44, 0x4f, 0xe8, 0x47, 0x27, 0x7a, 0x8a, 0xbb, 0x8d, 0x0f, 0x08, 0xe6, 0x5e, 0xf3,
	0x21, 0x93, 0x8a, 0x0e, 0x03, 0xd6, 0x79, 0x43, 0x07, 0x23, 0x86, 0xef, 0xc2, 0x6c, 0x7b, 0x20,
	0xbc, 0x43, 0xb7, 0xcf, 0x78, 0xaf, 0xaf, 0x2c, 0x54, 0x47, 0xcd, 0x32, 0x99, 0xd1, 0xbd, 0x67,
	0xba, 0x85, 0x5f, 0x40, 0xf5, 0x28, 0xc2, 0x5a, 0x13, 0x75, 0xd4, 0xac, 0xed, 0x6c, 0x9f, 0x5d,
	0xac, 0x97, 0xbe, 0x5d, 0xac, 0x3b, 0x3d, 0xae, 0xfa, 0xa3, 0x76, 0xcb, 0x13, 0x43, 0x87, 0x0e,
	0x06, 0x22, 0xa4, 0xf7, 0x7d, 0xa6, 0x22, 0xbe, 0x49, 0xe9, 0xf5, 0x29, 0xf7, 0x9d, 0x21, 0x55,
	0xfd, 0xd6, 0x2e, 0xf3, 0x48, 0x3c, 0xe5, 0x71, 0xe5, 0xc7, 0xa7, 0x75, 0xd4, 0xf8, 0x89, 0xa0,
	0xb6, 0xef, 0x77, 0x59, 0xc8, 0x7c, 0x8f, 0xe1, 0x15, 0x98, 0x56, 0x22, 0xe0, 0x9e, 0xcb, 0x3b,
	0x9a, 0x41, 0x85, 0x4c, 0xe9, 0x7a, 0xbf, 0x73, 0x83, 0xe0, 0xc4, 0x4d, 0x82, 0x16, 0x4c, 0x71,
	0x3d, 0x2a, 0xb4, 0xca, 0x11, 0x45, 0x92, 0x94, 0x19, 0xf5, 0xca, 0x6d, 0x50, 0xc7, 0x6b, 0x00,
	0xec, 0x44, 0x85, 0xd4, 0xed, 0x50, 0x45, 0xad, 0x6a, 0x1d, 0x35, 0x67, 0x49, 0x4d, 0x77, 0x76,
	0xa9, 0xa2, 0x78, 0x11, 0xaa, 0x41, 0x28, 0x44, 0xd7, 0x9a, 0xd4, 0x2c, 0xe2, 0xc2, 0xe8, 0xdd,
	0x03, 0x48, 0xe5, 0x4a, 0xbc, 0x0d, 0xc0, 0xd3, 0xca, 0x42, 0xf5, 0x72, 0x73, 0x66, 0x73, 0xb9,
	0x75, 0x3d, 0xdd, 0x56, 0x8a, 0x26, 0xd7, 0xa0, 0x8d, 0xf7, 0x08, 0xee, 0x3c, 0x15, 0x21, 0xf3,
	0xa8, 0x54, 0x7b, 0x03, 0x36, 0x64, 0x7e, 0x4e, 0x3e, 0x1a, 0x23, 0xff, 0x36, 0x93, 0xfb, 0x8a,
	0x60, 0x3a, 0xa1, 0xf0, 0x9f, 0xc1, 0xd9, 0x00, 0x5d, 0x33, 0x29, 0xcd, 0xee, 0x5a, 0x07, 0x3f,
	0x87, 0xf9, 0xa4, 0x72, 0x59, 0xac, 0x56, 0x5a, 0x15, 0xed, 0xd6, 0x5a, 0xde, 0xad, 0x82, 0x27,
	0x64, 0xae, 0x9b, 0x6f, 0xc8, 0xbf, 0x64, 0x67, 0xb4, 0x3d, 0x81, 0x5a, 0x32, 0x49, 0xe2, 0x07,
	0x50, 0x4b, 0xa6, 0x24, 0x19, 0x2d, 0xfd, 0x7e, 0x2b, 0xc9, 0x80, 0xd1, 0x29, 0x5b, 0x4e, 0xb3,
	0x4b, 0x00, 0x3b, 0x23, 0xbf, 0x33, 0x60, 0xf8, 0x21, 0xd4, 0xd2, 0x2c, 0xb5, 0x5d, 0x7f, 0x48,
	0x3d, 0x43, 0xe2, 0x4d, 0x98, 0x4e, 0xe6, 0x6b, 0x17, 0xc7, 0xf3, 0x48, 0x71, 0x46, 0xcf, 0xe7,
	0x09, 0x98, 0x7b, 0xab, 0x6f, 0x90, 0x48, 0xa4, 0x61, 0xb1, 0x04, 0x93, 0xf1, 0xad, 0x62, 0x3e,
	0x17, 0x53, 0xe1, 0x7b, 0x50, 0xd5, 0x97, 0x88, 0xd9, 0xb1, 0x90, 0xdf, 0x71, 0x10, 0xbd, 0x22,
	0x31, 0x22, 0x17, 0x7b, 0x39, 0x1f, 0xbb, 0x07, 0xab, 0x29, 0x73, 0x37, 0xb5, 0xc5, 0x6d, 0xeb,
	0xdd, 0xfa, 0x1c, 0xce, 0x6c, 0x6e, 0x8c, 0x11, 0x9d, 0xb7, 0x8b, 0x58, 0xbc, 0xf8, 0x42, 0x1a,
	0x09, 0x2f, 0x61, 0x23, 0x3b, 0x14, 0x37, 0xb6, 0xb8, 0x92, 0xf7, 0x7c, 0xaa, 0x46, 0x21, 0x33,
	0x39, 0x37, 0x32, 0x70, 0x61, 0xd2, 0xab, 0x04, 0x19, 0xb9, 0x12, 0x8c, 0xda, 0x87, 0xec, 0xd4,
	0x9c, 0x5e, 0x53, 0x19, 0x23, 0x3d, 0x98, 0x2f, 0xfa, 0x28, 0xf1, 0x01, 0x2c, 0xc4, 0xd6, 0xe9,
	0x6f, 0xca, 0x2c, 0x4f, 0x3e, 0x15, 0x3b, 0xaf, 0xb1, 0xf8, 0x6b, 0x32, 0x7f, 0x5c, 0x9c, 0xb7,
	0x43, 0xce, 0x2e, 0x6d, 0x74, 0x7e, 0x69, 0xa3, 0xef, 0x97, 0x36, 0xfa, 0x78, 0x65, 0x97, 0xce,
	0xaf, 0xec, 0xd2, 0x97, 0x2b, 0xbb, 0xf4, 0xee, 0xd1, 0x3f, 0x9e, 0xd8, 0x13, 0x27, 0xfb, 0x4f,
	0x50, 0xa7, 0x01, 0x93, 0xed, 0x49, 0x7d, 0xf7, 0x6f, 0xfd, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xae,
	0x9e, 0x56, 0xa4, 0x56, 0x06, 0x00, 0x00,
}

func (this *TimestampedValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TimestampedValue)
	if !ok {
		that2, ok := that.(TimestampedValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BlockHeight != that1.BlockHeight {
		return false
	}
	if !this.Value.Equal(that1.Value) {
		return false
	}
	return true
}
func (this *Inference) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Inference)
	if !ok {
		that2, ok := that.(Inference)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TopicId != that1.TopicId {
		return false
	}
	if this.BlockHeight != that1.BlockHeight {
		return false
	}
	if this.Inferer != that1.Inferer {
		return false
	}
	if !this.Value.Equal(that1.Value) {
		return false
	}
	if !bytes.Equal(this.ExtraData, that1.ExtraData) {
		return false
	}
	if this.Proof != that1.Proof {
		return false
	}
	return true
}
func (this *ForecastElement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForecastElement)
	if !ok {
		that2, ok := that.(ForecastElement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Inferer != that1.Inferer {
		return false
	}
	if !this.Value.Equal(that1.Value) {
		return false
	}
	return true
}
func (this *Forecast) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Forecast)
	if !ok {
		that2, ok := that.(Forecast)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TopicId != that1.TopicId {
		return false
	}
	if this.BlockHeight != that1.BlockHeight {
		return false
	}
	if this.Forecaster != that1.Forecaster {
		return false
	}
	if len(this.ForecastElements) != len(that1.ForecastElements) {
		return false
	}
	for i := range this.ForecastElements {
		if !this.ForecastElements[i].Equal(that1.ForecastElements[i]) {
			return false
		}
	}
	if !bytes.Equal(this.ExtraData, that1.ExtraData) {
		return false
	}
	return true
}
func (this *InferenceForecastBundle) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InferenceForecastBundle)
	if !ok {
		that2, ok := that.(InferenceForecastBundle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Inference.Equal(that1.Inference) {
		return false
	}
	if !this.Forecast.Equal(that1.Forecast) {
		return false
	}
	return true
}
func (this *WorkerDataBundle) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkerDataBundle)
	if !ok {
		that2, ok := that.(WorkerDataBundle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Worker != that1.Worker {
		return false
	}
	if !this.Nonce.Equal(that1.Nonce) {
		return false
	}
	if this.TopicId != that1.TopicId {
		return false
	}
	if !this.InferenceForecastsBundle.Equal(that1.InferenceForecastsBundle) {
		return false
	}
	if !bytes.Equal(this.InferencesForecastsBundleSignature, that1.InferencesForecastsBundleSignature) {
		return false
	}
	if this.Pubkey != that1.Pubkey {
		return false
	}
	return true
}
func (m *TimestampedValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimestampedValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimestampedValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Value.Size()
		i -= size
		if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintWorker(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.BlockHeight != 0 {
		i = encodeVarintWorker(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Inference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Inference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Inference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintWorker(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ExtraData) > 0 {
		i -= len(m.ExtraData)
		copy(dAtA[i:], m.ExtraData)
		i = encodeVarintWorker(dAtA, i, uint64(len(m.ExtraData)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size := m.Value.Size()
		i -= size
		if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintWorker(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Inferer) > 0 {
		i -= len(m.Inferer)
		copy(dAtA[i:], m.Inferer)
		i = encodeVarintWorker(dAtA, i, uint64(len(m.Inferer)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BlockHeight != 0 {
		i = encodeVarintWorker(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicId != 0 {
		i = encodeVarintWorker(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Inferences) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Inferences) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Inferences) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Inferences) > 0 {
		for iNdEx := len(m.Inferences) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Inferences[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWorker(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ForecastElement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForecastElement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForecastElement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Value.Size()
		i -= size
		if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintWorker(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Inferer) > 0 {
		i -= len(m.Inferer)
		copy(dAtA[i:], m.Inferer)
		i = encodeVarintWorker(dAtA, i, uint64(len(m.Inferer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Forecast) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Forecast) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Forecast) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExtraData) > 0 {
		i -= len(m.ExtraData)
		copy(dAtA[i:], m.ExtraData)
		i = encodeVarintWorker(dAtA, i, uint64(len(m.ExtraData)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ForecastElements) > 0 {
		for iNdEx := len(m.ForecastElements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ForecastElements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWorker(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Forecaster) > 0 {
		i -= len(m.Forecaster)
		copy(dAtA[i:], m.Forecaster)
		i = encodeVarintWorker(dAtA, i, uint64(len(m.Forecaster)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BlockHeight != 0 {
		i = encodeVarintWorker(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicId != 0 {
		i = encodeVarintWorker(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Forecasts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Forecasts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Forecasts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Forecasts) > 0 {
		for iNdEx := len(m.Forecasts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Forecasts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWorker(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *InferenceForecastBundle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InferenceForecastBundle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InferenceForecastBundle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Forecast != nil {
		{
			size, err := m.Forecast.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Inference != nil {
		{
			size, err := m.Inference.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkerDataBundle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkerDataBundle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkerDataBundle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintWorker(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.InferencesForecastsBundleSignature) > 0 {
		i -= len(m.InferencesForecastsBundleSignature)
		copy(dAtA[i:], m.InferencesForecastsBundleSignature)
		i = encodeVarintWorker(dAtA, i, uint64(len(m.InferencesForecastsBundleSignature)))
		i--
		dAtA[i] = 0x2a
	}
	if m.InferenceForecastsBundle != nil {
		{
			size, err := m.InferenceForecastsBundle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.TopicId != 0 {
		i = encodeVarintWorker(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x18
	}
	if m.Nonce != nil {
		{
			size, err := m.Nonce.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Worker) > 0 {
		i -= len(m.Worker)
		copy(dAtA[i:], m.Worker)
		i = encodeVarintWorker(dAtA, i, uint64(len(m.Worker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkerDataBundles) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkerDataBundles) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkerDataBundles) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WorkerDataBundles) > 0 {
		for iNdEx := len(m.WorkerDataBundles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WorkerDataBundles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWorker(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintWorker(dAtA []byte, offset int, v uint64) int {
	offset -= sovWorker(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TimestampedValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovWorker(uint64(m.BlockHeight))
	}
	l = m.Value.Size()
	n += 1 + l + sovWorker(uint64(l))
	return n
}

func (m *Inference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovWorker(uint64(m.TopicId))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovWorker(uint64(m.BlockHeight))
	}
	l = len(m.Inferer)
	if l > 0 {
		n += 1 + l + sovWorker(uint64(l))
	}
	l = m.Value.Size()
	n += 1 + l + sovWorker(uint64(l))
	l = len(m.ExtraData)
	if l > 0 {
		n += 1 + l + sovWorker(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovWorker(uint64(l))
	}
	return n
}

func (m *Inferences) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Inferences) > 0 {
		for _, e := range m.Inferences {
			l = e.Size()
			n += 1 + l + sovWorker(uint64(l))
		}
	}
	return n
}

func (m *ForecastElement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Inferer)
	if l > 0 {
		n += 1 + l + sovWorker(uint64(l))
	}
	l = m.Value.Size()
	n += 1 + l + sovWorker(uint64(l))
	return n
}

func (m *Forecast) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovWorker(uint64(m.TopicId))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovWorker(uint64(m.BlockHeight))
	}
	l = len(m.Forecaster)
	if l > 0 {
		n += 1 + l + sovWorker(uint64(l))
	}
	if len(m.ForecastElements) > 0 {
		for _, e := range m.ForecastElements {
			l = e.Size()
			n += 1 + l + sovWorker(uint64(l))
		}
	}
	l = len(m.ExtraData)
	if l > 0 {
		n += 1 + l + sovWorker(uint64(l))
	}
	return n
}

func (m *Forecasts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Forecasts) > 0 {
		for _, e := range m.Forecasts {
			l = e.Size()
			n += 1 + l + sovWorker(uint64(l))
		}
	}
	return n
}

func (m *InferenceForecastBundle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Inference != nil {
		l = m.Inference.Size()
		n += 1 + l + sovWorker(uint64(l))
	}
	if m.Forecast != nil {
		l = m.Forecast.Size()
		n += 1 + l + sovWorker(uint64(l))
	}
	return n
}

func (m *WorkerDataBundle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Worker)
	if l > 0 {
		n += 1 + l + sovWorker(uint64(l))
	}
	if m.Nonce != nil {
		l = m.Nonce.Size()
		n += 1 + l + sovWorker(uint64(l))
	}
	if m.TopicId != 0 {
		n += 1 + sovWorker(uint64(m.TopicId))
	}
	if m.InferenceForecastsBundle != nil {
		l = m.InferenceForecastsBundle.Size()
		n += 1 + l + sovWorker(uint64(l))
	}
	l = len(m.InferencesForecastsBundleSignature)
	if l > 0 {
		n += 1 + l + sovWorker(uint64(l))
	}
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovWorker(uint64(l))
	}
	return n
}

func (m *WorkerDataBundles) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.WorkerDataBundles) > 0 {
		for _, e := range m.WorkerDataBundles {
			l = e.Size()
			n += 1 + l + sovWorker(uint64(l))
		}
	}
	return n
}

func sovWorker(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWorker(x uint64) (n int) {
	return sovWorker(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TimestampedValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimestampedValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimestampedValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Inference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Inference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Inference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inferer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inferer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWorker
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraData = append(m.ExtraData[:0], dAtA[iNdEx:postIndex]...)
			if m.ExtraData == nil {
				m.ExtraData = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Inferences) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Inferences: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Inferences: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inferences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inferences = append(m.Inferences, &Inference{})
			if err := m.Inferences[len(m.Inferences)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForecastElement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForecastElement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForecastElement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inferer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inferer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Forecast) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Forecast: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Forecast: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forecaster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Forecaster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForecastElements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForecastElements = append(m.ForecastElements, &ForecastElement{})
			if err := m.ForecastElements[len(m.ForecastElements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWorker
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraData = append(m.ExtraData[:0], dAtA[iNdEx:postIndex]...)
			if m.ExtraData == nil {
				m.ExtraData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Forecasts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Forecasts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Forecasts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forecasts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Forecasts = append(m.Forecasts, &Forecast{})
			if err := m.Forecasts[len(m.Forecasts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InferenceForecastBundle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InferenceForecastBundle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InferenceForecastBundle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inference", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Inference == nil {
				m.Inference = &Inference{}
			}
			if err := m.Inference.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forecast", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Forecast == nil {
				m.Forecast = &Forecast{}
			}
			if err := m.Forecast.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkerDataBundle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkerDataBundle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkerDataBundle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Worker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Worker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nonce == nil {
				m.Nonce = &Nonce{}
			}
			if err := m.Nonce.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InferenceForecastsBundle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InferenceForecastsBundle == nil {
				m.InferenceForecastsBundle = &InferenceForecastBundle{}
			}
			if err := m.InferenceForecastsBundle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InferencesForecastsBundleSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWorker
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InferencesForecastsBundleSignature = append(m.InferencesForecastsBundleSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.InferencesForecastsBundleSignature == nil {
				m.InferencesForecastsBundleSignature = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkerDataBundles) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkerDataBundles: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkerDataBundles: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerDataBundles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkerDataBundles = append(m.WorkerDataBundles, &WorkerDataBundle{})
			if err := m.WorkerDataBundles[len(m.WorkerDataBundles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWorker(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWorker
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWorker
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWorker
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWorker
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWorker        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWorker          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWorker = fmt.Errorf("proto: unexpected end of group")
)
