// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: emissions/v1/query.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	github_com_allora_network_allora_chain_math "github.com/allora-network/allora-chain/math"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params defines the parameters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// Total Stake returns the total amount of stake in the system
type QueryTotalStakeRequest struct {
}

func (m *QueryTotalStakeRequest) Reset()         { *m = QueryTotalStakeRequest{} }
func (m *QueryTotalStakeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTotalStakeRequest) ProtoMessage()    {}
func (*QueryTotalStakeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{2}
}
func (m *QueryTotalStakeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalStakeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalStakeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalStakeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalStakeRequest.Merge(m, src)
}
func (m *QueryTotalStakeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalStakeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalStakeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalStakeRequest proto.InternalMessageInfo

// Total Stake returns the total amount of stake in the system
//
// NOTE: The amount field is an Int which implements the custom method
// signatures required by gogoproto.
type QueryTotalStakeResponse struct {
	Amount cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *QueryTotalStakeResponse) Reset()         { *m = QueryTotalStakeResponse{} }
func (m *QueryTotalStakeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalStakeResponse) ProtoMessage()    {}
func (*QueryTotalStakeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{3}
}
func (m *QueryTotalStakeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalStakeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalStakeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalStakeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalStakeResponse.Merge(m, src)
}
func (m *QueryTotalStakeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalStakeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalStakeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalStakeResponse proto.InternalMessageInfo

type QueryReputerStakeInTopicRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	TopicId uint64 `protobuf:"varint,2,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *QueryReputerStakeInTopicRequest) Reset()         { *m = QueryReputerStakeInTopicRequest{} }
func (m *QueryReputerStakeInTopicRequest) String() string { return proto.CompactTextString(m) }
func (*QueryReputerStakeInTopicRequest) ProtoMessage()    {}
func (*QueryReputerStakeInTopicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{4}
}
func (m *QueryReputerStakeInTopicRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReputerStakeInTopicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReputerStakeInTopicRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReputerStakeInTopicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReputerStakeInTopicRequest.Merge(m, src)
}
func (m *QueryReputerStakeInTopicRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryReputerStakeInTopicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReputerStakeInTopicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReputerStakeInTopicRequest proto.InternalMessageInfo

func (m *QueryReputerStakeInTopicRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryReputerStakeInTopicRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type QueryReputerStakeInTopicResponse struct {
	Amount cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *QueryReputerStakeInTopicResponse) Reset()         { *m = QueryReputerStakeInTopicResponse{} }
func (m *QueryReputerStakeInTopicResponse) String() string { return proto.CompactTextString(m) }
func (*QueryReputerStakeInTopicResponse) ProtoMessage()    {}
func (*QueryReputerStakeInTopicResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{5}
}
func (m *QueryReputerStakeInTopicResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReputerStakeInTopicResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReputerStakeInTopicResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReputerStakeInTopicResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReputerStakeInTopicResponse.Merge(m, src)
}
func (m *QueryReputerStakeInTopicResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryReputerStakeInTopicResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReputerStakeInTopicResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReputerStakeInTopicResponse proto.InternalMessageInfo

type QueryMultiReputerStakeInTopicRequest struct {
	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	TopicId   uint64   `protobuf:"varint,2,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *QueryMultiReputerStakeInTopicRequest) Reset()         { *m = QueryMultiReputerStakeInTopicRequest{} }
func (m *QueryMultiReputerStakeInTopicRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMultiReputerStakeInTopicRequest) ProtoMessage()    {}
func (*QueryMultiReputerStakeInTopicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{6}
}
func (m *QueryMultiReputerStakeInTopicRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMultiReputerStakeInTopicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMultiReputerStakeInTopicRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMultiReputerStakeInTopicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMultiReputerStakeInTopicRequest.Merge(m, src)
}
func (m *QueryMultiReputerStakeInTopicRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMultiReputerStakeInTopicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMultiReputerStakeInTopicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMultiReputerStakeInTopicRequest proto.InternalMessageInfo

func (m *QueryMultiReputerStakeInTopicRequest) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *QueryMultiReputerStakeInTopicRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type QueryMultiReputerStakeInTopicResponse struct {
	Amounts []*StakeInfo `protobuf:"bytes,1,rep,name=amounts,proto3" json:"amounts,omitempty"`
}

func (m *QueryMultiReputerStakeInTopicResponse) Reset()         { *m = QueryMultiReputerStakeInTopicResponse{} }
func (m *QueryMultiReputerStakeInTopicResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMultiReputerStakeInTopicResponse) ProtoMessage()    {}
func (*QueryMultiReputerStakeInTopicResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{7}
}
func (m *QueryMultiReputerStakeInTopicResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMultiReputerStakeInTopicResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMultiReputerStakeInTopicResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMultiReputerStakeInTopicResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMultiReputerStakeInTopicResponse.Merge(m, src)
}
func (m *QueryMultiReputerStakeInTopicResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMultiReputerStakeInTopicResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMultiReputerStakeInTopicResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMultiReputerStakeInTopicResponse proto.InternalMessageInfo

func (m *QueryMultiReputerStakeInTopicResponse) GetAmounts() []*StakeInfo {
	if m != nil {
		return m.Amounts
	}
	return nil
}

type QueryStakeFromReputerInTopicInSelfRequest struct {
	ReputerAddress string `protobuf:"bytes,1,opt,name=reputer_address,json=reputerAddress,proto3" json:"reputer_address,omitempty"`
	TopicId        uint64 `protobuf:"varint,2,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *QueryStakeFromReputerInTopicInSelfRequest) Reset() {
	*m = QueryStakeFromReputerInTopicInSelfRequest{}
}
func (m *QueryStakeFromReputerInTopicInSelfRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryStakeFromReputerInTopicInSelfRequest) ProtoMessage() {}
func (*QueryStakeFromReputerInTopicInSelfRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{8}
}
func (m *QueryStakeFromReputerInTopicInSelfRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakeFromReputerInTopicInSelfRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakeFromReputerInTopicInSelfRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakeFromReputerInTopicInSelfRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakeFromReputerInTopicInSelfRequest.Merge(m, src)
}
func (m *QueryStakeFromReputerInTopicInSelfRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakeFromReputerInTopicInSelfRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakeFromReputerInTopicInSelfRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakeFromReputerInTopicInSelfRequest proto.InternalMessageInfo

func (m *QueryStakeFromReputerInTopicInSelfRequest) GetReputerAddress() string {
	if m != nil {
		return m.ReputerAddress
	}
	return ""
}

func (m *QueryStakeFromReputerInTopicInSelfRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type QueryStakeFromReputerInTopicInSelfResponse struct {
	Amount cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *QueryStakeFromReputerInTopicInSelfResponse) Reset() {
	*m = QueryStakeFromReputerInTopicInSelfResponse{}
}
func (m *QueryStakeFromReputerInTopicInSelfResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryStakeFromReputerInTopicInSelfResponse) ProtoMessage() {}
func (*QueryStakeFromReputerInTopicInSelfResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{9}
}
func (m *QueryStakeFromReputerInTopicInSelfResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakeFromReputerInTopicInSelfResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakeFromReputerInTopicInSelfResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakeFromReputerInTopicInSelfResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakeFromReputerInTopicInSelfResponse.Merge(m, src)
}
func (m *QueryStakeFromReputerInTopicInSelfResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakeFromReputerInTopicInSelfResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakeFromReputerInTopicInSelfResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakeFromReputerInTopicInSelfResponse proto.InternalMessageInfo

type QueryDelegateStakeInTopicInReputerRequest struct {
	ReputerAddress string `protobuf:"bytes,1,opt,name=reputer_address,json=reputerAddress,proto3" json:"reputer_address,omitempty"`
	TopicId        uint64 `protobuf:"varint,2,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *QueryDelegateStakeInTopicInReputerRequest) Reset() {
	*m = QueryDelegateStakeInTopicInReputerRequest{}
}
func (m *QueryDelegateStakeInTopicInReputerRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryDelegateStakeInTopicInReputerRequest) ProtoMessage() {}
func (*QueryDelegateStakeInTopicInReputerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{10}
}
func (m *QueryDelegateStakeInTopicInReputerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegateStakeInTopicInReputerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegateStakeInTopicInReputerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegateStakeInTopicInReputerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegateStakeInTopicInReputerRequest.Merge(m, src)
}
func (m *QueryDelegateStakeInTopicInReputerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegateStakeInTopicInReputerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegateStakeInTopicInReputerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegateStakeInTopicInReputerRequest proto.InternalMessageInfo

func (m *QueryDelegateStakeInTopicInReputerRequest) GetReputerAddress() string {
	if m != nil {
		return m.ReputerAddress
	}
	return ""
}

func (m *QueryDelegateStakeInTopicInReputerRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type QueryDelegateStakeInTopicInReputerResponse struct {
	Amount cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *QueryDelegateStakeInTopicInReputerResponse) Reset() {
	*m = QueryDelegateStakeInTopicInReputerResponse{}
}
func (m *QueryDelegateStakeInTopicInReputerResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryDelegateStakeInTopicInReputerResponse) ProtoMessage() {}
func (*QueryDelegateStakeInTopicInReputerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{11}
}
func (m *QueryDelegateStakeInTopicInReputerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegateStakeInTopicInReputerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegateStakeInTopicInReputerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegateStakeInTopicInReputerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegateStakeInTopicInReputerResponse.Merge(m, src)
}
func (m *QueryDelegateStakeInTopicInReputerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegateStakeInTopicInReputerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegateStakeInTopicInReputerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegateStakeInTopicInReputerResponse proto.InternalMessageInfo

type QueryStakeFromDelegatorInTopicInReputerRequest struct {
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	ReputerAddress   string `protobuf:"bytes,2,opt,name=reputer_address,json=reputerAddress,proto3" json:"reputer_address,omitempty"`
	TopicId          uint64 `protobuf:"varint,3,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *QueryStakeFromDelegatorInTopicInReputerRequest) Reset() {
	*m = QueryStakeFromDelegatorInTopicInReputerRequest{}
}
func (m *QueryStakeFromDelegatorInTopicInReputerRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryStakeFromDelegatorInTopicInReputerRequest) ProtoMessage() {}
func (*QueryStakeFromDelegatorInTopicInReputerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{12}
}
func (m *QueryStakeFromDelegatorInTopicInReputerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakeFromDelegatorInTopicInReputerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakeFromDelegatorInTopicInReputerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakeFromDelegatorInTopicInReputerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakeFromDelegatorInTopicInReputerRequest.Merge(m, src)
}
func (m *QueryStakeFromDelegatorInTopicInReputerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakeFromDelegatorInTopicInReputerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakeFromDelegatorInTopicInReputerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakeFromDelegatorInTopicInReputerRequest proto.InternalMessageInfo

func (m *QueryStakeFromDelegatorInTopicInReputerRequest) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

func (m *QueryStakeFromDelegatorInTopicInReputerRequest) GetReputerAddress() string {
	if m != nil {
		return m.ReputerAddress
	}
	return ""
}

func (m *QueryStakeFromDelegatorInTopicInReputerRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type QueryStakeFromDelegatorInTopicInReputerResponse struct {
	Amount cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *QueryStakeFromDelegatorInTopicInReputerResponse) Reset() {
	*m = QueryStakeFromDelegatorInTopicInReputerResponse{}
}
func (m *QueryStakeFromDelegatorInTopicInReputerResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryStakeFromDelegatorInTopicInReputerResponse) ProtoMessage() {}
func (*QueryStakeFromDelegatorInTopicInReputerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{13}
}
func (m *QueryStakeFromDelegatorInTopicInReputerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakeFromDelegatorInTopicInReputerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakeFromDelegatorInTopicInReputerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakeFromDelegatorInTopicInReputerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakeFromDelegatorInTopicInReputerResponse.Merge(m, src)
}
func (m *QueryStakeFromDelegatorInTopicInReputerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakeFromDelegatorInTopicInReputerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakeFromDelegatorInTopicInReputerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakeFromDelegatorInTopicInReputerResponse proto.InternalMessageInfo

type QueryStakeFromDelegatorInTopicRequest struct {
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	TopicId          uint64 `protobuf:"varint,2,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *QueryStakeFromDelegatorInTopicRequest) Reset()         { *m = QueryStakeFromDelegatorInTopicRequest{} }
func (m *QueryStakeFromDelegatorInTopicRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStakeFromDelegatorInTopicRequest) ProtoMessage()    {}
func (*QueryStakeFromDelegatorInTopicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{14}
}
func (m *QueryStakeFromDelegatorInTopicRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakeFromDelegatorInTopicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakeFromDelegatorInTopicRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakeFromDelegatorInTopicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakeFromDelegatorInTopicRequest.Merge(m, src)
}
func (m *QueryStakeFromDelegatorInTopicRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakeFromDelegatorInTopicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakeFromDelegatorInTopicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakeFromDelegatorInTopicRequest proto.InternalMessageInfo

func (m *QueryStakeFromDelegatorInTopicRequest) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

func (m *QueryStakeFromDelegatorInTopicRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type QueryStakeFromDelegatorInTopicResponse struct {
	Amount cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *QueryStakeFromDelegatorInTopicResponse) Reset() {
	*m = QueryStakeFromDelegatorInTopicResponse{}
}
func (m *QueryStakeFromDelegatorInTopicResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStakeFromDelegatorInTopicResponse) ProtoMessage()    {}
func (*QueryStakeFromDelegatorInTopicResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{15}
}
func (m *QueryStakeFromDelegatorInTopicResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakeFromDelegatorInTopicResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakeFromDelegatorInTopicResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakeFromDelegatorInTopicResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakeFromDelegatorInTopicResponse.Merge(m, src)
}
func (m *QueryStakeFromDelegatorInTopicResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakeFromDelegatorInTopicResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakeFromDelegatorInTopicResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakeFromDelegatorInTopicResponse proto.InternalMessageInfo

type QueryTopicStakeRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *QueryTopicStakeRequest) Reset()         { *m = QueryTopicStakeRequest{} }
func (m *QueryTopicStakeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTopicStakeRequest) ProtoMessage()    {}
func (*QueryTopicStakeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{16}
}
func (m *QueryTopicStakeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTopicStakeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTopicStakeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTopicStakeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTopicStakeRequest.Merge(m, src)
}
func (m *QueryTopicStakeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTopicStakeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTopicStakeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTopicStakeRequest proto.InternalMessageInfo

func (m *QueryTopicStakeRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type QueryTopicStakeResponse struct {
	Amount cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *QueryTopicStakeResponse) Reset()         { *m = QueryTopicStakeResponse{} }
func (m *QueryTopicStakeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTopicStakeResponse) ProtoMessage()    {}
func (*QueryTopicStakeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{17}
}
func (m *QueryTopicStakeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTopicStakeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTopicStakeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTopicStakeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTopicStakeResponse.Merge(m, src)
}
func (m *QueryTopicStakeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTopicStakeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTopicStakeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTopicStakeResponse proto.InternalMessageInfo

type QueryNetworkLossBundleAtBlockRequest struct {
	TopicId     uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	BlockHeight int64  `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *QueryNetworkLossBundleAtBlockRequest) Reset()         { *m = QueryNetworkLossBundleAtBlockRequest{} }
func (m *QueryNetworkLossBundleAtBlockRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNetworkLossBundleAtBlockRequest) ProtoMessage()    {}
func (*QueryNetworkLossBundleAtBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{18}
}
func (m *QueryNetworkLossBundleAtBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNetworkLossBundleAtBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNetworkLossBundleAtBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNetworkLossBundleAtBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNetworkLossBundleAtBlockRequest.Merge(m, src)
}
func (m *QueryNetworkLossBundleAtBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNetworkLossBundleAtBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNetworkLossBundleAtBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNetworkLossBundleAtBlockRequest proto.InternalMessageInfo

func (m *QueryNetworkLossBundleAtBlockRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *QueryNetworkLossBundleAtBlockRequest) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type QueryNetworkLossBundleAtBlockResponse struct {
	LossBundle *ValueBundle `protobuf:"bytes,1,opt,name=loss_bundle,json=lossBundle,proto3" json:"loss_bundle,omitempty"`
}

func (m *QueryNetworkLossBundleAtBlockResponse) Reset()         { *m = QueryNetworkLossBundleAtBlockResponse{} }
func (m *QueryNetworkLossBundleAtBlockResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNetworkLossBundleAtBlockResponse) ProtoMessage()    {}
func (*QueryNetworkLossBundleAtBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{19}
}
func (m *QueryNetworkLossBundleAtBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNetworkLossBundleAtBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNetworkLossBundleAtBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNetworkLossBundleAtBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNetworkLossBundleAtBlockResponse.Merge(m, src)
}
func (m *QueryNetworkLossBundleAtBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNetworkLossBundleAtBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNetworkLossBundleAtBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNetworkLossBundleAtBlockResponse proto.InternalMessageInfo

func (m *QueryNetworkLossBundleAtBlockResponse) GetLossBundle() *ValueBundle {
	if m != nil {
		return m.LossBundle
	}
	return nil
}

type QueryNextTopicIdRequest struct {
}

func (m *QueryNextTopicIdRequest) Reset()         { *m = QueryNextTopicIdRequest{} }
func (m *QueryNextTopicIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNextTopicIdRequest) ProtoMessage()    {}
func (*QueryNextTopicIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{20}
}
func (m *QueryNextTopicIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNextTopicIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNextTopicIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNextTopicIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNextTopicIdRequest.Merge(m, src)
}
func (m *QueryNextTopicIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNextTopicIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNextTopicIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNextTopicIdRequest proto.InternalMessageInfo

type QueryNextTopicIdResponse struct {
	NextTopicId uint64 `protobuf:"varint,1,opt,name=next_topic_id,json=nextTopicId,proto3" json:"next_topic_id,omitempty"`
}

func (m *QueryNextTopicIdResponse) Reset()         { *m = QueryNextTopicIdResponse{} }
func (m *QueryNextTopicIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNextTopicIdResponse) ProtoMessage()    {}
func (*QueryNextTopicIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{21}
}
func (m *QueryNextTopicIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNextTopicIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNextTopicIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNextTopicIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNextTopicIdResponse.Merge(m, src)
}
func (m *QueryNextTopicIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNextTopicIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNextTopicIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNextTopicIdResponse proto.InternalMessageInfo

func (m *QueryNextTopicIdResponse) GetNextTopicId() uint64 {
	if m != nil {
		return m.NextTopicId
	}
	return 0
}

type QueryTopicRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *QueryTopicRequest) Reset()         { *m = QueryTopicRequest{} }
func (m *QueryTopicRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTopicRequest) ProtoMessage()    {}
func (*QueryTopicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{22}
}
func (m *QueryTopicRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTopicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTopicRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTopicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTopicRequest.Merge(m, src)
}
func (m *QueryTopicRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTopicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTopicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTopicRequest proto.InternalMessageInfo

func (m *QueryTopicRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type QueryTopicResponse struct {
	Topic            *Topic `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Weight           string `protobuf:"bytes,2,opt,name=weight,proto3" json:"weight,omitempty"`
	EffectiveRevenue string `protobuf:"bytes,3,opt,name=effective_revenue,json=effectiveRevenue,proto3" json:"effective_revenue,omitempty"`
}

func (m *QueryTopicResponse) Reset()         { *m = QueryTopicResponse{} }
func (m *QueryTopicResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTopicResponse) ProtoMessage()    {}
func (*QueryTopicResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{23}
}
func (m *QueryTopicResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTopicResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTopicResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTopicResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTopicResponse.Merge(m, src)
}
func (m *QueryTopicResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTopicResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTopicResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTopicResponse proto.InternalMessageInfo

func (m *QueryTopicResponse) GetTopic() *Topic {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *QueryTopicResponse) GetWeight() string {
	if m != nil {
		return m.Weight
	}
	return ""
}

func (m *QueryTopicResponse) GetEffectiveRevenue() string {
	if m != nil {
		return m.EffectiveRevenue
	}
	return ""
}

type QueryActiveTopicsRequest struct {
	Pagination *SimpleCursorPaginationRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryActiveTopicsRequest) Reset()         { *m = QueryActiveTopicsRequest{} }
func (m *QueryActiveTopicsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryActiveTopicsRequest) ProtoMessage()    {}
func (*QueryActiveTopicsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{24}
}
func (m *QueryActiveTopicsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryActiveTopicsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryActiveTopicsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryActiveTopicsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryActiveTopicsRequest.Merge(m, src)
}
func (m *QueryActiveTopicsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryActiveTopicsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryActiveTopicsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryActiveTopicsRequest proto.InternalMessageInfo

func (m *QueryActiveTopicsRequest) GetPagination() *SimpleCursorPaginationRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryActiveTopicsResponse struct {
	Topics     []*Topic                        `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"`
	Pagination *SimpleCursorPaginationResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryActiveTopicsResponse) Reset()         { *m = QueryActiveTopicsResponse{} }
func (m *QueryActiveTopicsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryActiveTopicsResponse) ProtoMessage()    {}
func (*QueryActiveTopicsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{25}
}
func (m *QueryActiveTopicsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryActiveTopicsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryActiveTopicsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryActiveTopicsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryActiveTopicsResponse.Merge(m, src)
}
func (m *QueryActiveTopicsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryActiveTopicsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryActiveTopicsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryActiveTopicsResponse proto.InternalMessageInfo

func (m *QueryActiveTopicsResponse) GetTopics() []*Topic {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *QueryActiveTopicsResponse) GetPagination() *SimpleCursorPaginationResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// Returns the inferences on a topic posted at a block height
type QueryInferencesAtBlockRequest struct {
	TopicId     uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	BlockHeight int64  `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *QueryInferencesAtBlockRequest) Reset()         { *m = QueryInferencesAtBlockRequest{} }
func (m *QueryInferencesAtBlockRequest) String() string { return proto.CompactTextString(m) }
func (*QueryInferencesAtBlockRequest) ProtoMessage()    {}
func (*QueryInferencesAtBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{26}
}
func (m *QueryInferencesAtBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInferencesAtBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInferencesAtBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInferencesAtBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInferencesAtBlockRequest.Merge(m, src)
}
func (m *QueryInferencesAtBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryInferencesAtBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInferencesAtBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInferencesAtBlockRequest proto.InternalMessageInfo

func (m *QueryInferencesAtBlockRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *QueryInferencesAtBlockRequest) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

// Returns the inferences on a topic posted at a block height
//
// NOTE: The amount field is a Uint which implements the custom method
// signatures required by gogoproto.
type QueryInferencesAtBlockResponse struct {
	Inferences *Inferences `protobuf:"bytes,1,opt,name=inferences,proto3" json:"inferences,omitempty"`
}

func (m *QueryInferencesAtBlockResponse) Reset()         { *m = QueryInferencesAtBlockResponse{} }
func (m *QueryInferencesAtBlockResponse) String() string { return proto.CompactTextString(m) }
func (*QueryInferencesAtBlockResponse) ProtoMessage()    {}
func (*QueryInferencesAtBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{27}
}
func (m *QueryInferencesAtBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInferencesAtBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInferencesAtBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInferencesAtBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInferencesAtBlockResponse.Merge(m, src)
}
func (m *QueryInferencesAtBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryInferencesAtBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInferencesAtBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInferencesAtBlockResponse proto.InternalMessageInfo

func (m *QueryInferencesAtBlockResponse) GetInferences() *Inferences {
	if m != nil {
		return m.Inferences
	}
	return nil
}

type QueryLatestTopicInferencesRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *QueryLatestTopicInferencesRequest) Reset()         { *m = QueryLatestTopicInferencesRequest{} }
func (m *QueryLatestTopicInferencesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLatestTopicInferencesRequest) ProtoMessage()    {}
func (*QueryLatestTopicInferencesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{28}
}
func (m *QueryLatestTopicInferencesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestTopicInferencesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestTopicInferencesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestTopicInferencesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestTopicInferencesRequest.Merge(m, src)
}
func (m *QueryLatestTopicInferencesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestTopicInferencesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestTopicInferencesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestTopicInferencesRequest proto.InternalMessageInfo

func (m *QueryLatestTopicInferencesRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type QueryLatestTopicInferencesResponse struct {
	Inferences  *Inferences `protobuf:"bytes,1,opt,name=inferences,proto3" json:"inferences,omitempty"`
	BlockHeight int64       `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *QueryLatestTopicInferencesResponse) Reset()         { *m = QueryLatestTopicInferencesResponse{} }
func (m *QueryLatestTopicInferencesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLatestTopicInferencesResponse) ProtoMessage()    {}
func (*QueryLatestTopicInferencesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{29}
}
func (m *QueryLatestTopicInferencesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestTopicInferencesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestTopicInferencesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestTopicInferencesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestTopicInferencesResponse.Merge(m, src)
}
func (m *QueryLatestTopicInferencesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestTopicInferencesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestTopicInferencesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestTopicInferencesResponse proto.InternalMessageInfo

func (m *QueryLatestTopicInferencesResponse) GetInferences() *Inferences {
	if m != nil {
		return m.Inferences
	}
	return nil
}

func (m *QueryLatestTopicInferencesResponse) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

// Returns the forecasts on a topic posted at a block height
type QueryForecastsAtBlockRequest struct {
	TopicId     uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	BlockHeight int64  `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *QueryForecastsAtBlockRequest) Reset()         { *m = QueryForecastsAtBlockRequest{} }
func (m *QueryForecastsAtBlockRequest) String() string { return proto.CompactTextString(m) }
func (*QueryForecastsAtBlockRequest) ProtoMessage()    {}
func (*QueryForecastsAtBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{30}
}
func (m *QueryForecastsAtBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryForecastsAtBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryForecastsAtBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryForecastsAtBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryForecastsAtBlockRequest.Merge(m, src)
}
func (m *QueryForecastsAtBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryForecastsAtBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryForecastsAtBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryForecastsAtBlockRequest proto.InternalMessageInfo

func (m *QueryForecastsAtBlockRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *QueryForecastsAtBlockRequest) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

// Returns the forecasts on a topic posted at a block height
//
// NOTE: The amount field is a Uint which implements the custom method
// signatures required by gogoproto.
type QueryForecastsAtBlockResponse struct {
	Forecasts *Forecasts `protobuf:"bytes,1,opt,name=forecasts,proto3" json:"forecasts,omitempty"`
}

func (m *QueryForecastsAtBlockResponse) Reset()         { *m = QueryForecastsAtBlockResponse{} }
func (m *QueryForecastsAtBlockResponse) String() string { return proto.CompactTextString(m) }
func (*QueryForecastsAtBlockResponse) ProtoMessage()    {}
func (*QueryForecastsAtBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{31}
}
func (m *QueryForecastsAtBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryForecastsAtBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryForecastsAtBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryForecastsAtBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryForecastsAtBlockResponse.Merge(m, src)
}
func (m *QueryForecastsAtBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryForecastsAtBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryForecastsAtBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryForecastsAtBlockResponse proto.InternalMessageInfo

func (m *QueryForecastsAtBlockResponse) GetForecasts() *Forecasts {
	if m != nil {
		return m.Forecasts
	}
	return nil
}

type QueryWorkerLatestInferenceRequest struct {
	TopicId       uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	WorkerAddress string `protobuf:"bytes,2,opt,name=worker_address,json=workerAddress,proto3" json:"worker_address,omitempty"`
}

func (m *QueryWorkerLatestInferenceRequest) Reset()         { *m = QueryWorkerLatestInferenceRequest{} }
func (m *QueryWorkerLatestInferenceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWorkerLatestInferenceRequest) ProtoMessage()    {}
func (*QueryWorkerLatestInferenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{32}
}
func (m *QueryWorkerLatestInferenceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWorkerLatestInferenceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWorkerLatestInferenceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWorkerLatestInferenceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWorkerLatestInferenceRequest.Merge(m, src)
}
func (m *QueryWorkerLatestInferenceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWorkerLatestInferenceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWorkerLatestInferenceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWorkerLatestInferenceRequest proto.InternalMessageInfo

func (m *QueryWorkerLatestInferenceRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *QueryWorkerLatestInferenceRequest) GetWorkerAddress() string {
	if m != nil {
		return m.WorkerAddress
	}
	return ""
}

type QueryWorkerLatestInferenceResponse struct {
	LatestInference *Inference `protobuf:"bytes,1,opt,name=latest_inference,json=latestInference,proto3" json:"latest_inference,omitempty"`
}

func (m *QueryWorkerLatestInferenceResponse) Reset()         { *m = QueryWorkerLatestInferenceResponse{} }
func (m *QueryWorkerLatestInferenceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWorkerLatestInferenceResponse) ProtoMessage()    {}
func (*QueryWorkerLatestInferenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{33}
}
func (m *QueryWorkerLatestInferenceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWorkerLatestInferenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWorkerLatestInferenceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWorkerLatestInferenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWorkerLatestInferenceResponse.Merge(m, src)
}
func (m *QueryWorkerLatestInferenceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWorkerLatestInferenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWorkerLatestInferenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWorkerLatestInferenceResponse proto.InternalMessageInfo

func (m *QueryWorkerLatestInferenceResponse) GetLatestInference() *Inference {
	if m != nil {
		return m.LatestInference
	}
	return nil
}

type QueryWorkerNodeInfoRequest struct {
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryWorkerNodeInfoRequest) Reset()         { *m = QueryWorkerNodeInfoRequest{} }
func (m *QueryWorkerNodeInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWorkerNodeInfoRequest) ProtoMessage()    {}
func (*QueryWorkerNodeInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{34}
}
func (m *QueryWorkerNodeInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWorkerNodeInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWorkerNodeInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWorkerNodeInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWorkerNodeInfoRequest.Merge(m, src)
}
func (m *QueryWorkerNodeInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWorkerNodeInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWorkerNodeInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWorkerNodeInfoRequest proto.InternalMessageInfo

func (m *QueryWorkerNodeInfoRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryWorkerNodeInfoResponse struct {
	NodeInfo *OffchainNode `protobuf:"bytes,1,opt,name=node_info,json=nodeInfo,proto3" json:"node_info,omitempty"`
}

func (m *QueryWorkerNodeInfoResponse) Reset()         { *m = QueryWorkerNodeInfoResponse{} }
func (m *QueryWorkerNodeInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWorkerNodeInfoResponse) ProtoMessage()    {}
func (*QueryWorkerNodeInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{35}
}
func (m *QueryWorkerNodeInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWorkerNodeInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWorkerNodeInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWorkerNodeInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWorkerNodeInfoResponse.Merge(m, src)
}
func (m *QueryWorkerNodeInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWorkerNodeInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWorkerNodeInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWorkerNodeInfoResponse proto.InternalMessageInfo

func (m *QueryWorkerNodeInfoResponse) GetNodeInfo() *OffchainNode {
	if m != nil {
		return m.NodeInfo
	}
	return nil
}

type QueryReputerNodeInfoRequest struct {
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryReputerNodeInfoRequest) Reset()         { *m = QueryReputerNodeInfoRequest{} }
func (m *QueryReputerNodeInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryReputerNodeInfoRequest) ProtoMessage()    {}
func (*QueryReputerNodeInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{36}
}
func (m *QueryReputerNodeInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReputerNodeInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReputerNodeInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReputerNodeInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReputerNodeInfoRequest.Merge(m, src)
}
func (m *QueryReputerNodeInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryReputerNodeInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReputerNodeInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReputerNodeInfoRequest proto.InternalMessageInfo

func (m *QueryReputerNodeInfoRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryReputerNodeInfoResponse struct {
	NodeInfo *OffchainNode `protobuf:"bytes,1,opt,name=node_info,json=nodeInfo,proto3" json:"node_info,omitempty"`
}

func (m *QueryReputerNodeInfoResponse) Reset()         { *m = QueryReputerNodeInfoResponse{} }
func (m *QueryReputerNodeInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryReputerNodeInfoResponse) ProtoMessage()    {}
func (*QueryReputerNodeInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{37}
}
func (m *QueryReputerNodeInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReputerNodeInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReputerNodeInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReputerNodeInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReputerNodeInfoResponse.Merge(m, src)
}
func (m *QueryReputerNodeInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryReputerNodeInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReputerNodeInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReputerNodeInfoResponse proto.InternalMessageInfo

func (m *QueryReputerNodeInfoResponse) GetNodeInfo() *OffchainNode {
	if m != nil {
		return m.NodeInfo
	}
	return nil
}

type QueryNetworkInferencesAtBlockRequest struct {
	TopicId                  uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	BlockHeightLastInference int64  `protobuf:"varint,2,opt,name=block_height_last_inference,json=blockHeightLastInference,proto3" json:"block_height_last_inference,omitempty"`
	BlockHeightLastReward    int64  `protobuf:"varint,3,opt,name=block_height_last_reward,json=blockHeightLastReward,proto3" json:"block_height_last_reward,omitempty"`
}

func (m *QueryNetworkInferencesAtBlockRequest) Reset()         { *m = QueryNetworkInferencesAtBlockRequest{} }
func (m *QueryNetworkInferencesAtBlockRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNetworkInferencesAtBlockRequest) ProtoMessage()    {}
func (*QueryNetworkInferencesAtBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{38}
}
func (m *QueryNetworkInferencesAtBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNetworkInferencesAtBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNetworkInferencesAtBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNetworkInferencesAtBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNetworkInferencesAtBlockRequest.Merge(m, src)
}
func (m *QueryNetworkInferencesAtBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNetworkInferencesAtBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNetworkInferencesAtBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNetworkInferencesAtBlockRequest proto.InternalMessageInfo

func (m *QueryNetworkInferencesAtBlockRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *QueryNetworkInferencesAtBlockRequest) GetBlockHeightLastInference() int64 {
	if m != nil {
		return m.BlockHeightLastInference
	}
	return 0
}

func (m *QueryNetworkInferencesAtBlockRequest) GetBlockHeightLastReward() int64 {
	if m != nil {
		return m.BlockHeightLastReward
	}
	return 0
}

type QueryLatestNetworkInferencesRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *QueryLatestNetworkInferencesRequest) Reset()         { *m = QueryLatestNetworkInferencesRequest{} }
func (m *QueryLatestNetworkInferencesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLatestNetworkInferencesRequest) ProtoMessage()    {}
func (*QueryLatestNetworkInferencesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{39}
}
func (m *QueryLatestNetworkInferencesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestNetworkInferencesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestNetworkInferencesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestNetworkInferencesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestNetworkInferencesRequest.Merge(m, src)
}
func (m *QueryLatestNetworkInferencesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestNetworkInferencesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestNetworkInferencesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestNetworkInferencesRequest proto.InternalMessageInfo

func (m *QueryLatestNetworkInferencesRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type QueryIsWorkerNonceUnfulfilledRequest struct {
	TopicId     uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	BlockHeight int64  `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *QueryIsWorkerNonceUnfulfilledRequest) Reset()         { *m = QueryIsWorkerNonceUnfulfilledRequest{} }
func (m *QueryIsWorkerNonceUnfulfilledRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIsWorkerNonceUnfulfilledRequest) ProtoMessage()    {}
func (*QueryIsWorkerNonceUnfulfilledRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{40}
}
func (m *QueryIsWorkerNonceUnfulfilledRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsWorkerNonceUnfulfilledRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsWorkerNonceUnfulfilledRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsWorkerNonceUnfulfilledRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsWorkerNonceUnfulfilledRequest.Merge(m, src)
}
func (m *QueryIsWorkerNonceUnfulfilledRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsWorkerNonceUnfulfilledRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsWorkerNonceUnfulfilledRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsWorkerNonceUnfulfilledRequest proto.InternalMessageInfo

func (m *QueryIsWorkerNonceUnfulfilledRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *QueryIsWorkerNonceUnfulfilledRequest) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type QueryIsWorkerNonceUnfulfilledResponse struct {
	IsWorkerNonceUnfulfilled bool `protobuf:"varint,1,opt,name=is_worker_nonce_unfulfilled,json=isWorkerNonceUnfulfilled,proto3" json:"is_worker_nonce_unfulfilled,omitempty"`
}

func (m *QueryIsWorkerNonceUnfulfilledResponse) Reset()         { *m = QueryIsWorkerNonceUnfulfilledResponse{} }
func (m *QueryIsWorkerNonceUnfulfilledResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIsWorkerNonceUnfulfilledResponse) ProtoMessage()    {}
func (*QueryIsWorkerNonceUnfulfilledResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{41}
}
func (m *QueryIsWorkerNonceUnfulfilledResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsWorkerNonceUnfulfilledResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsWorkerNonceUnfulfilledResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsWorkerNonceUnfulfilledResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsWorkerNonceUnfulfilledResponse.Merge(m, src)
}
func (m *QueryIsWorkerNonceUnfulfilledResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsWorkerNonceUnfulfilledResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsWorkerNonceUnfulfilledResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsWorkerNonceUnfulfilledResponse proto.InternalMessageInfo

func (m *QueryIsWorkerNonceUnfulfilledResponse) GetIsWorkerNonceUnfulfilled() bool {
	if m != nil {
		return m.IsWorkerNonceUnfulfilled
	}
	return false
}

type QueryUnfulfilledReputerNoncesRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *QueryUnfulfilledReputerNoncesRequest) Reset()         { *m = QueryUnfulfilledReputerNoncesRequest{} }
func (m *QueryUnfulfilledReputerNoncesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUnfulfilledReputerNoncesRequest) ProtoMessage()    {}
func (*QueryUnfulfilledReputerNoncesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{42}
}
func (m *QueryUnfulfilledReputerNoncesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUnfulfilledReputerNoncesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUnfulfilledReputerNoncesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUnfulfilledReputerNoncesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUnfulfilledReputerNoncesRequest.Merge(m, src)
}
func (m *QueryUnfulfilledReputerNoncesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUnfulfilledReputerNoncesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUnfulfilledReputerNoncesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUnfulfilledReputerNoncesRequest proto.InternalMessageInfo

func (m *QueryUnfulfilledReputerNoncesRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type QueryUnfulfilledReputerNoncesResponse struct {
	Nonces *ReputerRequestNonces `protobuf:"bytes,1,opt,name=nonces,proto3" json:"nonces,omitempty"`
}

func (m *QueryUnfulfilledReputerNoncesResponse) Reset()         { *m = QueryUnfulfilledReputerNoncesResponse{} }
func (m *QueryUnfulfilledReputerNoncesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUnfulfilledReputerNoncesResponse) ProtoMessage()    {}
func (*QueryUnfulfilledReputerNoncesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{43}
}
func (m *QueryUnfulfilledReputerNoncesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUnfulfilledReputerNoncesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUnfulfilledReputerNoncesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUnfulfilledReputerNoncesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUnfulfilledReputerNoncesResponse.Merge(m, src)
}
func (m *QueryUnfulfilledReputerNoncesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUnfulfilledReputerNoncesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUnfulfilledReputerNoncesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUnfulfilledReputerNoncesResponse proto.InternalMessageInfo

func (m *QueryUnfulfilledReputerNoncesResponse) GetNonces() *ReputerRequestNonces {
	if m != nil {
		return m.Nonces
	}
	return nil
}

type QueryUnfulfilledWorkerNoncesRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *QueryUnfulfilledWorkerNoncesRequest) Reset()         { *m = QueryUnfulfilledWorkerNoncesRequest{} }
func (m *QueryUnfulfilledWorkerNoncesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUnfulfilledWorkerNoncesRequest) ProtoMessage()    {}
func (*QueryUnfulfilledWorkerNoncesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{44}
}
func (m *QueryUnfulfilledWorkerNoncesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUnfulfilledWorkerNoncesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUnfulfilledWorkerNoncesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUnfulfilledWorkerNoncesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUnfulfilledWorkerNoncesRequest.Merge(m, src)
}
func (m *QueryUnfulfilledWorkerNoncesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUnfulfilledWorkerNoncesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUnfulfilledWorkerNoncesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUnfulfilledWorkerNoncesRequest proto.InternalMessageInfo

func (m *QueryUnfulfilledWorkerNoncesRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type QueryUnfulfilledWorkerNoncesResponse struct {
	Nonces *Nonces `protobuf:"bytes,1,opt,name=nonces,proto3" json:"nonces,omitempty"`
}

func (m *QueryUnfulfilledWorkerNoncesResponse) Reset()         { *m = QueryUnfulfilledWorkerNoncesResponse{} }
func (m *QueryUnfulfilledWorkerNoncesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUnfulfilledWorkerNoncesResponse) ProtoMessage()    {}
func (*QueryUnfulfilledWorkerNoncesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{45}
}
func (m *QueryUnfulfilledWorkerNoncesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUnfulfilledWorkerNoncesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUnfulfilledWorkerNoncesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUnfulfilledWorkerNoncesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUnfulfilledWorkerNoncesResponse.Merge(m, src)
}
func (m *QueryUnfulfilledWorkerNoncesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUnfulfilledWorkerNoncesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUnfulfilledWorkerNoncesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUnfulfilledWorkerNoncesResponse proto.InternalMessageInfo

func (m *QueryUnfulfilledWorkerNoncesResponse) GetNonces() *Nonces {
	if m != nil {
		return m.Nonces
	}
	return nil
}

type QueryInfererNetworkRegretRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	ActorId string `protobuf:"bytes,2,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
}

func (m *QueryInfererNetworkRegretRequest) Reset()         { *m = QueryInfererNetworkRegretRequest{} }
func (m *QueryInfererNetworkRegretRequest) String() string { return proto.CompactTextString(m) }
func (*QueryInfererNetworkRegretRequest) ProtoMessage()    {}
func (*QueryInfererNetworkRegretRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{46}
}
func (m *QueryInfererNetworkRegretRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInfererNetworkRegretRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInfererNetworkRegretRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInfererNetworkRegretRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInfererNetworkRegretRequest.Merge(m, src)
}
func (m *QueryInfererNetworkRegretRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryInfererNetworkRegretRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInfererNetworkRegretRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInfererNetworkRegretRequest proto.InternalMessageInfo

func (m *QueryInfererNetworkRegretRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *QueryInfererNetworkRegretRequest) GetActorId() string {
	if m != nil {
		return m.ActorId
	}
	return ""
}

type QueryInfererNetworkRegretResponse struct {
	Regret *TimestampedValue `protobuf:"bytes,1,opt,name=regret,proto3" json:"regret,omitempty"`
}

func (m *QueryInfererNetworkRegretResponse) Reset()         { *m = QueryInfererNetworkRegretResponse{} }
func (m *QueryInfererNetworkRegretResponse) String() string { return proto.CompactTextString(m) }
func (*QueryInfererNetworkRegretResponse) ProtoMessage()    {}
func (*QueryInfererNetworkRegretResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{47}
}
func (m *QueryInfererNetworkRegretResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInfererNetworkRegretResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInfererNetworkRegretResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInfererNetworkRegretResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInfererNetworkRegretResponse.Merge(m, src)
}
func (m *QueryInfererNetworkRegretResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryInfererNetworkRegretResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInfererNetworkRegretResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInfererNetworkRegretResponse proto.InternalMessageInfo

func (m *QueryInfererNetworkRegretResponse) GetRegret() *TimestampedValue {
	if m != nil {
		return m.Regret
	}
	return nil
}

type QueryForecasterNetworkRegretRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Worker  string `protobuf:"bytes,2,opt,name=worker,proto3" json:"worker,omitempty"`
}

func (m *QueryForecasterNetworkRegretRequest) Reset()         { *m = QueryForecasterNetworkRegretRequest{} }
func (m *QueryForecasterNetworkRegretRequest) String() string { return proto.CompactTextString(m) }
func (*QueryForecasterNetworkRegretRequest) ProtoMessage()    {}
func (*QueryForecasterNetworkRegretRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{48}
}
func (m *QueryForecasterNetworkRegretRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryForecasterNetworkRegretRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryForecasterNetworkRegretRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryForecasterNetworkRegretRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryForecasterNetworkRegretRequest.Merge(m, src)
}
func (m *QueryForecasterNetworkRegretRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryForecasterNetworkRegretRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryForecasterNetworkRegretRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryForecasterNetworkRegretRequest proto.InternalMessageInfo

func (m *QueryForecasterNetworkRegretRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *QueryForecasterNetworkRegretRequest) GetWorker() string {
	if m != nil {
		return m.Worker
	}
	return ""
}

type QueryForecasterNetworkRegretResponse struct {
	Regret *TimestampedValue `protobuf:"bytes,1,opt,name=regret,proto3" json:"regret,omitempty"`
}

func (m *QueryForecasterNetworkRegretResponse) Reset()         { *m = QueryForecasterNetworkRegretResponse{} }
func (m *QueryForecasterNetworkRegretResponse) String() string { return proto.CompactTextString(m) }
func (*QueryForecasterNetworkRegretResponse) ProtoMessage()    {}
func (*QueryForecasterNetworkRegretResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{49}
}
func (m *QueryForecasterNetworkRegretResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryForecasterNetworkRegretResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryForecasterNetworkRegretResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryForecasterNetworkRegretResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryForecasterNetworkRegretResponse.Merge(m, src)
}
func (m *QueryForecasterNetworkRegretResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryForecasterNetworkRegretResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryForecasterNetworkRegretResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryForecasterNetworkRegretResponse proto.InternalMessageInfo

func (m *QueryForecasterNetworkRegretResponse) GetRegret() *TimestampedValue {
	if m != nil {
		return m.Regret
	}
	return nil
}

type QueryOneInForecasterNetworkRegretRequest struct {
	TopicId    uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Forecaster string `protobuf:"bytes,2,opt,name=forecaster,proto3" json:"forecaster,omitempty"`
	Inferer    string `protobuf:"bytes,3,opt,name=inferer,proto3" json:"inferer,omitempty"`
}

func (m *QueryOneInForecasterNetworkRegretRequest) Reset() {
	*m = QueryOneInForecasterNetworkRegretRequest{}
}
func (m *QueryOneInForecasterNetworkRegretRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOneInForecasterNetworkRegretRequest) ProtoMessage()    {}
func (*QueryOneInForecasterNetworkRegretRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{50}
}
func (m *QueryOneInForecasterNetworkRegretRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOneInForecasterNetworkRegretRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOneInForecasterNetworkRegretRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOneInForecasterNetworkRegretRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOneInForecasterNetworkRegretRequest.Merge(m, src)
}
func (m *QueryOneInForecasterNetworkRegretRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOneInForecasterNetworkRegretRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOneInForecasterNetworkRegretRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOneInForecasterNetworkRegretRequest proto.InternalMessageInfo

func (m *QueryOneInForecasterNetworkRegretRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *QueryOneInForecasterNetworkRegretRequest) GetForecaster() string {
	if m != nil {
		return m.Forecaster
	}
	return ""
}

func (m *QueryOneInForecasterNetworkRegretRequest) GetInferer() string {
	if m != nil {
		return m.Inferer
	}
	return ""
}

type QueryOneInForecasterNetworkRegretResponse struct {
	Regret *TimestampedValue `protobuf:"bytes,1,opt,name=regret,proto3" json:"regret,omitempty"`
}

func (m *QueryOneInForecasterNetworkRegretResponse) Reset() {
	*m = QueryOneInForecasterNetworkRegretResponse{}
}
func (m *QueryOneInForecasterNetworkRegretResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryOneInForecasterNetworkRegretResponse) ProtoMessage() {}
func (*QueryOneInForecasterNetworkRegretResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{51}
}
func (m *QueryOneInForecasterNetworkRegretResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOneInForecasterNetworkRegretResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOneInForecasterNetworkRegretResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOneInForecasterNetworkRegretResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOneInForecasterNetworkRegretResponse.Merge(m, src)
}
func (m *QueryOneInForecasterNetworkRegretResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOneInForecasterNetworkRegretResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOneInForecasterNetworkRegretResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOneInForecasterNetworkRegretResponse proto.InternalMessageInfo

func (m *QueryOneInForecasterNetworkRegretResponse) GetRegret() *TimestampedValue {
	if m != nil {
		return m.Regret
	}
	return nil
}

type QueryOneInForecasterSelfNetworkRegretRequest struct {
	TopicId    uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Forecaster string `protobuf:"bytes,2,opt,name=forecaster,proto3" json:"forecaster,omitempty"`
}

func (m *QueryOneInForecasterSelfNetworkRegretRequest) Reset() {
	*m = QueryOneInForecasterSelfNetworkRegretRequest{}
}
func (m *QueryOneInForecasterSelfNetworkRegretRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryOneInForecasterSelfNetworkRegretRequest) ProtoMessage() {}
func (*QueryOneInForecasterSelfNetworkRegretRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{52}
}
func (m *QueryOneInForecasterSelfNetworkRegretRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOneInForecasterSelfNetworkRegretRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOneInForecasterSelfNetworkRegretRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOneInForecasterSelfNetworkRegretRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOneInForecasterSelfNetworkRegretRequest.Merge(m, src)
}
func (m *QueryOneInForecasterSelfNetworkRegretRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOneInForecasterSelfNetworkRegretRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOneInForecasterSelfNetworkRegretRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOneInForecasterSelfNetworkRegretRequest proto.InternalMessageInfo

func (m *QueryOneInForecasterSelfNetworkRegretRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *QueryOneInForecasterSelfNetworkRegretRequest) GetForecaster() string {
	if m != nil {
		return m.Forecaster
	}
	return ""
}

type QueryOneInForecasterSelfNetworkRegretResponse struct {
	Regret *TimestampedValue `protobuf:"bytes,1,opt,name=regret,proto3" json:"regret,omitempty"`
}

func (m *QueryOneInForecasterSelfNetworkRegretResponse) Reset() {
	*m = QueryOneInForecasterSelfNetworkRegretResponse{}
}
func (m *QueryOneInForecasterSelfNetworkRegretResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryOneInForecasterSelfNetworkRegretResponse) ProtoMessage() {}
func (*QueryOneInForecasterSelfNetworkRegretResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{53}
}
func (m *QueryOneInForecasterSelfNetworkRegretResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOneInForecasterSelfNetworkRegretResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOneInForecasterSelfNetworkRegretResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOneInForecasterSelfNetworkRegretResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOneInForecasterSelfNetworkRegretResponse.Merge(m, src)
}
func (m *QueryOneInForecasterSelfNetworkRegretResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOneInForecasterSelfNetworkRegretResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOneInForecasterSelfNetworkRegretResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOneInForecasterSelfNetworkRegretResponse proto.InternalMessageInfo

func (m *QueryOneInForecasterSelfNetworkRegretResponse) GetRegret() *TimestampedValue {
	if m != nil {
		return m.Regret
	}
	return nil
}

type QueryIsReputerNonceUnfulfilledRequest struct {
	TopicId     uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	BlockHeight int64  `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *QueryIsReputerNonceUnfulfilledRequest) Reset()         { *m = QueryIsReputerNonceUnfulfilledRequest{} }
func (m *QueryIsReputerNonceUnfulfilledRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIsReputerNonceUnfulfilledRequest) ProtoMessage()    {}
func (*QueryIsReputerNonceUnfulfilledRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{54}
}
func (m *QueryIsReputerNonceUnfulfilledRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsReputerNonceUnfulfilledRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsReputerNonceUnfulfilledRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsReputerNonceUnfulfilledRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsReputerNonceUnfulfilledRequest.Merge(m, src)
}
func (m *QueryIsReputerNonceUnfulfilledRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsReputerNonceUnfulfilledRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsReputerNonceUnfulfilledRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsReputerNonceUnfulfilledRequest proto.InternalMessageInfo

func (m *QueryIsReputerNonceUnfulfilledRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *QueryIsReputerNonceUnfulfilledRequest) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type QueryIsReputerNonceUnfulfilledResponse struct {
	IsReputerNonceUnfulfilled bool `protobuf:"varint,1,opt,name=is_reputer_nonce_unfulfilled,json=isReputerNonceUnfulfilled,proto3" json:"is_reputer_nonce_unfulfilled,omitempty"`
}

func (m *QueryIsReputerNonceUnfulfilledResponse) Reset() {
	*m = QueryIsReputerNonceUnfulfilledResponse{}
}
func (m *QueryIsReputerNonceUnfulfilledResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIsReputerNonceUnfulfilledResponse) ProtoMessage()    {}
func (*QueryIsReputerNonceUnfulfilledResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{55}
}
func (m *QueryIsReputerNonceUnfulfilledResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsReputerNonceUnfulfilledResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsReputerNonceUnfulfilledResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsReputerNonceUnfulfilledResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsReputerNonceUnfulfilledResponse.Merge(m, src)
}
func (m *QueryIsReputerNonceUnfulfilledResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsReputerNonceUnfulfilledResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsReputerNonceUnfulfilledResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsReputerNonceUnfulfilledResponse proto.InternalMessageInfo

func (m *QueryIsReputerNonceUnfulfilledResponse) GetIsReputerNonceUnfulfilled() bool {
	if m != nil {
		return m.IsReputerNonceUnfulfilled
	}
	return false
}

type QueryNetworkInferencesAtBlockResponse struct {
	NetworkInferences *ValueBundle `protobuf:"bytes,1,opt,name=network_inferences,json=networkInferences,proto3" json:"network_inferences,omitempty"`
}

func (m *QueryNetworkInferencesAtBlockResponse) Reset()         { *m = QueryNetworkInferencesAtBlockResponse{} }
func (m *QueryNetworkInferencesAtBlockResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNetworkInferencesAtBlockResponse) ProtoMessage()    {}
func (*QueryNetworkInferencesAtBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{56}
}
func (m *QueryNetworkInferencesAtBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNetworkInferencesAtBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNetworkInferencesAtBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNetworkInferencesAtBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNetworkInferencesAtBlockResponse.Merge(m, src)
}
func (m *QueryNetworkInferencesAtBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNetworkInferencesAtBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNetworkInferencesAtBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNetworkInferencesAtBlockResponse proto.InternalMessageInfo

func (m *QueryNetworkInferencesAtBlockResponse) GetNetworkInferences() *ValueBundle {
	if m != nil {
		return m.NetworkInferences
	}
	return nil
}

type QueryLatestNetworkInferencesResponse struct {
	NetworkInferences                *ValueBundle                                      `protobuf:"bytes,1,opt,name=network_inferences,json=networkInferences,proto3" json:"network_inferences,omitempty"`
	InfererWeights                   []*RegretInformedWeight                           `protobuf:"bytes,2,rep,name=inferer_weights,json=infererWeights,proto3" json:"inferer_weights,omitempty"`
	ForecasterWeights                []*RegretInformedWeight                           `protobuf:"bytes,3,rep,name=forecaster_weights,json=forecasterWeights,proto3" json:"forecaster_weights,omitempty"`
	ForecastImpliedInferences        []*WorkerAttributedValue                          `protobuf:"bytes,4,rep,name=forecastImpliedInferences,proto3" json:"forecastImpliedInferences,omitempty"`
	InferenceBlockHeight             int64                                             `protobuf:"varint,5,opt,name=inference_block_height,json=inferenceBlockHeight,proto3" json:"inference_block_height,omitempty"`
	LossBlockHeight                  int64                                             `protobuf:"varint,6,opt,name=loss_block_height,json=lossBlockHeight,proto3" json:"loss_block_height,omitempty"`
	ConfidenceIntervalRawPercentiles []github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,7,rep,name=confidence_interval_raw_percentiles,json=confidenceIntervalRawPercentiles,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"confidence_interval_raw_percentiles"`
	ConfidenceIntervalValues         []github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,8,rep,name=confidence_interval_values,json=confidenceIntervalValues,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"confidence_interval_values"`
}

func (m *QueryLatestNetworkInferencesResponse) Reset()         { *m = QueryLatestNetworkInferencesResponse{} }
func (m *QueryLatestNetworkInferencesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLatestNetworkInferencesResponse) ProtoMessage()    {}
func (*QueryLatestNetworkInferencesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{57}
}
func (m *QueryLatestNetworkInferencesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestNetworkInferencesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestNetworkInferencesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestNetworkInferencesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestNetworkInferencesResponse.Merge(m, src)
}
func (m *QueryLatestNetworkInferencesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestNetworkInferencesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestNetworkInferencesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestNetworkInferencesResponse proto.InternalMessageInfo

func (m *QueryLatestNetworkInferencesResponse) GetNetworkInferences() *ValueBundle {
	if m != nil {
		return m.NetworkInferences
	}
	return nil
}

func (m *QueryLatestNetworkInferencesResponse) GetInfererWeights() []*RegretInformedWeight {
	if m != nil {
		return m.InfererWeights
	}
	return nil
}

func (m *QueryLatestNetworkInferencesResponse) GetForecasterWeights() []*RegretInformedWeight {
	if m != nil {
		return m.ForecasterWeights
	}
	return nil
}

func (m *QueryLatestNetworkInferencesResponse) GetForecastImpliedInferences() []*WorkerAttributedValue {
	if m != nil {
		return m.ForecastImpliedInferences
	}
	return nil
}

func (m *QueryLatestNetworkInferencesResponse) GetInferenceBlockHeight() int64 {
	if m != nil {
		return m.InferenceBlockHeight
	}
	return 0
}

func (m *QueryLatestNetworkInferencesResponse) GetLossBlockHeight() int64 {
	if m != nil {
		return m.LossBlockHeight
	}
	return 0
}

type QueryIsWorkerRegisteredInTopicIdRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryIsWorkerRegisteredInTopicIdRequest) Reset() {
	*m = QueryIsWorkerRegisteredInTopicIdRequest{}
}
func (m *QueryIsWorkerRegisteredInTopicIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIsWorkerRegisteredInTopicIdRequest) ProtoMessage()    {}
func (*QueryIsWorkerRegisteredInTopicIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{58}
}
func (m *QueryIsWorkerRegisteredInTopicIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsWorkerRegisteredInTopicIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsWorkerRegisteredInTopicIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsWorkerRegisteredInTopicIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsWorkerRegisteredInTopicIdRequest.Merge(m, src)
}
func (m *QueryIsWorkerRegisteredInTopicIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsWorkerRegisteredInTopicIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsWorkerRegisteredInTopicIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsWorkerRegisteredInTopicIdRequest proto.InternalMessageInfo

func (m *QueryIsWorkerRegisteredInTopicIdRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *QueryIsWorkerRegisteredInTopicIdRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryIsWorkerRegisteredInTopicIdResponse struct {
	IsRegistered bool `protobuf:"varint,1,opt,name=is_registered,json=isRegistered,proto3" json:"is_registered,omitempty"`
}

func (m *QueryIsWorkerRegisteredInTopicIdResponse) Reset() {
	*m = QueryIsWorkerRegisteredInTopicIdResponse{}
}
func (m *QueryIsWorkerRegisteredInTopicIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIsWorkerRegisteredInTopicIdResponse) ProtoMessage()    {}
func (*QueryIsWorkerRegisteredInTopicIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{59}
}
func (m *QueryIsWorkerRegisteredInTopicIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsWorkerRegisteredInTopicIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsWorkerRegisteredInTopicIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsWorkerRegisteredInTopicIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsWorkerRegisteredInTopicIdResponse.Merge(m, src)
}
func (m *QueryIsWorkerRegisteredInTopicIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsWorkerRegisteredInTopicIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsWorkerRegisteredInTopicIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsWorkerRegisteredInTopicIdResponse proto.InternalMessageInfo

func (m *QueryIsWorkerRegisteredInTopicIdResponse) GetIsRegistered() bool {
	if m != nil {
		return m.IsRegistered
	}
	return false
}

type QueryIsReputerRegisteredInTopicIdRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryIsReputerRegisteredInTopicIdRequest) Reset() {
	*m = QueryIsReputerRegisteredInTopicIdRequest{}
}
func (m *QueryIsReputerRegisteredInTopicIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIsReputerRegisteredInTopicIdRequest) ProtoMessage()    {}
func (*QueryIsReputerRegisteredInTopicIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{60}
}
func (m *QueryIsReputerRegisteredInTopicIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsReputerRegisteredInTopicIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsReputerRegisteredInTopicIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsReputerRegisteredInTopicIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsReputerRegisteredInTopicIdRequest.Merge(m, src)
}
func (m *QueryIsReputerRegisteredInTopicIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsReputerRegisteredInTopicIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsReputerRegisteredInTopicIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsReputerRegisteredInTopicIdRequest proto.InternalMessageInfo

func (m *QueryIsReputerRegisteredInTopicIdRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *QueryIsReputerRegisteredInTopicIdRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryIsReputerRegisteredInTopicIdResponse struct {
	IsRegistered bool `protobuf:"varint,1,opt,name=is_registered,json=isRegistered,proto3" json:"is_registered,omitempty"`
}

func (m *QueryIsReputerRegisteredInTopicIdResponse) Reset() {
	*m = QueryIsReputerRegisteredInTopicIdResponse{}
}
func (m *QueryIsReputerRegisteredInTopicIdResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryIsReputerRegisteredInTopicIdResponse) ProtoMessage() {}
func (*QueryIsReputerRegisteredInTopicIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{61}
}
func (m *QueryIsReputerRegisteredInTopicIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsReputerRegisteredInTopicIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsReputerRegisteredInTopicIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsReputerRegisteredInTopicIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsReputerRegisteredInTopicIdResponse.Merge(m, src)
}
func (m *QueryIsReputerRegisteredInTopicIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsReputerRegisteredInTopicIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsReputerRegisteredInTopicIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsReputerRegisteredInTopicIdResponse proto.InternalMessageInfo

func (m *QueryIsReputerRegisteredInTopicIdResponse) GetIsRegistered() bool {
	if m != nil {
		return m.IsRegistered
	}
	return false
}

type QueryIsWhitelistAdminRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryIsWhitelistAdminRequest) Reset()         { *m = QueryIsWhitelistAdminRequest{} }
func (m *QueryIsWhitelistAdminRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIsWhitelistAdminRequest) ProtoMessage()    {}
func (*QueryIsWhitelistAdminRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{62}
}
func (m *QueryIsWhitelistAdminRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsWhitelistAdminRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsWhitelistAdminRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsWhitelistAdminRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsWhitelistAdminRequest.Merge(m, src)
}
func (m *QueryIsWhitelistAdminRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsWhitelistAdminRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsWhitelistAdminRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsWhitelistAdminRequest proto.InternalMessageInfo

func (m *QueryIsWhitelistAdminRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryIsWhitelistAdminResponse struct {
	IsAdmin bool `protobuf:"varint,1,opt,name=is_admin,json=isAdmin,proto3" json:"is_admin,omitempty"`
}

func (m *QueryIsWhitelistAdminResponse) Reset()         { *m = QueryIsWhitelistAdminResponse{} }
func (m *QueryIsWhitelistAdminResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIsWhitelistAdminResponse) ProtoMessage()    {}
func (*QueryIsWhitelistAdminResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{63}
}
func (m *QueryIsWhitelistAdminResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsWhitelistAdminResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsWhitelistAdminResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsWhitelistAdminResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsWhitelistAdminResponse.Merge(m, src)
}
func (m *QueryIsWhitelistAdminResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsWhitelistAdminResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsWhitelistAdminResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsWhitelistAdminResponse proto.InternalMessageInfo

func (m *QueryIsWhitelistAdminResponse) GetIsAdmin() bool {
	if m != nil {
		return m.IsAdmin
	}
	return false
}

type QueryStakeRemovalsUpUntilBlockRequest struct {
	BlockHeight int64 `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *QueryStakeRemovalsUpUntilBlockRequest) Reset()         { *m = QueryStakeRemovalsUpUntilBlockRequest{} }
func (m *QueryStakeRemovalsUpUntilBlockRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStakeRemovalsUpUntilBlockRequest) ProtoMessage()    {}
func (*QueryStakeRemovalsUpUntilBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{64}
}
func (m *QueryStakeRemovalsUpUntilBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakeRemovalsUpUntilBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakeRemovalsUpUntilBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakeRemovalsUpUntilBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakeRemovalsUpUntilBlockRequest.Merge(m, src)
}
func (m *QueryStakeRemovalsUpUntilBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakeRemovalsUpUntilBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakeRemovalsUpUntilBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakeRemovalsUpUntilBlockRequest proto.InternalMessageInfo

func (m *QueryStakeRemovalsUpUntilBlockRequest) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type QueryStakeRemovalsUpUntilBlockResponse struct {
	Removals []*StakeRemovalInfo `protobuf:"bytes,1,rep,name=removals,proto3" json:"removals,omitempty"`
}

func (m *QueryStakeRemovalsUpUntilBlockResponse) Reset() {
	*m = QueryStakeRemovalsUpUntilBlockResponse{}
}
func (m *QueryStakeRemovalsUpUntilBlockResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStakeRemovalsUpUntilBlockResponse) ProtoMessage()    {}
func (*QueryStakeRemovalsUpUntilBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{65}
}
func (m *QueryStakeRemovalsUpUntilBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakeRemovalsUpUntilBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakeRemovalsUpUntilBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakeRemovalsUpUntilBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakeRemovalsUpUntilBlockResponse.Merge(m, src)
}
func (m *QueryStakeRemovalsUpUntilBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakeRemovalsUpUntilBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakeRemovalsUpUntilBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakeRemovalsUpUntilBlockResponse proto.InternalMessageInfo

func (m *QueryStakeRemovalsUpUntilBlockResponse) GetRemovals() []*StakeRemovalInfo {
	if m != nil {
		return m.Removals
	}
	return nil
}

type QueryDelegateStakeRemovalsUpUntilBlockRequest struct {
	BlockHeight int64 `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *QueryDelegateStakeRemovalsUpUntilBlockRequest) Reset() {
	*m = QueryDelegateStakeRemovalsUpUntilBlockRequest{}
}
func (m *QueryDelegateStakeRemovalsUpUntilBlockRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryDelegateStakeRemovalsUpUntilBlockRequest) ProtoMessage() {}
func (*QueryDelegateStakeRemovalsUpUntilBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{66}
}
func (m *QueryDelegateStakeRemovalsUpUntilBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegateStakeRemovalsUpUntilBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegateStakeRemovalsUpUntilBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegateStakeRemovalsUpUntilBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegateStakeRemovalsUpUntilBlockRequest.Merge(m, src)
}
func (m *QueryDelegateStakeRemovalsUpUntilBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegateStakeRemovalsUpUntilBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegateStakeRemovalsUpUntilBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegateStakeRemovalsUpUntilBlockRequest proto.InternalMessageInfo

func (m *QueryDelegateStakeRemovalsUpUntilBlockRequest) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type QueryDelegateStakeRemovalsUpUntilBlockResponse struct {
	Removals []*DelegateStakeRemovalInfo `protobuf:"bytes,1,rep,name=removals,proto3" json:"removals,omitempty"`
}

func (m *QueryDelegateStakeRemovalsUpUntilBlockResponse) Reset() {
	*m = QueryDelegateStakeRemovalsUpUntilBlockResponse{}
}
func (m *QueryDelegateStakeRemovalsUpUntilBlockResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryDelegateStakeRemovalsUpUntilBlockResponse) ProtoMessage() {}
func (*QueryDelegateStakeRemovalsUpUntilBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{67}
}
func (m *QueryDelegateStakeRemovalsUpUntilBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegateStakeRemovalsUpUntilBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegateStakeRemovalsUpUntilBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegateStakeRemovalsUpUntilBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegateStakeRemovalsUpUntilBlockResponse.Merge(m, src)
}
func (m *QueryDelegateStakeRemovalsUpUntilBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegateStakeRemovalsUpUntilBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegateStakeRemovalsUpUntilBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegateStakeRemovalsUpUntilBlockResponse proto.InternalMessageInfo

func (m *QueryDelegateStakeRemovalsUpUntilBlockResponse) GetRemovals() []*DelegateStakeRemovalInfo {
	if m != nil {
		return m.Removals
	}
	return nil
}

type QueryStakeRemovalInfoRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Reputer string `protobuf:"bytes,2,opt,name=reputer,proto3" json:"reputer,omitempty"`
}

func (m *QueryStakeRemovalInfoRequest) Reset()         { *m = QueryStakeRemovalInfoRequest{} }
func (m *QueryStakeRemovalInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStakeRemovalInfoRequest) ProtoMessage()    {}
func (*QueryStakeRemovalInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{68}
}
func (m *QueryStakeRemovalInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakeRemovalInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakeRemovalInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakeRemovalInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakeRemovalInfoRequest.Merge(m, src)
}
func (m *QueryStakeRemovalInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakeRemovalInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakeRemovalInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakeRemovalInfoRequest proto.InternalMessageInfo

func (m *QueryStakeRemovalInfoRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *QueryStakeRemovalInfoRequest) GetReputer() string {
	if m != nil {
		return m.Reputer
	}
	return ""
}

type QueryStakeRemovalInfoResponse struct {
	Removal *StakeRemovalInfo `protobuf:"bytes,1,opt,name=removal,proto3" json:"removal,omitempty"`
}

func (m *QueryStakeRemovalInfoResponse) Reset()         { *m = QueryStakeRemovalInfoResponse{} }
func (m *QueryStakeRemovalInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStakeRemovalInfoResponse) ProtoMessage()    {}
func (*QueryStakeRemovalInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{69}
}
func (m *QueryStakeRemovalInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakeRemovalInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakeRemovalInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakeRemovalInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakeRemovalInfoResponse.Merge(m, src)
}
func (m *QueryStakeRemovalInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakeRemovalInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakeRemovalInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakeRemovalInfoResponse proto.InternalMessageInfo

func (m *QueryStakeRemovalInfoResponse) GetRemoval() *StakeRemovalInfo {
	if m != nil {
		return m.Removal
	}
	return nil
}

type QueryDelegateStakeRemovalInfoRequest struct {
	TopicId   uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Delegator string `protobuf:"bytes,2,opt,name=delegator,proto3" json:"delegator,omitempty"`
	Reputer   string `protobuf:"bytes,3,opt,name=reputer,proto3" json:"reputer,omitempty"`
}

func (m *QueryDelegateStakeRemovalInfoRequest) Reset()         { *m = QueryDelegateStakeRemovalInfoRequest{} }
func (m *QueryDelegateStakeRemovalInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDelegateStakeRemovalInfoRequest) ProtoMessage()    {}
func (*QueryDelegateStakeRemovalInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{70}
}
func (m *QueryDelegateStakeRemovalInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegateStakeRemovalInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegateStakeRemovalInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegateStakeRemovalInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegateStakeRemovalInfoRequest.Merge(m, src)
}
func (m *QueryDelegateStakeRemovalInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegateStakeRemovalInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegateStakeRemovalInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegateStakeRemovalInfoRequest proto.InternalMessageInfo

func (m *QueryDelegateStakeRemovalInfoRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *QueryDelegateStakeRemovalInfoRequest) GetDelegator() string {
	if m != nil {
		return m.Delegator
	}
	return ""
}

func (m *QueryDelegateStakeRemovalInfoRequest) GetReputer() string {
	if m != nil {
		return m.Reputer
	}
	return ""
}

type QueryDelegateStakeRemovalInfoResponse struct {
	Removal *DelegateStakeRemovalInfo `protobuf:"bytes,1,opt,name=removal,proto3" json:"removal,omitempty"`
}

func (m *QueryDelegateStakeRemovalInfoResponse) Reset()         { *m = QueryDelegateStakeRemovalInfoResponse{} }
func (m *QueryDelegateStakeRemovalInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDelegateStakeRemovalInfoResponse) ProtoMessage()    {}
func (*QueryDelegateStakeRemovalInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{71}
}
func (m *QueryDelegateStakeRemovalInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegateStakeRemovalInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegateStakeRemovalInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegateStakeRemovalInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegateStakeRemovalInfoResponse.Merge(m, src)
}
func (m *QueryDelegateStakeRemovalInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegateStakeRemovalInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegateStakeRemovalInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegateStakeRemovalInfoResponse proto.InternalMessageInfo

func (m *QueryDelegateStakeRemovalInfoResponse) GetRemoval() *DelegateStakeRemovalInfo {
	if m != nil {
		return m.Removal
	}
	return nil
}

type QueryTopicLastCommitRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *QueryTopicLastCommitRequest) Reset()         { *m = QueryTopicLastCommitRequest{} }
func (m *QueryTopicLastCommitRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTopicLastCommitRequest) ProtoMessage()    {}
func (*QueryTopicLastCommitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{72}
}
func (m *QueryTopicLastCommitRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTopicLastCommitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTopicLastCommitRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTopicLastCommitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTopicLastCommitRequest.Merge(m, src)
}
func (m *QueryTopicLastCommitRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTopicLastCommitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTopicLastCommitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTopicLastCommitRequest proto.InternalMessageInfo

func (m *QueryTopicLastCommitRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type QueryTopicLastCommitResponse struct {
	LastCommit *TimestampedActorNonce `protobuf:"bytes,1,opt,name=last_commit,json=lastCommit,proto3" json:"last_commit,omitempty"`
}

func (m *QueryTopicLastCommitResponse) Reset()         { *m = QueryTopicLastCommitResponse{} }
func (m *QueryTopicLastCommitResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTopicLastCommitResponse) ProtoMessage()    {}
func (*QueryTopicLastCommitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{73}
}
func (m *QueryTopicLastCommitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTopicLastCommitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTopicLastCommitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTopicLastCommitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTopicLastCommitResponse.Merge(m, src)
}
func (m *QueryTopicLastCommitResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTopicLastCommitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTopicLastCommitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTopicLastCommitResponse proto.InternalMessageInfo

func (m *QueryTopicLastCommitResponse) GetLastCommit() *TimestampedActorNonce {
	if m != nil {
		return m.LastCommit
	}
	return nil
}

type QueryTopicRewardNonceRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *QueryTopicRewardNonceRequest) Reset()         { *m = QueryTopicRewardNonceRequest{} }
func (m *QueryTopicRewardNonceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTopicRewardNonceRequest) ProtoMessage()    {}
func (*QueryTopicRewardNonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{74}
}
func (m *QueryTopicRewardNonceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTopicRewardNonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTopicRewardNonceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTopicRewardNonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTopicRewardNonceRequest.Merge(m, src)
}
func (m *QueryTopicRewardNonceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTopicRewardNonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTopicRewardNonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTopicRewardNonceRequest proto.InternalMessageInfo

func (m *QueryTopicRewardNonceRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type QueryTopicRewardNonceResponse struct {
	Nonce int64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *QueryTopicRewardNonceResponse) Reset()         { *m = QueryTopicRewardNonceResponse{} }
func (m *QueryTopicRewardNonceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTopicRewardNonceResponse) ProtoMessage()    {}
func (*QueryTopicRewardNonceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{75}
}
func (m *QueryTopicRewardNonceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTopicRewardNonceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTopicRewardNonceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTopicRewardNonceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTopicRewardNonceResponse.Merge(m, src)
}
func (m *QueryTopicRewardNonceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTopicRewardNonceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTopicRewardNonceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTopicRewardNonceResponse proto.InternalMessageInfo

func (m *QueryTopicRewardNonceResponse) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type QueryReputerLossBundlesAtBlockRequest struct {
	TopicId     uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	BlockHeight int64  `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *QueryReputerLossBundlesAtBlockRequest) Reset()         { *m = QueryReputerLossBundlesAtBlockRequest{} }
func (m *QueryReputerLossBundlesAtBlockRequest) String() string { return proto.CompactTextString(m) }
func (*QueryReputerLossBundlesAtBlockRequest) ProtoMessage()    {}
func (*QueryReputerLossBundlesAtBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{76}
}
func (m *QueryReputerLossBundlesAtBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReputerLossBundlesAtBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReputerLossBundlesAtBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReputerLossBundlesAtBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReputerLossBundlesAtBlockRequest.Merge(m, src)
}
func (m *QueryReputerLossBundlesAtBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryReputerLossBundlesAtBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReputerLossBundlesAtBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReputerLossBundlesAtBlockRequest proto.InternalMessageInfo

func (m *QueryReputerLossBundlesAtBlockRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *QueryReputerLossBundlesAtBlockRequest) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type QueryReputerLossBundlesAtBlockResponse struct {
	LossBundles *ReputerValueBundles `protobuf:"bytes,1,opt,name=loss_bundles,json=lossBundles,proto3" json:"loss_bundles,omitempty"`
}

func (m *QueryReputerLossBundlesAtBlockResponse) Reset() {
	*m = QueryReputerLossBundlesAtBlockResponse{}
}
func (m *QueryReputerLossBundlesAtBlockResponse) String() string { return proto.CompactTextString(m) }
func (*QueryReputerLossBundlesAtBlockResponse) ProtoMessage()    {}
func (*QueryReputerLossBundlesAtBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{77}
}
func (m *QueryReputerLossBundlesAtBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReputerLossBundlesAtBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReputerLossBundlesAtBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReputerLossBundlesAtBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReputerLossBundlesAtBlockResponse.Merge(m, src)
}
func (m *QueryReputerLossBundlesAtBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryReputerLossBundlesAtBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReputerLossBundlesAtBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReputerLossBundlesAtBlockResponse proto.InternalMessageInfo

func (m *QueryReputerLossBundlesAtBlockResponse) GetLossBundles() *ReputerValueBundles {
	if m != nil {
		return m.LossBundles
	}
	return nil
}

type QueryStakeReputerAuthorityRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Reputer string `protobuf:"bytes,2,opt,name=reputer,proto3" json:"reputer,omitempty"`
}

func (m *QueryStakeReputerAuthorityRequest) Reset()         { *m = QueryStakeReputerAuthorityRequest{} }
func (m *QueryStakeReputerAuthorityRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStakeReputerAuthorityRequest) ProtoMessage()    {}
func (*QueryStakeReputerAuthorityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{78}
}
func (m *QueryStakeReputerAuthorityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakeReputerAuthorityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakeReputerAuthorityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakeReputerAuthorityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakeReputerAuthorityRequest.Merge(m, src)
}
func (m *QueryStakeReputerAuthorityRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakeReputerAuthorityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakeReputerAuthorityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakeReputerAuthorityRequest proto.InternalMessageInfo

func (m *QueryStakeReputerAuthorityRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *QueryStakeReputerAuthorityRequest) GetReputer() string {
	if m != nil {
		return m.Reputer
	}
	return ""
}

type QueryStakeReputerAuthorityResponse struct {
	Authority cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=authority,proto3,customtype=cosmossdk.io/math.Int" json:"authority"`
}

func (m *QueryStakeReputerAuthorityResponse) Reset()         { *m = QueryStakeReputerAuthorityResponse{} }
func (m *QueryStakeReputerAuthorityResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStakeReputerAuthorityResponse) ProtoMessage()    {}
func (*QueryStakeReputerAuthorityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{79}
}
func (m *QueryStakeReputerAuthorityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakeReputerAuthorityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakeReputerAuthorityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakeReputerAuthorityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakeReputerAuthorityResponse.Merge(m, src)
}
func (m *QueryStakeReputerAuthorityResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakeReputerAuthorityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakeReputerAuthorityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakeReputerAuthorityResponse proto.InternalMessageInfo

type QueryDelegateStakePlacementRequest struct {
	TopicId   uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Delegator string `protobuf:"bytes,2,opt,name=delegator,proto3" json:"delegator,omitempty"`
	Target    string `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
}

func (m *QueryDelegateStakePlacementRequest) Reset()         { *m = QueryDelegateStakePlacementRequest{} }
func (m *QueryDelegateStakePlacementRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDelegateStakePlacementRequest) ProtoMessage()    {}
func (*QueryDelegateStakePlacementRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{80}
}
func (m *QueryDelegateStakePlacementRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegateStakePlacementRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegateStakePlacementRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegateStakePlacementRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegateStakePlacementRequest.Merge(m, src)
}
func (m *QueryDelegateStakePlacementRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegateStakePlacementRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegateStakePlacementRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegateStakePlacementRequest proto.InternalMessageInfo

func (m *QueryDelegateStakePlacementRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *QueryDelegateStakePlacementRequest) GetDelegator() string {
	if m != nil {
		return m.Delegator
	}
	return ""
}

func (m *QueryDelegateStakePlacementRequest) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

type QueryDelegateStakePlacementResponse struct {
	DelegatorInfo *DelegatorInfo `protobuf:"bytes,1,opt,name=delegator_info,json=delegatorInfo,proto3" json:"delegator_info,omitempty"`
}

func (m *QueryDelegateStakePlacementResponse) Reset()         { *m = QueryDelegateStakePlacementResponse{} }
func (m *QueryDelegateStakePlacementResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDelegateStakePlacementResponse) ProtoMessage()    {}
func (*QueryDelegateStakePlacementResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{81}
}
func (m *QueryDelegateStakePlacementResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegateStakePlacementResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegateStakePlacementResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegateStakePlacementResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegateStakePlacementResponse.Merge(m, src)
}
func (m *QueryDelegateStakePlacementResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegateStakePlacementResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegateStakePlacementResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegateStakePlacementResponse proto.InternalMessageInfo

func (m *QueryDelegateStakePlacementResponse) GetDelegatorInfo() *DelegatorInfo {
	if m != nil {
		return m.DelegatorInfo
	}
	return nil
}

type QueryDelegateStakeUponReputerRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Target  string `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
}

func (m *QueryDelegateStakeUponReputerRequest) Reset()         { *m = QueryDelegateStakeUponReputerRequest{} }
func (m *QueryDelegateStakeUponReputerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDelegateStakeUponReputerRequest) ProtoMessage()    {}
func (*QueryDelegateStakeUponReputerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{82}
}
func (m *QueryDelegateStakeUponReputerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegateStakeUponReputerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegateStakeUponReputerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegateStakeUponReputerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegateStakeUponReputerRequest.Merge(m, src)
}
func (m *QueryDelegateStakeUponReputerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegateStakeUponReputerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegateStakeUponReputerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegateStakeUponReputerRequest proto.InternalMessageInfo

func (m *QueryDelegateStakeUponReputerRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *QueryDelegateStakeUponReputerRequest) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

type QueryDelegateStakeUponReputerResponse struct {
	Stake cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=stake,proto3,customtype=cosmossdk.io/math.Int" json:"stake"`
}

func (m *QueryDelegateStakeUponReputerResponse) Reset()         { *m = QueryDelegateStakeUponReputerResponse{} }
func (m *QueryDelegateStakeUponReputerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDelegateStakeUponReputerResponse) ProtoMessage()    {}
func (*QueryDelegateStakeUponReputerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{83}
}
func (m *QueryDelegateStakeUponReputerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegateStakeUponReputerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegateStakeUponReputerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegateStakeUponReputerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegateStakeUponReputerResponse.Merge(m, src)
}
func (m *QueryDelegateStakeUponReputerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegateStakeUponReputerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegateStakeUponReputerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegateStakeUponReputerResponse proto.InternalMessageInfo

type QueryDelegateRewardPerShareRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Reputer string `protobuf:"bytes,2,opt,name=reputer,proto3" json:"reputer,omitempty"`
}

func (m *QueryDelegateRewardPerShareRequest) Reset()         { *m = QueryDelegateRewardPerShareRequest{} }
func (m *QueryDelegateRewardPerShareRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDelegateRewardPerShareRequest) ProtoMessage()    {}
func (*QueryDelegateRewardPerShareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{84}
}
func (m *QueryDelegateRewardPerShareRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegateRewardPerShareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegateRewardPerShareRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegateRewardPerShareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegateRewardPerShareRequest.Merge(m, src)
}
func (m *QueryDelegateRewardPerShareRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegateRewardPerShareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegateRewardPerShareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegateRewardPerShareRequest proto.InternalMessageInfo

func (m *QueryDelegateRewardPerShareRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *QueryDelegateRewardPerShareRequest) GetReputer() string {
	if m != nil {
		return m.Reputer
	}
	return ""
}

type QueryDelegateRewardPerShareResponse struct {
	RewardPerShare github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,1,opt,name=reward_per_share,json=rewardPerShare,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"reward_per_share"`
}

func (m *QueryDelegateRewardPerShareResponse) Reset()         { *m = QueryDelegateRewardPerShareResponse{} }
func (m *QueryDelegateRewardPerShareResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDelegateRewardPerShareResponse) ProtoMessage()    {}
func (*QueryDelegateRewardPerShareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{85}
}
func (m *QueryDelegateRewardPerShareResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegateRewardPerShareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegateRewardPerShareResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegateRewardPerShareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegateRewardPerShareResponse.Merge(m, src)
}
func (m *QueryDelegateRewardPerShareResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegateRewardPerShareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegateRewardPerShareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegateRewardPerShareResponse proto.InternalMessageInfo

type QueryStakeRemovalForReputerAndTopicIdRequest struct {
	Reputer string `protobuf:"bytes,1,opt,name=reputer,proto3" json:"reputer,omitempty"`
	TopicId uint64 `protobuf:"varint,2,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *QueryStakeRemovalForReputerAndTopicIdRequest) Reset() {
	*m = QueryStakeRemovalForReputerAndTopicIdRequest{}
}
func (m *QueryStakeRemovalForReputerAndTopicIdRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryStakeRemovalForReputerAndTopicIdRequest) ProtoMessage() {}
func (*QueryStakeRemovalForReputerAndTopicIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{86}
}
func (m *QueryStakeRemovalForReputerAndTopicIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakeRemovalForReputerAndTopicIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakeRemovalForReputerAndTopicIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakeRemovalForReputerAndTopicIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakeRemovalForReputerAndTopicIdRequest.Merge(m, src)
}
func (m *QueryStakeRemovalForReputerAndTopicIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakeRemovalForReputerAndTopicIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakeRemovalForReputerAndTopicIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakeRemovalForReputerAndTopicIdRequest proto.InternalMessageInfo

func (m *QueryStakeRemovalForReputerAndTopicIdRequest) GetReputer() string {
	if m != nil {
		return m.Reputer
	}
	return ""
}

func (m *QueryStakeRemovalForReputerAndTopicIdRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type QueryStakeRemovalForReputerAndTopicIdResponse struct {
	StakeRemovalInfo *StakeRemovalInfo `protobuf:"bytes,1,opt,name=stake_removal_info,json=stakeRemovalInfo,proto3" json:"stake_removal_info,omitempty"`
}

func (m *QueryStakeRemovalForReputerAndTopicIdResponse) Reset() {
	*m = QueryStakeRemovalForReputerAndTopicIdResponse{}
}
func (m *QueryStakeRemovalForReputerAndTopicIdResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryStakeRemovalForReputerAndTopicIdResponse) ProtoMessage() {}
func (*QueryStakeRemovalForReputerAndTopicIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{87}
}
func (m *QueryStakeRemovalForReputerAndTopicIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakeRemovalForReputerAndTopicIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakeRemovalForReputerAndTopicIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakeRemovalForReputerAndTopicIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakeRemovalForReputerAndTopicIdResponse.Merge(m, src)
}
func (m *QueryStakeRemovalForReputerAndTopicIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakeRemovalForReputerAndTopicIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakeRemovalForReputerAndTopicIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakeRemovalForReputerAndTopicIdResponse proto.InternalMessageInfo

func (m *QueryStakeRemovalForReputerAndTopicIdResponse) GetStakeRemovalInfo() *StakeRemovalInfo {
	if m != nil {
		return m.StakeRemovalInfo
	}
	return nil
}

type QueryDelegateStakeRemovalRequest struct {
	BlockHeight int64  `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	TopicId     uint64 `protobuf:"varint,2,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Delegator   string `protobuf:"bytes,3,opt,name=delegator,proto3" json:"delegator,omitempty"`
	Reputer     string `protobuf:"bytes,4,opt,name=reputer,proto3" json:"reputer,omitempty"`
}

func (m *QueryDelegateStakeRemovalRequest) Reset()         { *m = QueryDelegateStakeRemovalRequest{} }
func (m *QueryDelegateStakeRemovalRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDelegateStakeRemovalRequest) ProtoMessage()    {}
func (*QueryDelegateStakeRemovalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{88}
}
func (m *QueryDelegateStakeRemovalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegateStakeRemovalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegateStakeRemovalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegateStakeRemovalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegateStakeRemovalRequest.Merge(m, src)
}
func (m *QueryDelegateStakeRemovalRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegateStakeRemovalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegateStakeRemovalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegateStakeRemovalRequest proto.InternalMessageInfo

func (m *QueryDelegateStakeRemovalRequest) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *QueryDelegateStakeRemovalRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *QueryDelegateStakeRemovalRequest) GetDelegator() string {
	if m != nil {
		return m.Delegator
	}
	return ""
}

func (m *QueryDelegateStakeRemovalRequest) GetReputer() string {
	if m != nil {
		return m.Reputer
	}
	return ""
}

type QueryDelegateStakeRemovalResponse struct {
	StakeRemovalInfo *DelegateStakeRemovalInfo `protobuf:"bytes,1,opt,name=stake_removal_info,json=stakeRemovalInfo,proto3" json:"stake_removal_info,omitempty"`
}

func (m *QueryDelegateStakeRemovalResponse) Reset()         { *m = QueryDelegateStakeRemovalResponse{} }
func (m *QueryDelegateStakeRemovalResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDelegateStakeRemovalResponse) ProtoMessage()    {}
func (*QueryDelegateStakeRemovalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{89}
}
func (m *QueryDelegateStakeRemovalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegateStakeRemovalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegateStakeRemovalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegateStakeRemovalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegateStakeRemovalResponse.Merge(m, src)
}
func (m *QueryDelegateStakeRemovalResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegateStakeRemovalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegateStakeRemovalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegateStakeRemovalResponse proto.InternalMessageInfo

func (m *QueryDelegateStakeRemovalResponse) GetStakeRemovalInfo() *DelegateStakeRemovalInfo {
	if m != nil {
		return m.StakeRemovalInfo
	}
	return nil
}

type QueryPreviousTopicWeightRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *QueryPreviousTopicWeightRequest) Reset()         { *m = QueryPreviousTopicWeightRequest{} }
func (m *QueryPreviousTopicWeightRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPreviousTopicWeightRequest) ProtoMessage()    {}
func (*QueryPreviousTopicWeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{90}
}
func (m *QueryPreviousTopicWeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPreviousTopicWeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPreviousTopicWeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPreviousTopicWeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPreviousTopicWeightRequest.Merge(m, src)
}
func (m *QueryPreviousTopicWeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPreviousTopicWeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPreviousTopicWeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPreviousTopicWeightRequest proto.InternalMessageInfo

func (m *QueryPreviousTopicWeightRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type QueryPreviousTopicWeightResponse struct {
	Weight   github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,1,opt,name=weight,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"weight"`
	NotFound bool                                            `protobuf:"varint,2,opt,name=not_found,json=notFound,proto3" json:"not_found,omitempty"`
}

func (m *QueryPreviousTopicWeightResponse) Reset()         { *m = QueryPreviousTopicWeightResponse{} }
func (m *QueryPreviousTopicWeightResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPreviousTopicWeightResponse) ProtoMessage()    {}
func (*QueryPreviousTopicWeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{91}
}
func (m *QueryPreviousTopicWeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPreviousTopicWeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPreviousTopicWeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPreviousTopicWeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPreviousTopicWeightResponse.Merge(m, src)
}
func (m *QueryPreviousTopicWeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPreviousTopicWeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPreviousTopicWeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPreviousTopicWeightResponse proto.InternalMessageInfo

func (m *QueryPreviousTopicWeightResponse) GetNotFound() bool {
	if m != nil {
		return m.NotFound
	}
	return false
}

type QueryTopicExistsRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *QueryTopicExistsRequest) Reset()         { *m = QueryTopicExistsRequest{} }
func (m *QueryTopicExistsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTopicExistsRequest) ProtoMessage()    {}
func (*QueryTopicExistsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{92}
}
func (m *QueryTopicExistsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTopicExistsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTopicExistsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTopicExistsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTopicExistsRequest.Merge(m, src)
}
func (m *QueryTopicExistsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTopicExistsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTopicExistsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTopicExistsRequest proto.InternalMessageInfo

func (m *QueryTopicExistsRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type QueryTopicExistsResponse struct {
	Exists bool `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (m *QueryTopicExistsResponse) Reset()         { *m = QueryTopicExistsResponse{} }
func (m *QueryTopicExistsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTopicExistsResponse) ProtoMessage()    {}
func (*QueryTopicExistsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{93}
}
func (m *QueryTopicExistsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTopicExistsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTopicExistsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTopicExistsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTopicExistsResponse.Merge(m, src)
}
func (m *QueryTopicExistsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTopicExistsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTopicExistsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTopicExistsResponse proto.InternalMessageInfo

func (m *QueryTopicExistsResponse) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

type QueryIsTopicActiveRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *QueryIsTopicActiveRequest) Reset()         { *m = QueryIsTopicActiveRequest{} }
func (m *QueryIsTopicActiveRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIsTopicActiveRequest) ProtoMessage()    {}
func (*QueryIsTopicActiveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{94}
}
func (m *QueryIsTopicActiveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsTopicActiveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsTopicActiveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsTopicActiveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsTopicActiveRequest.Merge(m, src)
}
func (m *QueryIsTopicActiveRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsTopicActiveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsTopicActiveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsTopicActiveRequest proto.InternalMessageInfo

func (m *QueryIsTopicActiveRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type QueryIsTopicActiveResponse struct {
	IsActive bool `protobuf:"varint,1,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (m *QueryIsTopicActiveResponse) Reset()         { *m = QueryIsTopicActiveResponse{} }
func (m *QueryIsTopicActiveResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIsTopicActiveResponse) ProtoMessage()    {}
func (*QueryIsTopicActiveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{95}
}
func (m *QueryIsTopicActiveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsTopicActiveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsTopicActiveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsTopicActiveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsTopicActiveResponse.Merge(m, src)
}
func (m *QueryIsTopicActiveResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsTopicActiveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsTopicActiveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsTopicActiveResponse proto.InternalMessageInfo

func (m *QueryIsTopicActiveResponse) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

type QueryTopicFeeRevenueRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *QueryTopicFeeRevenueRequest) Reset()         { *m = QueryTopicFeeRevenueRequest{} }
func (m *QueryTopicFeeRevenueRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTopicFeeRevenueRequest) ProtoMessage()    {}
func (*QueryTopicFeeRevenueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{96}
}
func (m *QueryTopicFeeRevenueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTopicFeeRevenueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTopicFeeRevenueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTopicFeeRevenueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTopicFeeRevenueRequest.Merge(m, src)
}
func (m *QueryTopicFeeRevenueRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTopicFeeRevenueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTopicFeeRevenueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTopicFeeRevenueRequest proto.InternalMessageInfo

func (m *QueryTopicFeeRevenueRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type QueryTopicFeeRevenueResponse struct {
	FeeRevenue cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=fee_revenue,json=feeRevenue,proto3,customtype=cosmossdk.io/math.Int" json:"fee_revenue"`
}

func (m *QueryTopicFeeRevenueResponse) Reset()         { *m = QueryTopicFeeRevenueResponse{} }
func (m *QueryTopicFeeRevenueResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTopicFeeRevenueResponse) ProtoMessage()    {}
func (*QueryTopicFeeRevenueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{97}
}
func (m *QueryTopicFeeRevenueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTopicFeeRevenueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTopicFeeRevenueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTopicFeeRevenueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTopicFeeRevenueResponse.Merge(m, src)
}
func (m *QueryTopicFeeRevenueResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTopicFeeRevenueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTopicFeeRevenueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTopicFeeRevenueResponse proto.InternalMessageInfo

type QueryRewardableTopicsRequest struct {
}

func (m *QueryRewardableTopicsRequest) Reset()         { *m = QueryRewardableTopicsRequest{} }
func (m *QueryRewardableTopicsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRewardableTopicsRequest) ProtoMessage()    {}
func (*QueryRewardableTopicsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{98}
}
func (m *QueryRewardableTopicsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardableTopicsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardableTopicsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardableTopicsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardableTopicsRequest.Merge(m, src)
}
func (m *QueryRewardableTopicsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardableTopicsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardableTopicsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardableTopicsRequest proto.InternalMessageInfo

type QueryRewardableTopicsResponse struct {
	RewardableTopicIds []uint64 `protobuf:"varint,1,rep,packed,name=rewardable_topic_ids,json=rewardableTopicIds,proto3" json:"rewardable_topic_ids,omitempty"`
}

func (m *QueryRewardableTopicsResponse) Reset()         { *m = QueryRewardableTopicsResponse{} }
func (m *QueryRewardableTopicsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRewardableTopicsResponse) ProtoMessage()    {}
func (*QueryRewardableTopicsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{99}
}
func (m *QueryRewardableTopicsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardableTopicsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardableTopicsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardableTopicsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardableTopicsResponse.Merge(m, src)
}
func (m *QueryRewardableTopicsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardableTopicsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardableTopicsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardableTopicsResponse proto.InternalMessageInfo

func (m *QueryRewardableTopicsResponse) GetRewardableTopicIds() []uint64 {
	if m != nil {
		return m.RewardableTopicIds
	}
	return nil
}

type QueryLatestInfererScoreRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Inferer string `protobuf:"bytes,2,opt,name=inferer,proto3" json:"inferer,omitempty"`
}

func (m *QueryLatestInfererScoreRequest) Reset()         { *m = QueryLatestInfererScoreRequest{} }
func (m *QueryLatestInfererScoreRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLatestInfererScoreRequest) ProtoMessage()    {}
func (*QueryLatestInfererScoreRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{100}
}
func (m *QueryLatestInfererScoreRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestInfererScoreRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestInfererScoreRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestInfererScoreRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestInfererScoreRequest.Merge(m, src)
}
func (m *QueryLatestInfererScoreRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestInfererScoreRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestInfererScoreRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestInfererScoreRequest proto.InternalMessageInfo

func (m *QueryLatestInfererScoreRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *QueryLatestInfererScoreRequest) GetInferer() string {
	if m != nil {
		return m.Inferer
	}
	return ""
}

type QueryLatestInfererScoreResponse struct {
	Score *Score `protobuf:"bytes,1,opt,name=score,proto3" json:"score,omitempty"`
}

func (m *QueryLatestInfererScoreResponse) Reset()         { *m = QueryLatestInfererScoreResponse{} }
func (m *QueryLatestInfererScoreResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLatestInfererScoreResponse) ProtoMessage()    {}
func (*QueryLatestInfererScoreResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{101}
}
func (m *QueryLatestInfererScoreResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestInfererScoreResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestInfererScoreResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestInfererScoreResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestInfererScoreResponse.Merge(m, src)
}
func (m *QueryLatestInfererScoreResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestInfererScoreResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestInfererScoreResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestInfererScoreResponse proto.InternalMessageInfo

func (m *QueryLatestInfererScoreResponse) GetScore() *Score {
	if m != nil {
		return m.Score
	}
	return nil
}

type QueryLatestForecasterScoreRequest struct {
	TopicId    uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Forecaster string `protobuf:"bytes,2,opt,name=forecaster,proto3" json:"forecaster,omitempty"`
}

func (m *QueryLatestForecasterScoreRequest) Reset()         { *m = QueryLatestForecasterScoreRequest{} }
func (m *QueryLatestForecasterScoreRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLatestForecasterScoreRequest) ProtoMessage()    {}
func (*QueryLatestForecasterScoreRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{102}
}
func (m *QueryLatestForecasterScoreRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestForecasterScoreRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestForecasterScoreRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestForecasterScoreRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestForecasterScoreRequest.Merge(m, src)
}
func (m *QueryLatestForecasterScoreRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestForecasterScoreRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestForecasterScoreRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestForecasterScoreRequest proto.InternalMessageInfo

func (m *QueryLatestForecasterScoreRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *QueryLatestForecasterScoreRequest) GetForecaster() string {
	if m != nil {
		return m.Forecaster
	}
	return ""
}

type QueryLatestForecasterScoreResponse struct {
	Score *Score `protobuf:"bytes,1,opt,name=score,proto3" json:"score,omitempty"`
}

func (m *QueryLatestForecasterScoreResponse) Reset()         { *m = QueryLatestForecasterScoreResponse{} }
func (m *QueryLatestForecasterScoreResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLatestForecasterScoreResponse) ProtoMessage()    {}
func (*QueryLatestForecasterScoreResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{103}
}
func (m *QueryLatestForecasterScoreResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestForecasterScoreResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestForecasterScoreResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestForecasterScoreResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestForecasterScoreResponse.Merge(m, src)
}
func (m *QueryLatestForecasterScoreResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestForecasterScoreResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestForecasterScoreResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestForecasterScoreResponse proto.InternalMessageInfo

func (m *QueryLatestForecasterScoreResponse) GetScore() *Score {
	if m != nil {
		return m.Score
	}
	return nil
}

type QueryLatestReputerScoreRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Reputer string `protobuf:"bytes,2,opt,name=reputer,proto3" json:"reputer,omitempty"`
}

func (m *QueryLatestReputerScoreRequest) Reset()         { *m = QueryLatestReputerScoreRequest{} }
func (m *QueryLatestReputerScoreRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLatestReputerScoreRequest) ProtoMessage()    {}
func (*QueryLatestReputerScoreRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{104}
}
func (m *QueryLatestReputerScoreRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestReputerScoreRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestReputerScoreRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestReputerScoreRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestReputerScoreRequest.Merge(m, src)
}
func (m *QueryLatestReputerScoreRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestReputerScoreRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestReputerScoreRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestReputerScoreRequest proto.InternalMessageInfo

func (m *QueryLatestReputerScoreRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *QueryLatestReputerScoreRequest) GetReputer() string {
	if m != nil {
		return m.Reputer
	}
	return ""
}

type QueryLatestReputerScoreResponse struct {
	Score *Score `protobuf:"bytes,1,opt,name=score,proto3" json:"score,omitempty"`
}

func (m *QueryLatestReputerScoreResponse) Reset()         { *m = QueryLatestReputerScoreResponse{} }
func (m *QueryLatestReputerScoreResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLatestReputerScoreResponse) ProtoMessage()    {}
func (*QueryLatestReputerScoreResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{105}
}
func (m *QueryLatestReputerScoreResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestReputerScoreResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestReputerScoreResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestReputerScoreResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestReputerScoreResponse.Merge(m, src)
}
func (m *QueryLatestReputerScoreResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestReputerScoreResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestReputerScoreResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestReputerScoreResponse proto.InternalMessageInfo

func (m *QueryLatestReputerScoreResponse) GetScore() *Score {
	if m != nil {
		return m.Score
	}
	return nil
}

type QueryInferenceScoresUntilBlockRequest struct {
	TopicId     uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	BlockHeight int64  `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *QueryInferenceScoresUntilBlockRequest) Reset()         { *m = QueryInferenceScoresUntilBlockRequest{} }
func (m *QueryInferenceScoresUntilBlockRequest) String() string { return proto.CompactTextString(m) }
func (*QueryInferenceScoresUntilBlockRequest) ProtoMessage()    {}
func (*QueryInferenceScoresUntilBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{106}
}
func (m *QueryInferenceScoresUntilBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInferenceScoresUntilBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInferenceScoresUntilBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInferenceScoresUntilBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInferenceScoresUntilBlockRequest.Merge(m, src)
}
func (m *QueryInferenceScoresUntilBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryInferenceScoresUntilBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInferenceScoresUntilBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInferenceScoresUntilBlockRequest proto.InternalMessageInfo

func (m *QueryInferenceScoresUntilBlockRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *QueryInferenceScoresUntilBlockRequest) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type QueryInferenceScoresUntilBlockResponse struct {
	Scores []*Score `protobuf:"bytes,1,rep,name=scores,proto3" json:"scores,omitempty"`
}

func (m *QueryInferenceScoresUntilBlockResponse) Reset() {
	*m = QueryInferenceScoresUntilBlockResponse{}
}
func (m *QueryInferenceScoresUntilBlockResponse) String() string { return proto.CompactTextString(m) }
func (*QueryInferenceScoresUntilBlockResponse) ProtoMessage()    {}
func (*QueryInferenceScoresUntilBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{107}
}
func (m *QueryInferenceScoresUntilBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInferenceScoresUntilBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInferenceScoresUntilBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInferenceScoresUntilBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInferenceScoresUntilBlockResponse.Merge(m, src)
}
func (m *QueryInferenceScoresUntilBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryInferenceScoresUntilBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInferenceScoresUntilBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInferenceScoresUntilBlockResponse proto.InternalMessageInfo

func (m *QueryInferenceScoresUntilBlockResponse) GetScores() []*Score {
	if m != nil {
		return m.Scores
	}
	return nil
}

type QueryWorkerInferenceScoresAtBlockRequest struct {
	TopicId     uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	BlockHeight int64  `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *QueryWorkerInferenceScoresAtBlockRequest) Reset() {
	*m = QueryWorkerInferenceScoresAtBlockRequest{}
}
func (m *QueryWorkerInferenceScoresAtBlockRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWorkerInferenceScoresAtBlockRequest) ProtoMessage()    {}
func (*QueryWorkerInferenceScoresAtBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{108}
}
func (m *QueryWorkerInferenceScoresAtBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWorkerInferenceScoresAtBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWorkerInferenceScoresAtBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWorkerInferenceScoresAtBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWorkerInferenceScoresAtBlockRequest.Merge(m, src)
}
func (m *QueryWorkerInferenceScoresAtBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWorkerInferenceScoresAtBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWorkerInferenceScoresAtBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWorkerInferenceScoresAtBlockRequest proto.InternalMessageInfo

func (m *QueryWorkerInferenceScoresAtBlockRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *QueryWorkerInferenceScoresAtBlockRequest) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type QueryWorkerInferenceScoresAtBlockResponse struct {
	Scores *Scores `protobuf:"bytes,1,opt,name=scores,proto3" json:"scores,omitempty"`
}

func (m *QueryWorkerInferenceScoresAtBlockResponse) Reset() {
	*m = QueryWorkerInferenceScoresAtBlockResponse{}
}
func (m *QueryWorkerInferenceScoresAtBlockResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryWorkerInferenceScoresAtBlockResponse) ProtoMessage() {}
func (*QueryWorkerInferenceScoresAtBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{109}
}
func (m *QueryWorkerInferenceScoresAtBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWorkerInferenceScoresAtBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWorkerInferenceScoresAtBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWorkerInferenceScoresAtBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWorkerInferenceScoresAtBlockResponse.Merge(m, src)
}
func (m *QueryWorkerInferenceScoresAtBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWorkerInferenceScoresAtBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWorkerInferenceScoresAtBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWorkerInferenceScoresAtBlockResponse proto.InternalMessageInfo

func (m *QueryWorkerInferenceScoresAtBlockResponse) GetScores() *Scores {
	if m != nil {
		return m.Scores
	}
	return nil
}

type QueryForecastScoresUntilBlockRequest struct {
	TopicId     uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	BlockHeight int64  `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *QueryForecastScoresUntilBlockRequest) Reset()         { *m = QueryForecastScoresUntilBlockRequest{} }
func (m *QueryForecastScoresUntilBlockRequest) String() string { return proto.CompactTextString(m) }
func (*QueryForecastScoresUntilBlockRequest) ProtoMessage()    {}
func (*QueryForecastScoresUntilBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{110}
}
func (m *QueryForecastScoresUntilBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryForecastScoresUntilBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryForecastScoresUntilBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryForecastScoresUntilBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryForecastScoresUntilBlockRequest.Merge(m, src)
}
func (m *QueryForecastScoresUntilBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryForecastScoresUntilBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryForecastScoresUntilBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryForecastScoresUntilBlockRequest proto.InternalMessageInfo

func (m *QueryForecastScoresUntilBlockRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *QueryForecastScoresUntilBlockRequest) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type QueryForecastScoresUntilBlockResponse struct {
	Scores []*Score `protobuf:"bytes,1,rep,name=scores,proto3" json:"scores,omitempty"`
}

func (m *QueryForecastScoresUntilBlockResponse) Reset()         { *m = QueryForecastScoresUntilBlockResponse{} }
func (m *QueryForecastScoresUntilBlockResponse) String() string { return proto.CompactTextString(m) }
func (*QueryForecastScoresUntilBlockResponse) ProtoMessage()    {}
func (*QueryForecastScoresUntilBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{111}
}
func (m *QueryForecastScoresUntilBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryForecastScoresUntilBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryForecastScoresUntilBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryForecastScoresUntilBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryForecastScoresUntilBlockResponse.Merge(m, src)
}
func (m *QueryForecastScoresUntilBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryForecastScoresUntilBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryForecastScoresUntilBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryForecastScoresUntilBlockResponse proto.InternalMessageInfo

func (m *QueryForecastScoresUntilBlockResponse) GetScores() []*Score {
	if m != nil {
		return m.Scores
	}
	return nil
}

type QueryWorkerForecastScoresAtBlockRequest struct {
	TopicId     uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	BlockHeight int64  `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *QueryWorkerForecastScoresAtBlockRequest) Reset() {
	*m = QueryWorkerForecastScoresAtBlockRequest{}
}
func (m *QueryWorkerForecastScoresAtBlockRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWorkerForecastScoresAtBlockRequest) ProtoMessage()    {}
func (*QueryWorkerForecastScoresAtBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{112}
}
func (m *QueryWorkerForecastScoresAtBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWorkerForecastScoresAtBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWorkerForecastScoresAtBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWorkerForecastScoresAtBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWorkerForecastScoresAtBlockRequest.Merge(m, src)
}
func (m *QueryWorkerForecastScoresAtBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWorkerForecastScoresAtBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWorkerForecastScoresAtBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWorkerForecastScoresAtBlockRequest proto.InternalMessageInfo

func (m *QueryWorkerForecastScoresAtBlockRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *QueryWorkerForecastScoresAtBlockRequest) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type QueryWorkerForecastScoresAtBlockResponse struct {
	Scores *Scores `protobuf:"bytes,1,opt,name=scores,proto3" json:"scores,omitempty"`
}

func (m *QueryWorkerForecastScoresAtBlockResponse) Reset() {
	*m = QueryWorkerForecastScoresAtBlockResponse{}
}
func (m *QueryWorkerForecastScoresAtBlockResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWorkerForecastScoresAtBlockResponse) ProtoMessage()    {}
func (*QueryWorkerForecastScoresAtBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{113}
}
func (m *QueryWorkerForecastScoresAtBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWorkerForecastScoresAtBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWorkerForecastScoresAtBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWorkerForecastScoresAtBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWorkerForecastScoresAtBlockResponse.Merge(m, src)
}
func (m *QueryWorkerForecastScoresAtBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWorkerForecastScoresAtBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWorkerForecastScoresAtBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWorkerForecastScoresAtBlockResponse proto.InternalMessageInfo

func (m *QueryWorkerForecastScoresAtBlockResponse) GetScores() *Scores {
	if m != nil {
		return m.Scores
	}
	return nil
}

type QueryReputersScoresAtBlockRequest struct {
	TopicId     uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	BlockHeight int64  `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *QueryReputersScoresAtBlockRequest) Reset()         { *m = QueryReputersScoresAtBlockRequest{} }
func (m *QueryReputersScoresAtBlockRequest) String() string { return proto.CompactTextString(m) }
func (*QueryReputersScoresAtBlockRequest) ProtoMessage()    {}
func (*QueryReputersScoresAtBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{114}
}
func (m *QueryReputersScoresAtBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReputersScoresAtBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReputersScoresAtBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReputersScoresAtBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReputersScoresAtBlockRequest.Merge(m, src)
}
func (m *QueryReputersScoresAtBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryReputersScoresAtBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReputersScoresAtBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReputersScoresAtBlockRequest proto.InternalMessageInfo

func (m *QueryReputersScoresAtBlockRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *QueryReputersScoresAtBlockRequest) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type QueryReputersScoresAtBlockResponse struct {
	Scores *Scores `protobuf:"bytes,1,opt,name=scores,proto3" json:"scores,omitempty"`
}

func (m *QueryReputersScoresAtBlockResponse) Reset()         { *m = QueryReputersScoresAtBlockResponse{} }
func (m *QueryReputersScoresAtBlockResponse) String() string { return proto.CompactTextString(m) }
func (*QueryReputersScoresAtBlockResponse) ProtoMessage()    {}
func (*QueryReputersScoresAtBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{115}
}
func (m *QueryReputersScoresAtBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReputersScoresAtBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReputersScoresAtBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReputersScoresAtBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReputersScoresAtBlockResponse.Merge(m, src)
}
func (m *QueryReputersScoresAtBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryReputersScoresAtBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReputersScoresAtBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReputersScoresAtBlockResponse proto.InternalMessageInfo

func (m *QueryReputersScoresAtBlockResponse) GetScores() *Scores {
	if m != nil {
		return m.Scores
	}
	return nil
}

type QueryListeningCoefficientRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Reputer string `protobuf:"bytes,2,opt,name=reputer,proto3" json:"reputer,omitempty"`
}

func (m *QueryListeningCoefficientRequest) Reset()         { *m = QueryListeningCoefficientRequest{} }
func (m *QueryListeningCoefficientRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListeningCoefficientRequest) ProtoMessage()    {}
func (*QueryListeningCoefficientRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{116}
}
func (m *QueryListeningCoefficientRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListeningCoefficientRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListeningCoefficientRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListeningCoefficientRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListeningCoefficientRequest.Merge(m, src)
}
func (m *QueryListeningCoefficientRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListeningCoefficientRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListeningCoefficientRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListeningCoefficientRequest proto.InternalMessageInfo

func (m *QueryListeningCoefficientRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *QueryListeningCoefficientRequest) GetReputer() string {
	if m != nil {
		return m.Reputer
	}
	return ""
}

type QueryListeningCoefficientResponse struct {
	ListeningCoefficient *ListeningCoefficient `protobuf:"bytes,1,opt,name=listening_coefficient,json=listeningCoefficient,proto3" json:"listening_coefficient,omitempty"`
}

func (m *QueryListeningCoefficientResponse) Reset()         { *m = QueryListeningCoefficientResponse{} }
func (m *QueryListeningCoefficientResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListeningCoefficientResponse) ProtoMessage()    {}
func (*QueryListeningCoefficientResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{117}
}
func (m *QueryListeningCoefficientResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListeningCoefficientResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListeningCoefficientResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListeningCoefficientResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListeningCoefficientResponse.Merge(m, src)
}
func (m *QueryListeningCoefficientResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListeningCoefficientResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListeningCoefficientResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListeningCoefficientResponse proto.InternalMessageInfo

func (m *QueryListeningCoefficientResponse) GetListeningCoefficient() *ListeningCoefficient {
	if m != nil {
		return m.ListeningCoefficient
	}
	return nil
}

type QueryPreviousReputerRewardFractionRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Reputer string `protobuf:"bytes,2,opt,name=reputer,proto3" json:"reputer,omitempty"`
}

func (m *QueryPreviousReputerRewardFractionRequest) Reset() {
	*m = QueryPreviousReputerRewardFractionRequest{}
}
func (m *QueryPreviousReputerRewardFractionRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryPreviousReputerRewardFractionRequest) ProtoMessage() {}
func (*QueryPreviousReputerRewardFractionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{118}
}
func (m *QueryPreviousReputerRewardFractionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPreviousReputerRewardFractionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPreviousReputerRewardFractionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPreviousReputerRewardFractionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPreviousReputerRewardFractionRequest.Merge(m, src)
}
func (m *QueryPreviousReputerRewardFractionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPreviousReputerRewardFractionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPreviousReputerRewardFractionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPreviousReputerRewardFractionRequest proto.InternalMessageInfo

func (m *QueryPreviousReputerRewardFractionRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *QueryPreviousReputerRewardFractionRequest) GetReputer() string {
	if m != nil {
		return m.Reputer
	}
	return ""
}

type QueryPreviousReputerRewardFractionResponse struct {
	RewardFraction github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,1,opt,name=reward_fraction,json=rewardFraction,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"reward_fraction"`
	NotFound       bool                                            `protobuf:"varint,2,opt,name=not_found,json=notFound,proto3" json:"not_found,omitempty"`
}

func (m *QueryPreviousReputerRewardFractionResponse) Reset() {
	*m = QueryPreviousReputerRewardFractionResponse{}
}
func (m *QueryPreviousReputerRewardFractionResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryPreviousReputerRewardFractionResponse) ProtoMessage() {}
func (*QueryPreviousReputerRewardFractionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{119}
}
func (m *QueryPreviousReputerRewardFractionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPreviousReputerRewardFractionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPreviousReputerRewardFractionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPreviousReputerRewardFractionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPreviousReputerRewardFractionResponse.Merge(m, src)
}
func (m *QueryPreviousReputerRewardFractionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPreviousReputerRewardFractionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPreviousReputerRewardFractionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPreviousReputerRewardFractionResponse proto.InternalMessageInfo

func (m *QueryPreviousReputerRewardFractionResponse) GetNotFound() bool {
	if m != nil {
		return m.NotFound
	}
	return false
}

type QueryPreviousInferenceRewardFractionRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Worker  string `protobuf:"bytes,2,opt,name=worker,proto3" json:"worker,omitempty"`
}

func (m *QueryPreviousInferenceRewardFractionRequest) Reset() {
	*m = QueryPreviousInferenceRewardFractionRequest{}
}
func (m *QueryPreviousInferenceRewardFractionRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryPreviousInferenceRewardFractionRequest) ProtoMessage() {}
func (*QueryPreviousInferenceRewardFractionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{120}
}
func (m *QueryPreviousInferenceRewardFractionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPreviousInferenceRewardFractionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPreviousInferenceRewardFractionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPreviousInferenceRewardFractionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPreviousInferenceRewardFractionRequest.Merge(m, src)
}
func (m *QueryPreviousInferenceRewardFractionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPreviousInferenceRewardFractionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPreviousInferenceRewardFractionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPreviousInferenceRewardFractionRequest proto.InternalMessageInfo

func (m *QueryPreviousInferenceRewardFractionRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *QueryPreviousInferenceRewardFractionRequest) GetWorker() string {
	if m != nil {
		return m.Worker
	}
	return ""
}

type QueryPreviousInferenceRewardFractionResponse struct {
	RewardFraction github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,1,opt,name=reward_fraction,json=rewardFraction,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"reward_fraction"`
	NotFound       bool                                            `protobuf:"varint,2,opt,name=not_found,json=notFound,proto3" json:"not_found,omitempty"`
}

func (m *QueryPreviousInferenceRewardFractionResponse) Reset() {
	*m = QueryPreviousInferenceRewardFractionResponse{}
}
func (m *QueryPreviousInferenceRewardFractionResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryPreviousInferenceRewardFractionResponse) ProtoMessage() {}
func (*QueryPreviousInferenceRewardFractionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{121}
}
func (m *QueryPreviousInferenceRewardFractionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPreviousInferenceRewardFractionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPreviousInferenceRewardFractionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPreviousInferenceRewardFractionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPreviousInferenceRewardFractionResponse.Merge(m, src)
}
func (m *QueryPreviousInferenceRewardFractionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPreviousInferenceRewardFractionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPreviousInferenceRewardFractionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPreviousInferenceRewardFractionResponse proto.InternalMessageInfo

func (m *QueryPreviousInferenceRewardFractionResponse) GetNotFound() bool {
	if m != nil {
		return m.NotFound
	}
	return false
}

type QueryPreviousForecastRewardFractionRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Worker  string `protobuf:"bytes,2,opt,name=worker,proto3" json:"worker,omitempty"`
}

func (m *QueryPreviousForecastRewardFractionRequest) Reset() {
	*m = QueryPreviousForecastRewardFractionRequest{}
}
func (m *QueryPreviousForecastRewardFractionRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryPreviousForecastRewardFractionRequest) ProtoMessage() {}
func (*QueryPreviousForecastRewardFractionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{122}
}
func (m *QueryPreviousForecastRewardFractionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPreviousForecastRewardFractionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPreviousForecastRewardFractionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPreviousForecastRewardFractionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPreviousForecastRewardFractionRequest.Merge(m, src)
}
func (m *QueryPreviousForecastRewardFractionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPreviousForecastRewardFractionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPreviousForecastRewardFractionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPreviousForecastRewardFractionRequest proto.InternalMessageInfo

func (m *QueryPreviousForecastRewardFractionRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

func (m *QueryPreviousForecastRewardFractionRequest) GetWorker() string {
	if m != nil {
		return m.Worker
	}
	return ""
}

type QueryPreviousForecastRewardFractionResponse struct {
	RewardFraction github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,1,opt,name=reward_fraction,json=rewardFraction,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"reward_fraction"`
	NotFound       bool                                            `protobuf:"varint,2,opt,name=not_found,json=notFound,proto3" json:"not_found,omitempty"`
}

func (m *QueryPreviousForecastRewardFractionResponse) Reset() {
	*m = QueryPreviousForecastRewardFractionResponse{}
}
func (m *QueryPreviousForecastRewardFractionResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryPreviousForecastRewardFractionResponse) ProtoMessage() {}
func (*QueryPreviousForecastRewardFractionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{123}
}
func (m *QueryPreviousForecastRewardFractionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPreviousForecastRewardFractionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPreviousForecastRewardFractionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPreviousForecastRewardFractionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPreviousForecastRewardFractionResponse.Merge(m, src)
}
func (m *QueryPreviousForecastRewardFractionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPreviousForecastRewardFractionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPreviousForecastRewardFractionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPreviousForecastRewardFractionResponse proto.InternalMessageInfo

func (m *QueryPreviousForecastRewardFractionResponse) GetNotFound() bool {
	if m != nil {
		return m.NotFound
	}
	return false
}

type QueryPreviousPercentageRewardToStakedReputersRequest struct {
}

func (m *QueryPreviousPercentageRewardToStakedReputersRequest) Reset() {
	*m = QueryPreviousPercentageRewardToStakedReputersRequest{}
}
func (m *QueryPreviousPercentageRewardToStakedReputersRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryPreviousPercentageRewardToStakedReputersRequest) ProtoMessage() {}
func (*QueryPreviousPercentageRewardToStakedReputersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{124}
}
func (m *QueryPreviousPercentageRewardToStakedReputersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPreviousPercentageRewardToStakedReputersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPreviousPercentageRewardToStakedReputersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPreviousPercentageRewardToStakedReputersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPreviousPercentageRewardToStakedReputersRequest.Merge(m, src)
}
func (m *QueryPreviousPercentageRewardToStakedReputersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPreviousPercentageRewardToStakedReputersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPreviousPercentageRewardToStakedReputersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPreviousPercentageRewardToStakedReputersRequest proto.InternalMessageInfo

type QueryPreviousPercentageRewardToStakedReputersResponse struct {
	PercentageReward github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,1,opt,name=percentage_reward,json=percentageReward,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"percentage_reward"`
}

func (m *QueryPreviousPercentageRewardToStakedReputersResponse) Reset() {
	*m = QueryPreviousPercentageRewardToStakedReputersResponse{}
}
func (m *QueryPreviousPercentageRewardToStakedReputersResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryPreviousPercentageRewardToStakedReputersResponse) ProtoMessage() {}
func (*QueryPreviousPercentageRewardToStakedReputersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{125}
}
func (m *QueryPreviousPercentageRewardToStakedReputersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPreviousPercentageRewardToStakedReputersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPreviousPercentageRewardToStakedReputersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPreviousPercentageRewardToStakedReputersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPreviousPercentageRewardToStakedReputersResponse.Merge(m, src)
}
func (m *QueryPreviousPercentageRewardToStakedReputersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPreviousPercentageRewardToStakedReputersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPreviousPercentageRewardToStakedReputersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPreviousPercentageRewardToStakedReputersResponse proto.InternalMessageInfo

type QueryTotalRewardToDistributeRequest struct {
}

func (m *QueryTotalRewardToDistributeRequest) Reset()         { *m = QueryTotalRewardToDistributeRequest{} }
func (m *QueryTotalRewardToDistributeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTotalRewardToDistributeRequest) ProtoMessage()    {}
func (*QueryTotalRewardToDistributeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{126}
}
func (m *QueryTotalRewardToDistributeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalRewardToDistributeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalRewardToDistributeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalRewardToDistributeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalRewardToDistributeRequest.Merge(m, src)
}
func (m *QueryTotalRewardToDistributeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalRewardToDistributeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalRewardToDistributeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalRewardToDistributeRequest proto.InternalMessageInfo

type QueryTotalRewardToDistributeResponse struct {
	TotalReward github_com_allora_network_allora_chain_math.Dec `protobuf:"bytes,1,opt,name=total_reward,json=totalReward,proto3,customtype=github.com/allora-network/allora-chain/math.Dec" json:"total_reward"`
}

func (m *QueryTotalRewardToDistributeResponse) Reset()         { *m = QueryTotalRewardToDistributeResponse{} }
func (m *QueryTotalRewardToDistributeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalRewardToDistributeResponse) ProtoMessage()    {}
func (*QueryTotalRewardToDistributeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{127}
}
func (m *QueryTotalRewardToDistributeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalRewardToDistributeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalRewardToDistributeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalRewardToDistributeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalRewardToDistributeResponse.Merge(m, src)
}
func (m *QueryTotalRewardToDistributeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalRewardToDistributeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalRewardToDistributeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalRewardToDistributeResponse proto.InternalMessageInfo

type QueryTopicLastWorkerPayloadRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *QueryTopicLastWorkerPayloadRequest) Reset()         { *m = QueryTopicLastWorkerPayloadRequest{} }
func (m *QueryTopicLastWorkerPayloadRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTopicLastWorkerPayloadRequest) ProtoMessage()    {}
func (*QueryTopicLastWorkerPayloadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{128}
}
func (m *QueryTopicLastWorkerPayloadRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTopicLastWorkerPayloadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTopicLastWorkerPayloadRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTopicLastWorkerPayloadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTopicLastWorkerPayloadRequest.Merge(m, src)
}
func (m *QueryTopicLastWorkerPayloadRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTopicLastWorkerPayloadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTopicLastWorkerPayloadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTopicLastWorkerPayloadRequest proto.InternalMessageInfo

func (m *QueryTopicLastWorkerPayloadRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type QueryTopicLastWorkerPayloadResponse struct {
	Payload *TimestampedActorNonce `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *QueryTopicLastWorkerPayloadResponse) Reset()         { *m = QueryTopicLastWorkerPayloadResponse{} }
func (m *QueryTopicLastWorkerPayloadResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTopicLastWorkerPayloadResponse) ProtoMessage()    {}
func (*QueryTopicLastWorkerPayloadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{129}
}
func (m *QueryTopicLastWorkerPayloadResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTopicLastWorkerPayloadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTopicLastWorkerPayloadResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTopicLastWorkerPayloadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTopicLastWorkerPayloadResponse.Merge(m, src)
}
func (m *QueryTopicLastWorkerPayloadResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTopicLastWorkerPayloadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTopicLastWorkerPayloadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTopicLastWorkerPayloadResponse proto.InternalMessageInfo

func (m *QueryTopicLastWorkerPayloadResponse) GetPayload() *TimestampedActorNonce {
	if m != nil {
		return m.Payload
	}
	return nil
}

type QueryTopicLastReputerPayloadRequest struct {
	TopicId uint64 `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *QueryTopicLastReputerPayloadRequest) Reset()         { *m = QueryTopicLastReputerPayloadRequest{} }
func (m *QueryTopicLastReputerPayloadRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTopicLastReputerPayloadRequest) ProtoMessage()    {}
func (*QueryTopicLastReputerPayloadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{130}
}
func (m *QueryTopicLastReputerPayloadRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTopicLastReputerPayloadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTopicLastReputerPayloadRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTopicLastReputerPayloadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTopicLastReputerPayloadRequest.Merge(m, src)
}
func (m *QueryTopicLastReputerPayloadRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTopicLastReputerPayloadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTopicLastReputerPayloadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTopicLastReputerPayloadRequest proto.InternalMessageInfo

func (m *QueryTopicLastReputerPayloadRequest) GetTopicId() uint64 {
	if m != nil {
		return m.TopicId
	}
	return 0
}

type QueryTopicLastReputerPayloadResponse struct {
	Payload *TimestampedActorNonce `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *QueryTopicLastReputerPayloadResponse) Reset()         { *m = QueryTopicLastReputerPayloadResponse{} }
func (m *QueryTopicLastReputerPayloadResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTopicLastReputerPayloadResponse) ProtoMessage()    {}
func (*QueryTopicLastReputerPayloadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c426af2f1e908986, []int{131}
}
func (m *QueryTopicLastReputerPayloadResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTopicLastReputerPayloadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTopicLastReputerPayloadResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTopicLastReputerPayloadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTopicLastReputerPayloadResponse.Merge(m, src)
}
func (m *QueryTopicLastReputerPayloadResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTopicLastReputerPayloadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTopicLastReputerPayloadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTopicLastReputerPayloadResponse proto.InternalMessageInfo

func (m *QueryTopicLastReputerPayloadResponse) GetPayload() *TimestampedActorNonce {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "emissions.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "emissions.v1.QueryParamsResponse")
	proto.RegisterType((*QueryTotalStakeRequest)(nil), "emissions.v1.QueryTotalStakeRequest")
	proto.RegisterType((*QueryTotalStakeResponse)(nil), "emissions.v1.QueryTotalStakeResponse")
	proto.RegisterType((*QueryReputerStakeInTopicRequest)(nil), "emissions.v1.QueryReputerStakeInTopicRequest")
	proto.RegisterType((*QueryReputerStakeInTopicResponse)(nil), "emissions.v1.QueryReputerStakeInTopicResponse")
	proto.RegisterType((*QueryMultiReputerStakeInTopicRequest)(nil), "emissions.v1.QueryMultiReputerStakeInTopicRequest")
	proto.RegisterType((*QueryMultiReputerStakeInTopicResponse)(nil), "emissions.v1.QueryMultiReputerStakeInTopicResponse")
	proto.RegisterType((*QueryStakeFromReputerInTopicInSelfRequest)(nil), "emissions.v1.QueryStakeFromReputerInTopicInSelfRequest")
	proto.RegisterType((*QueryStakeFromReputerInTopicInSelfResponse)(nil), "emissions.v1.QueryStakeFromReputerInTopicInSelfResponse")
	proto.RegisterType((*QueryDelegateStakeInTopicInReputerRequest)(nil), "emissions.v1.QueryDelegateStakeInTopicInReputerRequest")
	proto.RegisterType((*QueryDelegateStakeInTopicInReputerResponse)(nil), "emissions.v1.QueryDelegateStakeInTopicInReputerResponse")
	proto.RegisterType((*QueryStakeFromDelegatorInTopicInReputerRequest)(nil), "emissions.v1.QueryStakeFromDelegatorInTopicInReputerRequest")
	proto.RegisterType((*QueryStakeFromDelegatorInTopicInReputerResponse)(nil), "emissions.v1.QueryStakeFromDelegatorInTopicInReputerResponse")
	proto.RegisterType((*QueryStakeFromDelegatorInTopicRequest)(nil), "emissions.v1.QueryStakeFromDelegatorInTopicRequest")
	proto.RegisterType((*QueryStakeFromDelegatorInTopicResponse)(nil), "emissions.v1.QueryStakeFromDelegatorInTopicResponse")
	proto.RegisterType((*QueryTopicStakeRequest)(nil), "emissions.v1.QueryTopicStakeRequest")
	proto.RegisterType((*QueryTopicStakeResponse)(nil), "emissions.v1.QueryTopicStakeResponse")
	proto.RegisterType((*QueryNetworkLossBundleAtBlockRequest)(nil), "emissions.v1.QueryNetworkLossBundleAtBlockRequest")
	proto.RegisterType((*QueryNetworkLossBundleAtBlockResponse)(nil), "emissions.v1.QueryNetworkLossBundleAtBlockResponse")
	proto.RegisterType((*QueryNextTopicIdRequest)(nil), "emissions.v1.QueryNextTopicIdRequest")
	proto.RegisterType((*QueryNextTopicIdResponse)(nil), "emissions.v1.QueryNextTopicIdResponse")
	proto.RegisterType((*QueryTopicRequest)(nil), "emissions.v1.QueryTopicRequest")
	proto.RegisterType((*QueryTopicResponse)(nil), "emissions.v1.QueryTopicResponse")
	proto.RegisterType((*QueryActiveTopicsRequest)(nil), "emissions.v1.QueryActiveTopicsRequest")
	proto.RegisterType((*QueryActiveTopicsResponse)(nil), "emissions.v1.QueryActiveTopicsResponse")
	proto.RegisterType((*QueryInferencesAtBlockRequest)(nil), "emissions.v1.QueryInferencesAtBlockRequest")
	proto.RegisterType((*QueryInferencesAtBlockResponse)(nil), "emissions.v1.QueryInferencesAtBlockResponse")
	proto.RegisterType((*QueryLatestTopicInferencesRequest)(nil), "emissions.v1.QueryLatestTopicInferencesRequest")
	proto.RegisterType((*QueryLatestTopicInferencesResponse)(nil), "emissions.v1.QueryLatestTopicInferencesResponse")
	proto.RegisterType((*QueryForecastsAtBlockRequest)(nil), "emissions.v1.QueryForecastsAtBlockRequest")
	proto.RegisterType((*QueryForecastsAtBlockResponse)(nil), "emissions.v1.QueryForecastsAtBlockResponse")
	proto.RegisterType((*QueryWorkerLatestInferenceRequest)(nil), "emissions.v1.QueryWorkerLatestInferenceRequest")
	proto.RegisterType((*QueryWorkerLatestInferenceResponse)(nil), "emissions.v1.QueryWorkerLatestInferenceResponse")
	proto.RegisterType((*QueryWorkerNodeInfoRequest)(nil), "emissions.v1.QueryWorkerNodeInfoRequest")
	proto.RegisterType((*QueryWorkerNodeInfoResponse)(nil), "emissions.v1.QueryWorkerNodeInfoResponse")
	proto.RegisterType((*QueryReputerNodeInfoRequest)(nil), "emissions.v1.QueryReputerNodeInfoRequest")
	proto.RegisterType((*QueryReputerNodeInfoResponse)(nil), "emissions.v1.QueryReputerNodeInfoResponse")
	proto.RegisterType((*QueryNetworkInferencesAtBlockRequest)(nil), "emissions.v1.QueryNetworkInferencesAtBlockRequest")
	proto.RegisterType((*QueryLatestNetworkInferencesRequest)(nil), "emissions.v1.QueryLatestNetworkInferencesRequest")
	proto.RegisterType((*QueryIsWorkerNonceUnfulfilledRequest)(nil), "emissions.v1.QueryIsWorkerNonceUnfulfilledRequest")
	proto.RegisterType((*QueryIsWorkerNonceUnfulfilledResponse)(nil), "emissions.v1.QueryIsWorkerNonceUnfulfilledResponse")
	proto.RegisterType((*QueryUnfulfilledReputerNoncesRequest)(nil), "emissions.v1.QueryUnfulfilledReputerNoncesRequest")
	proto.RegisterType((*QueryUnfulfilledReputerNoncesResponse)(nil), "emissions.v1.QueryUnfulfilledReputerNoncesResponse")
	proto.RegisterType((*QueryUnfulfilledWorkerNoncesRequest)(nil), "emissions.v1.QueryUnfulfilledWorkerNoncesRequest")
	proto.RegisterType((*QueryUnfulfilledWorkerNoncesResponse)(nil), "emissions.v1.QueryUnfulfilledWorkerNoncesResponse")
	proto.RegisterType((*QueryInfererNetworkRegretRequest)(nil), "emissions.v1.QueryInfererNetworkRegretRequest")
	proto.RegisterType((*QueryInfererNetworkRegretResponse)(nil), "emissions.v1.QueryInfererNetworkRegretResponse")
	proto.RegisterType((*QueryForecasterNetworkRegretRequest)(nil), "emissions.v1.QueryForecasterNetworkRegretRequest")
	proto.RegisterType((*QueryForecasterNetworkRegretResponse)(nil), "emissions.v1.QueryForecasterNetworkRegretResponse")
	proto.RegisterType((*QueryOneInForecasterNetworkRegretRequest)(nil), "emissions.v1.QueryOneInForecasterNetworkRegretRequest")
	proto.RegisterType((*QueryOneInForecasterNetworkRegretResponse)(nil), "emissions.v1.QueryOneInForecasterNetworkRegretResponse")
	proto.RegisterType((*QueryOneInForecasterSelfNetworkRegretRequest)(nil), "emissions.v1.QueryOneInForecasterSelfNetworkRegretRequest")
	proto.RegisterType((*QueryOneInForecasterSelfNetworkRegretResponse)(nil), "emissions.v1.QueryOneInForecasterSelfNetworkRegretResponse")
	proto.RegisterType((*QueryIsReputerNonceUnfulfilledRequest)(nil), "emissions.v1.QueryIsReputerNonceUnfulfilledRequest")
	proto.RegisterType((*QueryIsReputerNonceUnfulfilledResponse)(nil), "emissions.v1.QueryIsReputerNonceUnfulfilledResponse")
	proto.RegisterType((*QueryNetworkInferencesAtBlockResponse)(nil), "emissions.v1.QueryNetworkInferencesAtBlockResponse")
	proto.RegisterType((*QueryLatestNetworkInferencesResponse)(nil), "emissions.v1.QueryLatestNetworkInferencesResponse")
	proto.RegisterType((*QueryIsWorkerRegisteredInTopicIdRequest)(nil), "emissions.v1.QueryIsWorkerRegisteredInTopicIdRequest")
	proto.RegisterType((*QueryIsWorkerRegisteredInTopicIdResponse)(nil), "emissions.v1.QueryIsWorkerRegisteredInTopicIdResponse")
	proto.RegisterType((*QueryIsReputerRegisteredInTopicIdRequest)(nil), "emissions.v1.QueryIsReputerRegisteredInTopicIdRequest")
	proto.RegisterType((*QueryIsReputerRegisteredInTopicIdResponse)(nil), "emissions.v1.QueryIsReputerRegisteredInTopicIdResponse")
	proto.RegisterType((*QueryIsWhitelistAdminRequest)(nil), "emissions.v1.QueryIsWhitelistAdminRequest")
	proto.RegisterType((*QueryIsWhitelistAdminResponse)(nil), "emissions.v1.QueryIsWhitelistAdminResponse")
	proto.RegisterType((*QueryStakeRemovalsUpUntilBlockRequest)(nil), "emissions.v1.QueryStakeRemovalsUpUntilBlockRequest")
	proto.RegisterType((*QueryStakeRemovalsUpUntilBlockResponse)(nil), "emissions.v1.QueryStakeRemovalsUpUntilBlockResponse")
	proto.RegisterType((*QueryDelegateStakeRemovalsUpUntilBlockRequest)(nil), "emissions.v1.QueryDelegateStakeRemovalsUpUntilBlockRequest")
	proto.RegisterType((*QueryDelegateStakeRemovalsUpUntilBlockResponse)(nil), "emissions.v1.QueryDelegateStakeRemovalsUpUntilBlockResponse")
	proto.RegisterType((*QueryStakeRemovalInfoRequest)(nil), "emissions.v1.QueryStakeRemovalInfoRequest")
	proto.RegisterType((*QueryStakeRemovalInfoResponse)(nil), "emissions.v1.QueryStakeRemovalInfoResponse")
	proto.RegisterType((*QueryDelegateStakeRemovalInfoRequest)(nil), "emissions.v1.QueryDelegateStakeRemovalInfoRequest")
	proto.RegisterType((*QueryDelegateStakeRemovalInfoResponse)(nil), "emissions.v1.QueryDelegateStakeRemovalInfoResponse")
	proto.RegisterType((*QueryTopicLastCommitRequest)(nil), "emissions.v1.QueryTopicLastCommitRequest")
	proto.RegisterType((*QueryTopicLastCommitResponse)(nil), "emissions.v1.QueryTopicLastCommitResponse")
	proto.RegisterType((*QueryTopicRewardNonceRequest)(nil), "emissions.v1.QueryTopicRewardNonceRequest")
	proto.RegisterType((*QueryTopicRewardNonceResponse)(nil), "emissions.v1.QueryTopicRewardNonceResponse")
	proto.RegisterType((*QueryReputerLossBundlesAtBlockRequest)(nil), "emissions.v1.QueryReputerLossBundlesAtBlockRequest")
	proto.RegisterType((*QueryReputerLossBundlesAtBlockResponse)(nil), "emissions.v1.QueryReputerLossBundlesAtBlockResponse")
	proto.RegisterType((*QueryStakeReputerAuthorityRequest)(nil), "emissions.v1.QueryStakeReputerAuthorityRequest")
	proto.RegisterType((*QueryStakeReputerAuthorityResponse)(nil), "emissions.v1.QueryStakeReputerAuthorityResponse")
	proto.RegisterType((*QueryDelegateStakePlacementRequest)(nil), "emissions.v1.QueryDelegateStakePlacementRequest")
	proto.RegisterType((*QueryDelegateStakePlacementResponse)(nil), "emissions.v1.QueryDelegateStakePlacementResponse")
	proto.RegisterType((*QueryDelegateStakeUponReputerRequest)(nil), "emissions.v1.QueryDelegateStakeUponReputerRequest")
	proto.RegisterType((*QueryDelegateStakeUponReputerResponse)(nil), "emissions.v1.QueryDelegateStakeUponReputerResponse")
	proto.RegisterType((*QueryDelegateRewardPerShareRequest)(nil), "emissions.v1.QueryDelegateRewardPerShareRequest")
	proto.RegisterType((*QueryDelegateRewardPerShareResponse)(nil), "emissions.v1.QueryDelegateRewardPerShareResponse")
	proto.RegisterType((*QueryStakeRemovalForReputerAndTopicIdRequest)(nil), "emissions.v1.QueryStakeRemovalForReputerAndTopicIdRequest")
	proto.RegisterType((*QueryStakeRemovalForReputerAndTopicIdResponse)(nil), "emissions.v1.QueryStakeRemovalForReputerAndTopicIdResponse")
	proto.RegisterType((*QueryDelegateStakeRemovalRequest)(nil), "emissions.v1.QueryDelegateStakeRemovalRequest")
	proto.RegisterType((*QueryDelegateStakeRemovalResponse)(nil), "emissions.v1.QueryDelegateStakeRemovalResponse")
	proto.RegisterType((*QueryPreviousTopicWeightRequest)(nil), "emissions.v1.QueryPreviousTopicWeightRequest")
	proto.RegisterType((*QueryPreviousTopicWeightResponse)(nil), "emissions.v1.QueryPreviousTopicWeightResponse")
	proto.RegisterType((*QueryTopicExistsRequest)(nil), "emissions.v1.QueryTopicExistsRequest")
	proto.RegisterType((*QueryTopicExistsResponse)(nil), "emissions.v1.QueryTopicExistsResponse")
	proto.RegisterType((*QueryIsTopicActiveRequest)(nil), "emissions.v1.QueryIsTopicActiveRequest")
	proto.RegisterType((*QueryIsTopicActiveResponse)(nil), "emissions.v1.QueryIsTopicActiveResponse")
	proto.RegisterType((*QueryTopicFeeRevenueRequest)(nil), "emissions.v1.QueryTopicFeeRevenueRequest")
	proto.RegisterType((*QueryTopicFeeRevenueResponse)(nil), "emissions.v1.QueryTopicFeeRevenueResponse")
	proto.RegisterType((*QueryRewardableTopicsRequest)(nil), "emissions.v1.QueryRewardableTopicsRequest")
	proto.RegisterType((*QueryRewardableTopicsResponse)(nil), "emissions.v1.QueryRewardableTopicsResponse")
	proto.RegisterType((*QueryLatestInfererScoreRequest)(nil), "emissions.v1.QueryLatestInfererScoreRequest")
	proto.RegisterType((*QueryLatestInfererScoreResponse)(nil), "emissions.v1.QueryLatestInfererScoreResponse")
	proto.RegisterType((*QueryLatestForecasterScoreRequest)(nil), "emissions.v1.QueryLatestForecasterScoreRequest")
	proto.RegisterType((*QueryLatestForecasterScoreResponse)(nil), "emissions.v1.QueryLatestForecasterScoreResponse")
	proto.RegisterType((*QueryLatestReputerScoreRequest)(nil), "emissions.v1.QueryLatestReputerScoreRequest")
	proto.RegisterType((*QueryLatestReputerScoreResponse)(nil), "emissions.v1.QueryLatestReputerScoreResponse")
	proto.RegisterType((*QueryInferenceScoresUntilBlockRequest)(nil), "emissions.v1.QueryInferenceScoresUntilBlockRequest")
	proto.RegisterType((*QueryInferenceScoresUntilBlockResponse)(nil), "emissions.v1.QueryInferenceScoresUntilBlockResponse")
	proto.RegisterType((*QueryWorkerInferenceScoresAtBlockRequest)(nil), "emissions.v1.QueryWorkerInferenceScoresAtBlockRequest")
	proto.RegisterType((*QueryWorkerInferenceScoresAtBlockResponse)(nil), "emissions.v1.QueryWorkerInferenceScoresAtBlockResponse")
	proto.RegisterType((*QueryForecastScoresUntilBlockRequest)(nil), "emissions.v1.QueryForecastScoresUntilBlockRequest")
	proto.RegisterType((*QueryForecastScoresUntilBlockResponse)(nil), "emissions.v1.QueryForecastScoresUntilBlockResponse")
	proto.RegisterType((*QueryWorkerForecastScoresAtBlockRequest)(nil), "emissions.v1.QueryWorkerForecastScoresAtBlockRequest")
	proto.RegisterType((*QueryWorkerForecastScoresAtBlockResponse)(nil), "emissions.v1.QueryWorkerForecastScoresAtBlockResponse")
	proto.RegisterType((*QueryReputersScoresAtBlockRequest)(nil), "emissions.v1.QueryReputersScoresAtBlockRequest")
	proto.RegisterType((*QueryReputersScoresAtBlockResponse)(nil), "emissions.v1.QueryReputersScoresAtBlockResponse")
	proto.RegisterType((*QueryListeningCoefficientRequest)(nil), "emissions.v1.QueryListeningCoefficientRequest")
	proto.RegisterType((*QueryListeningCoefficientResponse)(nil), "emissions.v1.QueryListeningCoefficientResponse")
	proto.RegisterType((*QueryPreviousReputerRewardFractionRequest)(nil), "emissions.v1.QueryPreviousReputerRewardFractionRequest")
	proto.RegisterType((*QueryPreviousReputerRewardFractionResponse)(nil), "emissions.v1.QueryPreviousReputerRewardFractionResponse")
	proto.RegisterType((*QueryPreviousInferenceRewardFractionRequest)(nil), "emissions.v1.QueryPreviousInferenceRewardFractionRequest")
	proto.RegisterType((*QueryPreviousInferenceRewardFractionResponse)(nil), "emissions.v1.QueryPreviousInferenceRewardFractionResponse")
	proto.RegisterType((*QueryPreviousForecastRewardFractionRequest)(nil), "emissions.v1.QueryPreviousForecastRewardFractionRequest")
	proto.RegisterType((*QueryPreviousForecastRewardFractionResponse)(nil), "emissions.v1.QueryPreviousForecastRewardFractionResponse")
	proto.RegisterType((*QueryPreviousPercentageRewardToStakedReputersRequest)(nil), "emissions.v1.QueryPreviousPercentageRewardToStakedReputersRequest")
	proto.RegisterType((*QueryPreviousPercentageRewardToStakedReputersResponse)(nil), "emissions.v1.QueryPreviousPercentageRewardToStakedReputersResponse")
	proto.RegisterType((*QueryTotalRewardToDistributeRequest)(nil), "emissions.v1.QueryTotalRewardToDistributeRequest")
	proto.RegisterType((*QueryTotalRewardToDistributeResponse)(nil), "emissions.v1.QueryTotalRewardToDistributeResponse")
	proto.RegisterType((*QueryTopicLastWorkerPayloadRequest)(nil), "emissions.v1.QueryTopicLastWorkerPayloadRequest")
	proto.RegisterType((*QueryTopicLastWorkerPayloadResponse)(nil), "emissions.v1.QueryTopicLastWorkerPayloadResponse")
	proto.RegisterType((*QueryTopicLastReputerPayloadRequest)(nil), "emissions.v1.QueryTopicLastReputerPayloadRequest")
	proto.RegisterType((*QueryTopicLastReputerPayloadResponse)(nil), "emissions.v1.QueryTopicLastReputerPayloadResponse")
}

func init() { proto.RegisterFile("emissions/v1/query.proto", fileDescriptor_c426af2f1e908986) }

var fileDescriptor_c426af2f1e908986 = []byte{
	// 5222 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x5d, 0x5d, 0x6c, 0x1d, 0xc7,
	0x75, 0xf6, 0x52, 0x12, 0x45, 0x0e, 0xf5, 0x3b, 0x96, 0x65, 0xf2, 0x52, 0xa6, 0xa4, 0x95, 0x65,
	0xfd, 0xf3, 0x4a, 0xd4, 0xbf, 0x2c, 0xd9, 0x26, 0x25, 0x8b, 0xba, 0xb6, 0x2c, 0x51, 0x57, 0x7f,
	0xb6, 0xda, 0xf8, 0x7a, 0x79, 0xef, 0x5c, 0x72, 0xa1, 0xe5, 0xee, 0xf5, 0xee, 0x5e, 0x4a, 0x82,
	0x42, 0x24, 0x0e, 0x82, 0x22, 0x01, 0x5a, 0xc0, 0x40, 0xd1, 0xa0, 0x01, 0x52, 0xa0, 0x05, 0xfa,
	0x10, 0xa0, 0x4d, 0x5a, 0x14, 0x41, 0x81, 0x14, 0xed, 0x43, 0xd0, 0x1f, 0x38, 0x68, 0x8b, 0x06,
	0x49, 0x0d, 0xa4, 0x41, 0x63, 0xb4, 0x76, 0x82, 0xb4, 0x7d, 0x28, 0xd0, 0xb7, 0x3e, 0x16, 0x3b,
	0x73, 0x66, 0x77, 0x67, 0x77, 0x66, 0x76, 0x2f, 0x7f, 0x00, 0xf7, 0xc5, 0xf0, 0xdd, 0x9d, 0x39,
	0xe7, 0x7c, 0x33, 0xb3, 0x67, 0xce, 0x39, 0x33, 0x1f, 0x85, 0x86, 0xc9, 0x82, 0x1d, 0x04, 0xb6,
	0xe7, 0x06, 0xd5, 0xc5, 0x13, 0xd5, 0xf7, 0xbb, 0xc4, 0x7f, 0x32, 0xde, 0xf1, 0xbd, 0xd0, 0xc3,
	0x9b, 0xe2, 0x37, 0xe3, 0x8b, 0x27, 0x2a, 0x87, 0x9b, 0x5e, 0xb0, 0xe0, 0x05, 0xd5, 0x59, 0x2b,
	0x20, 0xac, 0x59, 0x75, 0xf1, 0xc4, 0x2c, 0x09, 0xad, 0x13, 0xd5, 0x8e, 0x35, 0x67, 0xbb, 0x56,
	0x68, 0x7b, 0x2e, 0xeb, 0x59, 0x11, 0x65, 0x86, 0x4f, 0x3a, 0x24, 0x80, 0x37, 0xbb, 0xe6, 0x3c,
	0x6f, 0xce, 0x21, 0x55, 0xab, 0x63, 0x57, 0x2d, 0xd7, 0xf5, 0x42, 0xda, 0x8d, 0xbf, 0x1d, 0x05,
	0x1d, 0x5c, 0x7c, 0xda, 0x9c, 0xca, 0x76, 0x6b, 0xc1, 0x76, 0xbd, 0x2a, 0xfd, 0x2f, 0x3c, 0xda,
	0x31, 0xe7, 0xcd, 0x79, 0xf4, 0x7f, 0xab, 0xd1, 0xff, 0xc1, 0xd3, 0x11, 0x26, 0xa5, 0xc1, 0x5e,
	0xb0, 0x1f, 0xfc, 0x95, 0x60, 0x58, 0xc7, 0xf2, 0xad, 0x05, 0xfe, 0xea, 0x79, 0xe1, 0x95, 0xeb,
	0xb5, 0x88, 0xb4, 0xcf, 0x23, 0xcf, 0x7f, 0x48, 0x7c, 0x78, 0x55, 0x11, 0x5e, 0xf9, 0xa4, 0xd3,
	0x0d, 0xe3, 0x77, 0xc3, 0x19, 0x79, 0x6e, 0x93, 0xc8, 0x47, 0xc7, 0xeb, 0xd8, 0x4d, 0xe9, 0x9b,
	0x20, 0xb4, 0x1e, 0xf2, 0x3e, 0xbb, 0x84, 0x37, 0xb6, 0xdb, 0x26, 0x3e, 0x51, 0x49, 0x0c, 0x9a,
	0x9e, 0x0f, 0x6f, 0xcc, 0x1d, 0x08, 0xdf, 0x8a, 0xc6, 0x70, 0x86, 0x42, 0xad, 0x93, 0xf7, 0xbb,
	0x24, 0x08, 0xcd, 0x1b, 0xe8, 0x59, 0xe1, 0x69, 0xd0, 0xf1, 0xdc, 0x80, 0xe0, 0xb3, 0xa8, 0x9f,
	0x0d, 0xc9, 0xb0, 0xb1, 0xc7, 0x38, 0x38, 0x34, 0xb1, 0x63, 0x3c, 0xbd, 0x02, 0xc6, 0x59, 0xeb,
	0xa9, 0xc1, 0x8f, 0x3e, 0xd9, 0xfd, 0xcc, 0xb7, 0x7f, 0xf5, 0xa7, 0x87, 0x8d, 0x3a, 0x34, 0x37,
	0x87, 0xd1, 0x4e, 0x2a, 0xef, 0x8e, 0x17, 0x5a, 0xce, 0xed, 0xc8, 0x6c, 0xae, 0xc9, 0x46, 0xcf,
	0xe7, 0xde, 0x80, 0xb6, 0x6b, 0xa8, 0xdf, 0x5a, 0xf0, 0xba, 0x6e, 0x48, 0xb5, 0x0d, 0x4e, 0x1d,
	0x8f, 0xe4, 0xfe, 0xec, 0x93, 0xdd, 0xcf, 0xb1, 0x19, 0x0b, 0x5a, 0x0f, 0xc7, 0x6d, 0xaf, 0xba,
	0x60, 0x85, 0xf3, 0xe3, 0x35, 0x37, 0xfc, 0xf1, 0xf7, 0x8e, 0x21, 0x98, 0xca, 0x9a, 0x1b, 0x82,
	0x7a, 0xd6, 0xff, 0xc2, 0xfa, 0xff, 0xf8, 0xfd, 0xdd, 0x86, 0x79, 0x0f, 0xed, 0xa6, 0xaa, 0xea,
	0x6c, 0x1a, 0xa8, 0xb2, 0x9a, 0x7b, 0x27, 0x1a, 0x5e, 0xb0, 0x06, 0x0f, 0xa3, 0x8d, 0x56, 0xab,
	0xe5, 0x93, 0x80, 0x21, 0x1c, 0xac, 0xf3, 0x9f, 0x78, 0x04, 0x0d, 0xd0, 0x89, 0x68, 0xd8, 0xad,
	0xe1, 0xbe, 0x3d, 0xc6, 0xc1, 0xf5, 0xf5, 0x8d, 0xf4, 0x77, 0xad, 0x65, 0xfa, 0x68, 0x8f, 0x5a,
	0xee, 0x1a, 0x61, 0x69, 0xa0, 0x17, 0xa9, 0xce, 0xb7, 0xba, 0x4e, 0x68, 0x6b, 0x00, 0xed, 0x42,
	0x83, 0x80, 0x80, 0x44, 0x90, 0xd6, 0x1d, 0x1c, 0xac, 0x27, 0x0f, 0x74, 0xa0, 0x1e, 0xa0, 0xfd,
	0x05, 0x0a, 0x00, 0xd9, 0x09, 0xb4, 0x91, 0x59, 0xc6, 0xe4, 0x0f, 0x4d, 0x3c, 0x2f, 0x2e, 0x0a,
	0xe8, 0xd4, 0xf6, 0xea, 0xbc, 0x9d, 0xe9, 0xa1, 0x43, 0x54, 0x36, 0x7d, 0x75, 0xd5, 0xf7, 0x16,
	0x40, 0x3e, 0x88, 0xae, 0xb9, 0xb7, 0x89, 0xd3, 0xe6, 0x08, 0x0e, 0xa0, 0xad, 0xf0, 0xdd, 0x34,
	0xc4, 0xa9, 0xd9, 0x02, 0x8f, 0x27, 0x8b, 0x67, 0xe8, 0x8b, 0xe8, 0x70, 0x19, 0x85, 0x6b, 0x34,
	0x57, 0x1c, 0xee, 0x15, 0xe2, 0x90, 0x39, 0x2b, 0x24, 0xe9, 0x61, 0xac, 0xb9, 0x60, 0xca, 0x5a,
	0xc0, 0x2d, 0x50, 0xb8, 0x46, 0x70, 0xff, 0xc0, 0x40, 0xe3, 0xe2, 0x68, 0x83, 0x1d, 0x9e, 0xaf,
	0x02, 0x7d, 0x04, 0x6d, 0x6f, 0xf1, 0x36, 0x19, 0xd8, 0xdb, 0xe2, 0x17, 0x1c, 0xb8, 0x64, 0x84,
	0xfa, 0x0a, 0x47, 0x68, 0x9d, 0x38, 0x42, 0x1f, 0x18, 0xa8, 0x5a, 0xda, 0xc6, 0x35, 0x5b, 0x16,
	0xfb, 0xf5, 0x26, 0x2c, 0x6b, 0x74, 0x34, 0xcb, 0xe2, 0x31, 0x7a, 0xa9, 0x48, 0xe1, 0x1a, 0x41,
	0x3d, 0x19, 0xbb, 0xff, 0x8e, 0xdd, 0x4c, 0xbb, 0x7f, 0xc1, 0x5c, 0x43, 0x34, 0x37, 0xd9, 0x19,
	0x92, 0x4e, 0x6b, 0x64, 0x5f, 0x0b, 0xbc, 0xe9, 0x0d, 0x12, 0x46, 0xdb, 0xf7, 0x75, 0x2f, 0x08,
	0xa6, 0xba, 0x6e, 0xcb, 0x21, 0x93, 0xe1, 0x94, 0xe3, 0x35, 0x1f, 0x16, 0x5b, 0x8b, 0xf7, 0xa2,
	0x4d, 0xb3, 0x51, 0xd3, 0xc6, 0x3c, 0xb1, 0xe7, 0xe6, 0x43, 0x3a, 0xf6, 0xeb, 0xea, 0x43, 0xf4,
	0xd9, 0x35, 0xfa, 0xc8, 0x6c, 0xc2, 0x84, 0xab, 0xb5, 0x00, 0xbc, 0x0b, 0x68, 0xc8, 0xf1, 0x82,
	0xa0, 0x31, 0x4b, 0xdf, 0xc2, 0x5e, 0x3b, 0x22, 0xba, 0xd5, 0x7b, 0x96, 0xd3, 0x25, 0xac, 0x7b,
	0x1d, 0x39, 0xb1, 0x28, 0x73, 0x04, 0x46, 0xed, 0x06, 0x79, 0x1c, 0xb2, 0x85, 0xdc, 0xe2, 0x5b,
	0xed, 0x2b, 0x68, 0x38, 0xff, 0x0a, 0x54, 0x9a, 0x68, 0xb3, 0x4b, 0x1e, 0x87, 0x8d, 0x0c, 0xbc,
	0x21, 0x37, 0x69, 0x6b, 0x8e, 0xa3, 0xed, 0xc9, 0x84, 0x94, 0x98, 0xc0, 0xaf, 0x1a, 0x10, 0x5b,
	0x88, 0x8b, 0xeb, 0x10, 0xda, 0x40, 0x5b, 0x00, 0xae, 0x67, 0x45, 0x5c, 0xac, 0x2d, 0x6b, 0x81,
	0x77, 0xa2, 0xfe, 0x47, 0xc9, 0x70, 0x0e, 0xd6, 0xe1, 0x57, 0xf4, 0x45, 0x90, 0x76, 0x9b, 0x34,
	0x43, 0x7b, 0x91, 0x34, 0x7c, 0xb2, 0x48, 0xdc, 0x2e, 0xa1, 0x9f, 0xf8, 0x60, 0x7d, 0x5b, 0xfc,
	0xa2, 0xce, 0x9e, 0x9b, 0x73, 0x00, 0x7b, 0x92, 0x3e, 0xa5, 0xf2, 0x79, 0x9c, 0x83, 0xdf, 0x44,
	0x28, 0x89, 0x4d, 0xc1, 0xa0, 0x23, 0x99, 0xfd, 0xcb, 0x5e, 0xe8, 0x38, 0xe4, 0x72, 0xd7, 0x0f,
	0x3c, 0x7f, 0x26, 0x6e, 0x0b, 0x02, 0xea, 0xa9, 0xee, 0xe6, 0x37, 0x0c, 0x34, 0x22, 0xd1, 0x04,
	0xb0, 0x8f, 0xa0, 0x7e, 0x0a, 0x8a, 0x6f, 0x93, 0x52, 0xdc, 0xd0, 0x04, 0x5f, 0x17, 0xec, 0xea,
	0xa3, 0x76, 0x1d, 0x2d, 0x67, 0x17, 0x53, 0x27, 0x18, 0xf6, 0x05, 0xf4, 0x02, 0xb5, 0xab, 0xc6,
	0xa3, 0xc2, 0x60, 0x55, 0xd7, 0xf5, 0x03, 0x34, 0xa6, 0x12, 0x0f, 0xd8, 0xcf, 0x21, 0x14, 0x47,
	0xa4, 0x3c, 0x76, 0x1c, 0x16, 0xe1, 0x24, 0x9d, 0xeb, 0xa9, 0xb6, 0xe6, 0x2b, 0x68, 0x2f, 0x95,
	0x7d, 0xdd, 0x0a, 0x49, 0x00, 0x2b, 0x31, 0x69, 0x59, 0xbc, 0x06, 0x3f, 0x30, 0x90, 0xa9, 0x13,
	0xb0, 0x52, 0x03, 0xcb, 0x8c, 0xcf, 0xaf, 0xa3, 0x5d, 0xd4, 0x84, 0xab, 0x9e, 0x4f, 0x9a, 0x56,
	0x10, 0xae, 0xee, 0xe8, 0xdf, 0x83, 0xc9, 0xcd, 0x4b, 0x07, 0x6c, 0xa7, 0xd1, 0x60, 0x9b, 0xbf,
	0x03, 0x68, 0x99, 0x10, 0x2d, 0xee, 0x5a, 0x4f, 0x5a, 0x9a, 0x04, 0x46, 0xfe, 0x3e, 0xcd, 0x67,
	0xd8, 0xf0, 0xc5, 0x63, 0x50, 0xc2, 0xf4, 0xfd, 0x68, 0x0b, 0x4b, 0x85, 0x32, 0xbb, 0xf4, 0x66,
	0xf6, 0x14, 0xf6, 0x2b, 0x73, 0x1e, 0xe6, 0x47, 0xa1, 0x06, 0x30, 0x4c, 0xa1, 0x6d, 0x0e, 0x7d,
	0xd5, 0x88, 0x87, 0x5e, 0x0e, 0x25, 0xe9, 0xba, 0xd5, 0x11, 0x65, 0x99, 0xd7, 0x50, 0x25, 0xa5,
	0xe9, 0x86, 0xd7, 0x62, 0x51, 0x69, 0x3e, 0xf2, 0xef, 0x13, 0x22, 0xff, 0x37, 0xd6, 0x0f, 0x18,
	0xdb, 0xfa, 0xea, 0xc8, 0xb1, 0x67, 0x3b, 0x13, 0x9d, 0xc6, 0x43, 0xf2, 0xc4, 0xbc, 0x87, 0x46,
	0xa5, 0x92, 0xe2, 0x2c, 0x69, 0x30, 0xca, 0x0e, 0x23, 0x53, 0x3d, 0xb0, 0xb2, 0x22, 0x5a, 0x79,
	0xb3, 0xdd, 0x6e, 0xce, 0x5b, 0xb6, 0x1b, 0x75, 0xad, 0x0f, 0xb8, 0x20, 0xc0, 0xac, 0x81, 0x5c,
	0x88, 0x3c, 0x56, 0x62, 0xe2, 0x7d, 0x58, 0x73, 0x39, 0x51, 0x2b, 0xb5, 0xf1, 0xfb, 0x86, 0xb8,
	0x57, 0x2e, 0xc7, 0xa7, 0x5c, 0x42, 0xa3, 0xe9, 0x55, 0xdd, 0x70, 0x2c, 0x61, 0x62, 0xd9, 0x22,
	0x1f, 0x4e, 0x2d, 0xf2, 0xeb, 0x56, 0x6a, 0x22, 0xf1, 0x59, 0x34, 0x9c, 0xef, 0xee, 0x93, 0x47,
	0x96, 0xcf, 0xe2, 0xbc, 0x75, 0xf5, 0xe7, 0x32, 0x7d, 0xeb, 0xf4, 0xa5, 0xf9, 0x1a, 0xda, 0x97,
	0xf2, 0x05, 0x39, 0x00, 0x25, 0xdc, 0x09, 0x0f, 0x14, 0x6a, 0x01, 0x9f, 0x7b, 0xb7, 0x49, 0xee,
	0xba, 0xed, 0xae, 0xd3, 0xb6, 0x1d, 0x87, 0xb4, 0x56, 0xe7, 0x93, 0x6e, 0x43, 0xa0, 0xa0, 0xd6,
	0x02, 0xb3, 0x78, 0x09, 0x8d, 0xda, 0x41, 0x03, 0x3e, 0x33, 0x5a, 0x41, 0x68, 0x74, 0x93, 0x66,
	0x54, 0xf3, 0x40, 0x7d, 0xd8, 0x56, 0x88, 0x31, 0x27, 0x01, 0x8d, 0x20, 0x1a, 0xd6, 0x4b, 0xc9,
	0x01, 0xe1, 0x31, 0x8d, 0x5a, 0x44, 0x1c, 0xd3, 0xf4, 0x53, 0x03, 0xb9, 0x0b, 0x32, 0xc5, 0xd5,
	0x26, 0x26, 0x04, 0xd0, 0x17, 0x7a, 0xc4, 0xf3, 0x96, 0x52, 0x92, 0x42, 0x54, 0xc6, 0xcc, 0x3b,
	0x79, 0xa4, 0xa2, 0x04, 0xb0, 0xf2, 0x68, 0xc6, 0xca, 0x4c, 0x81, 0x23, 0x63, 0xd7, 0xdb, 0x90,
	0xf8, 0xb3, 0x25, 0xe4, 0xc3, 0x82, 0xaa, 0x93, 0x39, 0x9f, 0x84, 0x25, 0x56, 0xc2, 0x08, 0x1a,
	0xb0, 0x9a, 0x51, 0x4c, 0x0f, 0xa1, 0x7a, 0xf4, 0x41, 0x47, 0xbf, 0x6b, 0x2d, 0xf3, 0xd7, 0xc0,
	0xf9, 0xca, 0x25, 0x83, 0xb1, 0x67, 0x50, 0xbf, 0x4f, 0x9f, 0x80, 0xb1, 0x63, 0x99, 0x88, 0xc2,
	0x5e, 0x20, 0x41, 0x68, 0x2d, 0x74, 0x48, 0x8b, 0x06, 0x8b, 0x75, 0x68, 0x6d, 0xbe, 0x0d, 0xc3,
	0xc9, 0xdd, 0x7e, 0xef, 0x96, 0x47, 0x71, 0x19, 0x1d, 0xbe, 0x38, 0x2e, 0xa3, 0xbf, 0xcc, 0x77,
	0x61, 0x98, 0x95, 0x92, 0x57, 0x68, 0xf9, 0x97, 0xd0, 0x41, 0x2a, 0xff, 0xa6, 0x4b, 0x6a, 0xee,
	0xf2, 0xcd, 0x1f, 0x43, 0xa8, 0x1d, 0x77, 0x06, 0x08, 0xa9, 0x27, 0x91, 0xa3, 0x65, 0xde, 0xc8,
	0x87, 0xa0, 0x92, 0xff, 0x34, 0x9b, 0x90, 0xca, 0xeb, 0x0d, 0x58, 0x21, 0x4a, 0x1b, 0x1d, 0x95,
	0x29, 0xb9, 0x4d, 0x9c, 0xf6, 0x2a, 0x23, 0x35, 0xe7, 0xd0, 0xb1, 0x92, 0xaa, 0x56, 0x88, 0x89,
	0xc4, 0x2e, 0x2d, 0xed, 0x1e, 0x56, 0xdd, 0x73, 0xda, 0x90, 0xe2, 0x6a, 0xd4, 0x00, 0x90, 0x57,
	0xd1, 0x2e, 0x3b, 0x68, 0xf0, 0x42, 0x82, 0xca, 0x77, 0x8e, 0xd8, 0x2a, 0x41, 0xe6, 0xfb, 0x62,
	0x36, 0xa7, 0x0e, 0x7e, 0xaf, 0x21, 0xec, 0xb2, 0x36, 0x8d, 0x5c, 0x8c, 0xa9, 0x49, 0xea, 0xb6,
	0xbb, 0x59, 0xc1, 0xe6, 0xc7, 0x1b, 0xe0, 0xfb, 0x52, 0x6e, 0x60, 0xab, 0xad, 0x12, 0xbf, 0x89,
	0xb6, 0xc2, 0xda, 0x6f, 0xb0, 0xdc, 0x2b, 0x8a, 0x3d, 0xd6, 0xc9, 0xfc, 0x77, 0x34, 0xcd, 0x51,
	0x84, 0xe0, 0x2f, 0x90, 0xd6, 0x7d, 0xda, 0xb4, 0xbe, 0x05, 0xba, 0xb2, 0x9f, 0x01, 0xbe, 0x85,
	0x70, 0xb2, 0xf6, 0x62, 0x79, 0xeb, 0x4a, 0xcb, 0xdb, 0x9e, 0xf4, 0xe6, 0x22, 0x2d, 0x34, 0xc2,
	0x1f, 0xd6, 0x16, 0x3a, 0x8e, 0x4d, 0x5a, 0x89, 0xf1, 0xc3, 0xeb, 0xa9, 0xe4, 0x7d, 0xa2, 0x64,
	0xe6, 0xf7, 0x27, 0xc3, 0xd0, 0xb7, 0x67, 0xbb, 0x21, 0x5f, 0xa7, 0x6a, 0x29, 0xf8, 0x14, 0xda,
	0x19, 0x0f, 0x62, 0x43, 0x58, 0x80, 0x1b, 0xe8, 0x02, 0xdc, 0x11, 0xbf, 0x9d, 0x4a, 0x56, 0x22,
	0x3e, 0x8c, 0xb6, 0xb3, 0x1c, 0x3e, 0xdd, 0xa1, 0x9f, 0x76, 0xd8, 0x4a, 0xd3, 0xf5, 0x54, 0xdb,
	0xdf, 0x30, 0xd0, 0xbe, 0xa6, 0xe7, 0xb6, 0xed, 0x16, 0xd5, 0x61, 0xbb, 0x21, 0xf1, 0x17, 0x2d,
	0xa7, 0xe1, 0x5b, 0x8f, 0x1a, 0x1d, 0xe2, 0x37, 0x89, 0x1b, 0xda, 0x0e, 0x09, 0x86, 0x37, 0xee,
	0x59, 0x77, 0x70, 0x70, 0xea, 0x2c, 0x14, 0x3b, 0xaa, 0x73, 0x76, 0x38, 0xdf, 0x9d, 0x1d, 0x6f,
	0x7a, 0x0b, 0x55, 0xcb, 0x71, 0x3c, 0xdf, 0x3a, 0x06, 0xf3, 0xc7, 0x7f, 0xd2, 0xf8, 0x8d, 0x95,
	0x41, 0xae, 0x90, 0x66, 0x7d, 0x4f, 0xa2, 0xa3, 0x06, 0x2a, 0xea, 0xd6, 0xa3, 0x99, 0x44, 0x01,
	0xee, 0xa2, 0x8a, 0xcc, 0x8e, 0xc5, 0x68, 0x88, 0x82, 0xe1, 0x81, 0x95, 0xa9, 0x1f, 0xce, 0xab,
	0xa7, 0x63, 0x1f, 0x98, 0xef, 0xa2, 0x03, 0x42, 0xbc, 0x53, 0x27, 0x73, 0x76, 0x34, 0xc9, 0xd1,
	0x34, 0x88, 0x35, 0x0c, 0x9d, 0x7b, 0x50, 0x86, 0xc7, 0xe6, 0x4d, 0xd8, 0x36, 0xb4, 0xf2, 0xe1,
	0xd3, 0xd9, 0x87, 0x36, 0x53, 0xbf, 0xc0, 0x5b, 0x80, 0x23, 0xd8, 0x14, 0x39, 0x02, 0xfe, 0xcc,
	0x6c, 0xc4, 0x02, 0xe3, 0xb8, 0x65, 0x75, 0x2d, 0x9e, 0x81, 0x7d, 0x46, 0xaf, 0xa0, 0x17, 0x93,
	0xcf, 0x41, 0x42, 0x50, 0x0b, 0xee, 0xcf, 0xdb, 0x21, 0x71, 0xec, 0x20, 0x9c, 0x6c, 0x2d, 0xd8,
	0x6e, 0xe1, 0xc9, 0x87, 0x79, 0x81, 0x57, 0x0f, 0x72, 0x3d, 0x41, 0xff, 0x08, 0x1a, 0xb0, 0x83,
	0x86, 0x15, 0x3d, 0x03, 0xd5, 0x1b, 0xed, 0x80, 0x36, 0x31, 0xdf, 0x48, 0xd7, 0x38, 0xeb, 0x64,
	0xc1, 0x5b, 0xb4, 0x9c, 0xe0, 0x6e, 0xe7, 0x6e, 0xb4, 0xde, 0x84, 0x6c, 0x21, 0xeb, 0xdb, 0x8d,
	0xbc, 0x6f, 0x6f, 0xa5, 0xcb, 0x97, 0x72, 0x59, 0x71, 0xac, 0x39, 0xe0, 0xc3, 0x7b, 0x28, 0xb6,
	0x8c, 0x49, 0xce, 0x24, 0x40, 0x04, 0x4d, 0x8b, 0xe2, 0xf6, 0x66, 0x1d, 0x76, 0x44, 0xa1, 0x76,
	0xbe, 0x42, 0xcb, 0x43, 0x28, 0x88, 0x97, 0x90, 0x19, 0xe7, 0xbb, 0x59, 0x04, 0x2f, 0x89, 0x08,
	0x64, 0xa2, 0x32, 0x48, 0x6e, 0xc3, 0x8c, 0xe7, 0x9a, 0x94, 0x5a, 0x98, 0xb0, 0x33, 0xf2, 0x85,
	0x09, 0x3f, 0xcd, 0x77, 0x60, 0x31, 0xe4, 0x85, 0xc6, 0x95, 0x94, 0x8d, 0x60, 0x81, 0x3c, 0x42,
	0xc8, 0x75, 0xe4, 0xcd, 0xcd, 0x27, 0xb0, 0xb9, 0x29, 0xa1, 0x15, 0xdb, 0xbd, 0x0b, 0x0d, 0xc6,
	0x05, 0x71, 0xb0, 0x3c, 0x79, 0x90, 0x46, 0xb5, 0x4e, 0x44, 0x65, 0xc3, 0x32, 0x55, 0xab, 0x06,
	0x74, 0xaf, 0x65, 0xd1, 0x95, 0x9d, 0x96, 0x18, 0xe5, 0x39, 0xc8, 0xf1, 0xe9, 0x47, 0x1c, 0xe5,
	0xa6, 0x97, 0xbd, 0x85, 0x05, 0x3b, 0x2c, 0x95, 0x7b, 0xee, 0x92, 0xf7, 0x04, 0xdb, 0xae, 0xa0,
	0x21, 0x9a, 0x09, 0x37, 0xe9, 0x63, 0xb0, 0x6f, 0x9f, 0x32, 0x3e, 0x9b, 0x8c, 0x52, 0x0d, 0x1a,
	0xd5, 0xd4, 0x91, 0x13, 0x4b, 0x33, 0xcf, 0xa7, 0xb5, 0xb0, 0xbc, 0x99, 0x35, 0x2a, 0x36, 0xf0,
	0x34, 0xac, 0x8d, 0x7c, 0x57, 0xb0, 0x70, 0x07, 0xda, 0x40, 0x03, 0x2d, 0xf8, 0x46, 0xd8, 0x8f,
	0x38, 0x34, 0x04, 0x4f, 0x97, 0x94, 0xc5, 0x57, 0xb7, 0x4e, 0xe6, 0x82, 0xfb, 0xd0, 0xa8, 0x89,
	0x07, 0x72, 0x53, 0xaa, 0xfc, 0xce, 0xe3, 0xa6, 0xbd, 0xd2, 0x84, 0x35, 0x15, 0x3e, 0x05, 0xf5,
	0xa1, 0xa4, 0x0e, 0x1f, 0x25, 0x87, 0x7b, 0xd3, 0x5f, 0x0a, 0x3b, 0x99, 0xea, 0x86, 0xf3, 0x9e,
	0x6f, 0x87, 0x4f, 0x56, 0xf4, 0x0d, 0x86, 0x50, 0x32, 0x53, 0x48, 0x06, 0x14, 0x37, 0xd0, 0xa0,
	0xc5, 0x1f, 0x2e, 0xfb, 0x98, 0x24, 0x11, 0x61, 0x76, 0x41, 0xab, 0xb0, 0xc4, 0x67, 0x1c, 0xab,
	0x49, 0x16, 0x88, 0x1b, 0xae, 0xf8, 0xe3, 0xdc, 0x89, 0xfa, 0x43, 0xcb, 0x9f, 0x23, 0x21, 0x7c,
	0x9b, 0xf0, 0xcb, 0xb4, 0x21, 0x59, 0x55, 0xa9, 0x8d, 0x1d, 0xe6, 0x96, 0xe4, 0x8c, 0x2c, 0x55,
	0xd4, 0x1a, 0x95, 0x7e, 0x9f, 0x9e, 0x4f, 0x3f, 0xca, 0xcd, 0xad, 0xf4, 0x4f, 0xf3, 0x1d, 0x99,
	0x03, 0xba, 0xdb, 0xf1, 0xb2, 0xa7, 0x95, 0xfa, 0xc4, 0x18, 0x50, 0xf4, 0x09, 0x28, 0x3c, 0x99,
	0x83, 0x11, 0x44, 0x03, 0x8e, 0xab, 0x68, 0x03, 0xbd, 0xd5, 0xb1, 0xec, 0x19, 0x63, 0xdd, 0xcd,
	0x77, 0x32, 0xb3, 0xc5, 0x3e, 0xc7, 0x19, 0xe2, 0xdf, 0x9e, 0xb7, 0x7c, 0xb2, 0xa2, 0xe5, 0xf7,
	0x35, 0x23, 0x33, 0x25, 0x59, 0xd9, 0x00, 0xc5, 0x42, 0xdb, 0x58, 0x51, 0x2e, 0x8a, 0x61, 0x1b,
	0x41, 0xf4, 0x0e, 0x50, 0x2d, 0x3b, 0x84, 0xdc, 0xe2, 0x0b, 0xaa, 0xcc, 0x26, 0x64, 0xca, 0x69,
	0x77, 0x7b, 0xd5, 0xf3, 0xf9, 0x37, 0xe1, 0xb6, 0x32, 0xb1, 0x58, 0x0a, 0x94, 0x21, 0x80, 0xd2,
	0x1d, 0x9b, 0x2e, 0x41, 0x44, 0x50, 0xac, 0x04, 0x80, 0x5f, 0x47, 0x98, 0x4e, 0x42, 0x03, 0x7c,
	0x7e, 0x7a, 0x3d, 0x16, 0xed, 0x86, 0xdb, 0x82, 0xcc, 0x13, 0xf3, 0x77, 0x0d, 0xa8, 0x32, 0xc9,
	0xf6, 0x96, 0xf2, 0x41, 0x88, 0x06, 0xa1, 0xf8, 0x65, 0xae, 0xd3, 0x6c, 0x9b, 0xeb, 0xc5, 0x95,
	0xf0, 0x04, 0x5c, 0x9c, 0xdc, 0x32, 0x18, 0x8d, 0x3b, 0x9a, 0xd1, 0x28, 0xbb, 0x7b, 0xe6, 0x47,
	0xe5, 0x22, 0xdc, 0xe5, 0x99, 0xf1, 0xc9, 0xa2, 0xed, 0x75, 0x03, 0x3a, 0x07, 0x90, 0x26, 0x16,
	0xef, 0x54, 0x1f, 0xf2, 0x31, 0x95, 0x76, 0x07, 0xc3, 0x6f, 0xc6, 0x87, 0x8f, 0x2b, 0x5c, 0xb5,
	0xfc, 0xd4, 0x72, 0x14, 0x0d, 0xba, 0x5e, 0xd8, 0x68, 0x7b, 0x5d, 0x97, 0x4d, 0xc1, 0x40, 0x7d,
	0xc0, 0xf5, 0xc2, 0xab, 0xd1, 0x6f, 0xf3, 0x54, 0xfa, 0xb4, 0xfb, 0xf5, 0xc7, 0x76, 0x10, 0x96,
	0xa9, 0x6b, 0x4e, 0xc0, 0xd9, 0xa6, 0xd0, 0x0b, 0xec, 0xdf, 0x89, 0xfa, 0x09, 0x7d, 0x02, 0x41,
	0x39, 0xfc, 0x32, 0xcf, 0xc0, 0x29, 0x65, 0x8d, 0xa1, 0x9e, 0x84, 0xc3, 0xd2, 0x42, 0x5d, 0xe7,
	0xe1, 0xfc, 0x24, 0xd3, 0x0f, 0xb4, 0x8d, 0xa2, 0xc1, 0x28, 0x09, 0xa0, 0x0f, 0x41, 0xe1, 0x80,
	0x1d, 0xb0, 0x46, 0x62, 0xd0, 0x73, 0x95, 0xf0, 0xa3, 0xd9, 0x12, 0x4a, 0xdf, 0x4f, 0x87, 0x23,
	0xe9, 0x9e, 0xa0, 0xf6, 0x16, 0x1a, 0x6a, 0x93, 0xe4, 0x0c, 0x78, 0xb9, 0x5e, 0x13, 0xb5, 0x63,
	0xd1, 0xe6, 0x58, 0x7c, 0x74, 0x12, 0xf9, 0x1a, 0x6b, 0xd6, 0x11, 0xcf, 0x8c, 0xcd, 0x5b, 0x10,
	0xe6, 0xe4, 0xdf, 0x83, 0x4d, 0xc7, 0xd1, 0x0e, 0x3f, 0x7e, 0x17, 0x9f, 0xa8, 0xb3, 0x40, 0x7e,
	0x7d, 0x1d, 0xfb, 0x62, 0xbf, 0x5a, 0x2b, 0x30, 0xef, 0xc2, 0x09, 0x6a, 0xfa, 0xf8, 0xcb, 0xbf,
	0xdd, 0xf4, 0xca, 0x7a, 0x6a, 0x5e, 0xad, 0xec, 0x13, 0xab, 0x95, 0xd7, 0xe1, 0x23, 0x91, 0x89,
	0x4d, 0x0e, 0xe3, 0xe9, 0x6d, 0x40, 0xf9, 0x61, 0x3c, 0x6b, 0xcb, 0x5a, 0x98, 0xef, 0x0a, 0x47,
	0xb1, 0xa9, 0x62, 0x61, 0x49, 0x3b, 0x8b, 0x6a, 0x91, 0x37, 0x85, 0x93, 0xda, 0x9c, 0xfc, 0xde,
	0x0d, 0x16, 0x47, 0x95, 0xdf, 0x61, 0x2b, 0x3f, 0xaa, 0x8a, 0xfd, 0x4f, 0x1c, 0x55, 0x51, 0x6c,
	0xef, 0x46, 0xc6, 0x85, 0x51, 0x5e, 0x44, 0xa2, 0x6f, 0x83, 0x7c, 0x9e, 0xb9, 0xb2, 0xe8, 0xf7,
	0x2e, 0x2f, 0x8c, 0xaa, 0xd5, 0x24, 0xf7, 0x14, 0xa8, 0x65, 0x8a, 0x7b, 0x0a, 0xcc, 0x78, 0x68,
	0x62, 0xce, 0x43, 0x21, 0x84, 0xd5, 0x55, 0x32, 0xc2, 0x57, 0x35, 0x7c, 0x7f, 0x07, 0x2a, 0x22,
	0x7a, 0x4d, 0xc9, 0x31, 0x4e, 0x8c, 0x41, 0x72, 0x8c, 0xc3, 0x3a, 0xc5, 0x20, 0x5a, 0x99, 0x53,
	0x8b, 0xb5, 0x99, 0x81, 0x3b, 0x30, 0xd1, 0x6a, 0x2d, 0xcb, 0x99, 0x80, 0x39, 0x28, 0x9d, 0xb1,
	0x61, 0x11, 0x65, 0xaf, 0xea, 0xf8, 0xbf, 0x2d, 0xcc, 0xb4, 0x42, 0xd1, 0xb2, 0x86, 0xdf, 0x02,
	0xbf, 0x02, 0x5f, 0x52, 0xb0, 0x06, 0xc6, 0xd7, 0xc1, 0xb5, 0x28, 0x54, 0x2c, 0xcb, 0xec, 0xfb,
	0x10, 0x42, 0x5c, 0xb7, 0x83, 0x90, 0xb8, 0xb6, 0x3b, 0x77, 0xd9, 0x23, 0xed, 0xb6, 0xdd, 0xb4,
	0xcb, 0x65, 0x43, 0x6a, 0xff, 0xf2, 0x45, 0xee, 0x67, 0xa5, 0x82, 0xc1, 0xd6, 0xfb, 0xe8, 0x39,
	0x87, 0xbf, 0x6f, 0x34, 0x93, 0x06, 0xf2, 0xd3, 0x55, 0xa9, 0xa8, 0x1d, 0x8e, 0xe4, 0xa9, 0xf9,
	0x1e, 0x7c, 0x67, 0x3c, 0x32, 0x8a, 0x13, 0x94, 0x68, 0xd3, 0xba, 0xea, 0x47, 0x1b, 0x7c, 0x7c,
	0xfb, 0x69, 0x79, 0xf8, 0xfe, 0xc8, 0x80, 0xeb, 0xa9, 0x05, 0x2a, 0x00, 0xe9, 0x7b, 0x68, 0x2b,
	0xa4, 0x11, 0x6d, 0x78, 0xb5, 0x4a, 0x59, 0x04, 0xd7, 0xa4, 0x8f, 0xcb, 0xde, 0x43, 0x47, 0x04,
	0x63, 0x53, 0x77, 0x53, 0x7a, 0x1c, 0x11, 0xd5, 0xa1, 0xe9, 0x77, 0x0c, 0xc8, 0x62, 0x0a, 0x55,
	0x7c, 0x3e, 0x46, 0xa4, 0x91, 0x99, 0x3e, 0xee, 0x0b, 0x56, 0x6d, 0x40, 0xfe, 0xd8, 0xc8, 0x8c,
	0xb9, 0x4a, 0xc3, 0xe7, 0x63, 0x3c, 0xce, 0xa0, 0x53, 0x82, 0xb5, 0x70, 0xa0, 0x62, 0xcd, 0xc1,
	0xfc, 0xdd, 0xf1, 0x68, 0x3e, 0xc3, 0xef, 0x45, 0xc4, 0x71, 0xe4, 0xef, 0x19, 0xe8, 0x74, 0x8f,
	0x1d, 0x01, 0x70, 0x0b, 0x6d, 0xef, 0xc4, 0x6d, 0xf9, 0xcd, 0x97, 0x15, 0x42, 0xde, 0xd6, 0xc9,
	0x68, 0x37, 0xf7, 0x43, 0x9a, 0x4f, 0x99, 0x19, 0xdc, 0xa2, 0x2b, 0x76, 0x00, 0x07, 0x67, 0x1c,
	0xc6, 0x57, 0xf8, 0x85, 0x20, 0x65, 0x3b, 0xb0, 0xfa, 0x01, 0xda, 0x14, 0x46, 0x4d, 0x56, 0xc9,
	0xe0, 0xa1, 0x30, 0xd1, 0x67, 0xbe, 0x0a, 0x0e, 0x3e, 0xae, 0x8d, 0xb2, 0x6d, 0x6a, 0xc6, 0x7a,
	0xe2, 0x78, 0x56, 0xab, 0x54, 0x71, 0x75, 0x9f, 0x56, 0x40, 0x7c, 0xe1, 0x66, 0x63, 0x87, 0x3d,
	0xea, 0xa5, 0xbe, 0xca, 0xfb, 0xc4, 0x17, 0x59, 0x62, 0x2d, 0x30, 0xb5, 0xe5, 0xed, 0x24, 0xf1,
	0x60, 0x2b, 0x24, 0xac, 0x8a, 0xa1, 0x13, 0xdf, 0xb7, 0xd1, 0x06, 0xaa, 0x07, 0x3f, 0x44, 0xfd,
	0x8c, 0xd6, 0x83, 0xf7, 0x88, 0x12, 0xf2, 0xac, 0xa1, 0xca, 0x5e, 0x4d, 0x0b, 0x66, 0x97, 0xb9,
	0xeb, 0x2b, 0x3f, 0xf9, 0xc5, 0x6f, 0xf7, 0xed, 0xc4, 0x3b, 0xaa, 0x12, 0xa2, 0x15, 0xfe, 0xba,
	0x81, 0xb6, 0x4c, 0x93, 0x30, 0x75, 0x41, 0x19, 0xef, 0x97, 0xc8, 0xcc, 0xdf, 0x6d, 0xae, 0xbc,
	0x54, 0xd4, 0x0c, 0xf4, 0x1f, 0xfc, 0x5a, 0x94, 0xef, 0x51, 0x23, 0x5e, 0xc0, 0xa3, 0xa2, 0x11,
	0xc2, 0x05, 0x68, 0xfc, 0x14, 0x0d, 0x4c, 0x13, 0xd6, 0x1f, 0xef, 0x96, 0x48, 0x4f, 0xdf, 0x82,
	0xae, 0xec, 0x51, 0x37, 0x00, 0xc5, 0x47, 0x13, 0xc5, 0x7b, 0xf1, 0xee, 0x6a, 0x9e, 0xe1, 0x15,
	0x54, 0x9f, 0x72, 0xdd, 0x4b, 0xf8, 0x37, 0x0d, 0xb4, 0x75, 0x9a, 0x84, 0xe9, 0x8b, 0xc4, 0x58,
	0x06, 0x51, 0x72, 0xa7, 0xb9, 0x72, 0xa0, 0xb0, 0x5d, 0x89, 0xb1, 0x60, 0x89, 0x7c, 0x03, 0xae,
	0x23, 0x7f, 0x62, 0xa0, 0xbd, 0xd3, 0x24, 0x94, 0xde, 0xd1, 0x9c, 0x7a, 0xc2, 0xa7, 0xaa, 0x2a,
	0x51, 0xac, 0xbb, 0x3d, 0x5a, 0x39, 0x5e, 0xbe, 0x03, 0x98, 0x7c, 0x2f, 0x31, 0xf9, 0x4d, 0x5c,
	0x2b, 0x18, 0x45, 0xa0, 0xe2, 0x05, 0xd5, 0xa7, 0xe2, 0x45, 0xd4, 0xa5, 0x6a, 0xf6, 0x2e, 0x29,
	0xfe, 0x33, 0x03, 0xed, 0x98, 0x26, 0x61, 0xee, 0x12, 0x07, 0x3e, 0x22, 0x31, 0x51, 0x75, 0xe5,
	0xb1, 0x72, 0xb4, 0x5c, 0x63, 0xc0, 0xf2, 0x6a, 0x82, 0xe5, 0x14, 0x9e, 0xa8, 0xca, 0xf9, 0x7b,
	0x02, 0x9e, 0xa7, 0xe9, 0x38, 0x77, 0x09, 0xff, 0xb9, 0x81, 0x86, 0xa7, 0x49, 0x28, 0xbd, 0xd9,
	0x2c, 0x9d, 0x0c, 0xdd, 0x25, 0x6a, 0xe9, 0x64, 0x68, 0x2f, 0x4d, 0x9b, 0x67, 0x13, 0x00, 0x47,
	0xf1, 0x61, 0x11, 0x40, 0x76, 0x84, 0x85, 0xd5, 0xfd, 0x5d, 0x03, 0x3d, 0x3b, 0x4d, 0xc2, 0xec,
	0x8d, 0x65, 0x7c, 0x58, 0x62, 0x82, 0xe2, 0xd2, 0x74, 0xe5, 0x48, 0xa9, 0xb6, 0x60, 0xe9, 0x2b,
	0x89, 0xa5, 0x27, 0xf1, 0x09, 0xd1, 0xd2, 0xf8, 0xc6, 0xb3, 0x66, 0xa4, 0x7f, 0x68, 0xa0, 0x51,
	0xea, 0x97, 0xe4, 0xc4, 0x0d, 0x3c, 0x21, 0xf5, 0x3e, 0x5a, 0x2e, 0x49, 0xe5, 0x64, 0x4f, 0x7d,
	0x00, 0xc8, 0x64, 0x02, 0xe4, 0x0c, 0x3e, 0x95, 0x75, 0x5f, 0xec, 0xc6, 0x8f, 0xe3, 0x05, 0x3a,
	0x2c, 0x5f, 0x35, 0xd0, 0x66, 0xea, 0xd8, 0x38, 0xdf, 0x12, 0xbf, 0x28, 0x75, 0x5e, 0x19, 0xa2,
	0x66, 0x65, 0x7f, 0x41, 0x2b, 0xb0, 0xf0, 0xa5, 0xc4, 0xc2, 0x51, 0x3c, 0x92, 0xfd, 0x42, 0xa3,
	0xed, 0x9f, 0xd6, 0x72, 0xa3, 0xc5, 0xbb, 0x73, 0x9a, 0x84, 0x12, 0x66, 0x21, 0x3e, 0x26, 0xd1,
	0xa4, 0xa6, 0x38, 0x56, 0xc6, 0xcb, 0x36, 0x07, 0x0b, 0x2f, 0x25, 0x16, 0x4e, 0xe0, 0xe3, 0x55,
	0x19, 0x43, 0x97, 0xd9, 0x58, 0x7d, 0x1a, 0x3b, 0x8c, 0xd4, 0xe2, 0xfd, 0x2b, 0xb6, 0x16, 0x54,
	0xbc, 0x48, 0xe9, 0x5a, 0x28, 0x60, 0x69, 0x4a, 0xd7, 0x42, 0x11, 0xf1, 0xd2, 0x3c, 0x9d, 0xe0,
	0x38, 0x8c, 0x0f, 0x4a, 0x71, 0x04, 0x0c, 0x88, 0xf0, 0xf1, 0xfd, 0xbb, 0x81, 0xf6, 0x4c, 0x93,
	0x50, 0x4b, 0x85, 0xc4, 0x67, 0x25, 0x06, 0x95, 0x61, 0x6b, 0x56, 0xce, 0xf5, 0xde, 0x11, 0xe0,
	0xbc, 0x91, 0xc0, 0x79, 0x15, 0x5f, 0xd2, 0x4c, 0x4b, 0x23, 0x20, 0x4e, 0xbb, 0xfa, 0x34, 0xc3,
	0x01, 0x14, 0xe6, 0xe8, 0x97, 0x0c, 0xa3, 0x96, 0xff, 0x28, 0xc5, 0x58, 0x86, 0xa2, 0x29, 0xc5,
	0x58, 0x8a, 0x6a, 0x69, 0xde, 0x48, 0x30, 0x5e, 0xc6, 0x93, 0x72, 0x8c, 0x70, 0xf0, 0x42, 0xf8,
	0x1a, 0xd4, 0xe1, 0xfc, 0x72, 0x1f, 0xda, 0x9f, 0x9e, 0x4b, 0x25, 0x89, 0x11, 0x5f, 0xd4, 0xcd,
	0x4b, 0x11, 0x3f, 0xb3, 0x72, 0x69, 0x99, 0xbd, 0x01, 0xf6, 0x83, 0x04, 0xf6, 0x4d, 0xfc, 0x96,
	0x08, 0x3b, 0x0b, 0x37, 0xc7, 0x74, 0x5c, 0xd2, 0x0f, 0xc1, 0x4f, 0x0c, 0xb4, 0x4b, 0x37, 0x04,
	0xf8, 0x64, 0x2f, 0xb6, 0x73, 0xc0, 0xa7, 0x7a, 0xeb, 0x04, 0x38, 0xaf, 0x25, 0x38, 0x2f, 0xe1,
	0x97, 0x7b, 0xc7, 0x99, 0xa0, 0xfa, 0x3a, 0x77, 0xd2, 0x9c, 0xfa, 0xa8, 0x70, 0xd2, 0x19, 0x3a,
	0xa5, 0xc2, 0x49, 0x67, 0xf9, 0x93, 0xe6, 0x91, 0xc4, 0xd0, 0x3d, 0x78, 0xac, 0x9a, 0xff, 0xa3,
	0x02, 0x69, 0x5b, 0xfe, 0x3a, 0x35, 0xc2, 0xb2, 0x4b, 0x4b, 0xea, 0x11, 0xd6, 0x5c, 0x9b, 0x52,
	0x8f, 0xb0, 0xee, 0x5e, 0x94, 0x79, 0x2e, 0x31, 0xfc, 0x18, 0x3e, 0x22, 0x31, 0x9c, 0x9f, 0x32,
	0x06, 0xd9, 0x6d, 0xef, 0x17, 0x06, 0x7a, 0x31, 0xeb, 0x12, 0xa4, 0x68, 0x5e, 0x2e, 0xfa, 0xba,
	0x75, 0xa8, 0x2e, 0x2e, 0xaf, 0x73, 0x89, 0xdd, 0x5d, 0x5c, 0x3f, 0x4a, 0x98, 0xdf, 0x61, 0xa1,
	0x55, 0xf6, 0x04, 0x55, 0x1a, 0x5a, 0x29, 0x2e, 0x58, 0x49, 0x43, 0x2b, 0xd5, 0x8d, 0x28, 0xed,
	0x6e, 0x2a, 0x98, 0x2a, 0x84, 0x24, 0xf0, 0x45, 0x2f, 0xe1, 0x9f, 0xb1, 0xdd, 0x54, 0x75, 0xf2,
	0x2b, 0xdd, 0x4d, 0x0b, 0x2e, 0x88, 0x49, 0x77, 0xd3, 0xa2, 0x9b, 0x5d, 0x66, 0x3d, 0xc1, 0x31,
	0x8d, 0x5f, 0x2f, 0x33, 0xf6, 0x02, 0xa0, 0xf8, 0x73, 0x4e, 0x83, 0xfb, 0x1d, 0x03, 0x6d, 0x8f,
	0xd3, 0x26, 0x4e, 0xc1, 0xc2, 0x07, 0x95, 0x59, 0x4f, 0x86, 0xf0, 0x55, 0x39, 0x54, 0xa2, 0x65,
	0x89, 0x2f, 0x9a, 0x65, 0x3f, 0x49, 0x34, 0x83, 0xbf, 0x69, 0x20, 0x9c, 0xc4, 0x5e, 0xb1, 0x61,
	0x87, 0xd4, 0x81, 0x54, 0xd6, 0xb2, 0xc3, 0x65, 0x9a, 0x96, 0xc8, 0x7c, 0x61, 0xa8, 0x52, 0xb6,
	0xfd, 0x93, 0x81, 0x46, 0x35, 0xf7, 0x74, 0xf1, 0x69, 0x59, 0x8e, 0x55, 0x78, 0x6f, 0xb8, 0x72,
	0xa6, 0xd7, 0x6e, 0x25, 0x3e, 0x49, 0xc8, 0x2a, 0x93, 0x8b, 0xb7, 0xc2, 0x8a, 0x88, 0x11, 0x45,
	0x3b, 0x94, 0xee, 0x1e, 0x2f, 0x96, 0xdb, 0x56, 0x78, 0xb3, 0xb8, 0x72, 0xb6, 0xe7, 0x7e, 0x00,
	0x6a, 0x2a, 0x01, 0x75, 0x16, 0x9f, 0x96, 0x87, 0x21, 0x45, 0xa8, 0xbe, 0xd1, 0x97, 0x4e, 0x89,
	0xf2, 0x89, 0xb3, 0x26, 0x25, 0x52, 0xe6, 0xcf, 0x27, 0x7b, 0xea, 0x03, 0x60, 0x7e, 0xcb, 0x48,
	0xd0, 0x7c, 0x60, 0xe0, 0x2f, 0xc9, 0x93, 0x22, 0x79, 0x42, 0x2d, 0x12, 0x0f, 0x45, 0x5f, 0x9a,
	0x61, 0x25, 0x42, 0x63, 0x56, 0xbb, 0x94, 0xb5, 0x64, 0x6f, 0x96, 0xf0, 0x5f, 0x1a, 0x68, 0x24,
	0xce, 0xca, 0xb3, 0xd6, 0xe3, 0x13, 0xca, 0x2c, 0x5b, 0x45, 0x47, 0xac, 0x4c, 0xf4, 0xd2, 0xa5,
	0xc4, 0x3e, 0xa9, 0x1d, 0x12, 0xfc, 0xb7, 0x06, 0x32, 0x63, 0xf3, 0x27, 0x17, 0x2d, 0xdb, 0xb1,
	0x66, 0x1d, 0xf2, 0xff, 0x0f, 0xc7, 0xc7, 0x06, 0x1a, 0x56, 0xf1, 0x27, 0xa5, 0x8b, 0xb3, 0x80,
	0xd2, 0x29, 0x5d, 0x9c, 0x45, 0x04, 0x4d, 0x73, 0x26, 0xb1, 0xff, 0x75, 0x7c, 0x39, 0x53, 0xe3,
	0x51, 0x33, 0x37, 0x35, 0xe9, 0xfb, 0xbf, 0x18, 0x68, 0x44, 0xc9, 0x6e, 0xc2, 0x27, 0x75, 0x2e,
	0x41, 0x85, 0xec, 0x54, 0x6f, 0x9d, 0x00, 0xda, 0xad, 0x04, 0xda, 0x55, 0x7c, 0x25, 0x07, 0x4d,
	0xc9, 0xac, 0xd2, 0x60, 0xfb, 0x1b, 0x03, 0x55, 0xa6, 0x49, 0xa8, 0x20, 0x69, 0x4a, 0xd7, 0x9c,
	0x9e, 0x12, 0x2a, 0x5d, 0x73, 0x05, 0x1c, 0x50, 0x6d, 0x5d, 0x2e, 0x85, 0x43, 0x98, 0x3c, 0x61,
	0xe9, 0x7d, 0xc4, 0x62, 0x1a, 0x15, 0x25, 0x16, 0x17, 0x18, 0x25, 0xa3, 0xe0, 0x4a, 0x57, 0x5f,
	0x11, 0xe7, 0xd6, 0x7c, 0x2d, 0x41, 0x72, 0x1a, 0x9f, 0x54, 0x23, 0x11, 0xe6, 0x2a, 0xc8, 0xc4,
	0xfe, 0xcf, 0xc7, 0x75, 0x51, 0x91, 0xe6, 0x88, 0xc7, 0x95, 0xd5, 0x4e, 0x29, 0x21, 0xb3, 0x52,
	0x2d, 0xdd, 0x1e, 0xcc, 0x9f, 0x4e, 0xcc, 0xbf, 0x88, 0x2f, 0xc8, 0x0a, 0xa4, 0x7e, 0x83, 0x3b,
	0x01, 0x46, 0x33, 0x14, 0xb7, 0x2a, 0xe0, 0xd6, 0x2e, 0xe1, 0x7f, 0x64, 0xeb, 0x4a, 0xc1, 0xd7,
	0x94, 0xae, 0x2b, 0x3d, 0xb9, 0x54, 0xba, 0xae, 0x0a, 0xe8, 0xa0, 0xda, 0xec, 0x30, 0x45, 0x8b,
	0xd3, 0x20, 0x62, 0x2b, 0x6e, 0x09, 0xff, 0x8f, 0x81, 0x76, 0x4f, 0x93, 0x50, 0x47, 0x42, 0x95,
	0x06, 0x15, 0x25, 0x68, 0xb3, 0xd2, 0xa0, 0xa2, 0x0c, 0xdb, 0xd5, 0xfc, 0x42, 0x02, 0xaf, 0x8e,
	0x67, 0x44, 0x78, 0x9e, 0x4b, 0x1a, 0xb6, 0xdb, 0x28, 0x87, 0x32, 0x69, 0xb5, 0x54, 0x7d, 0x0a,
	0xf3, 0xbc, 0x84, 0xff, 0xd7, 0x40, 0xfb, 0xf2, 0x98, 0x73, 0x44, 0x55, 0x7c, 0xa1, 0xd8, 0x7e,
	0x15, 0x91, 0xb6, 0xf2, 0xf2, 0xb2, 0xfa, 0x02, 0xfe, 0xb7, 0x13, 0xfc, 0x6f, 0xe1, 0x37, 0x8b,
	0xf0, 0x07, 0xc4, 0x69, 0x97, 0x1c, 0x04, 0xfc, 0x2d, 0x03, 0x6d, 0xcb, 0x92, 0xaf, 0xa4, 0x09,
	0x9d, 0x82, 0xdb, 0x25, 0x4d, 0xe8, 0x54, 0x6c, 0x2e, 0xb3, 0x4a, 0x21, 0x1c, 0xc2, 0x07, 0x32,
	0xc1, 0x2e, 0x6f, 0xcd, 0x88, 0x5e, 0xa9, 0x48, 0xf0, 0xbb, 0xac, 0x3e, 0x90, 0x39, 0x39, 0x65,
	0x74, 0x12, 0x65, 0x5e, 0x21, 0xa7, 0xbf, 0x48, 0xf3, 0x0a, 0x05, 0xdf, 0x45, 0x7b, 0xfc, 0xc0,
	0x46, 0x32, 0x45, 0x87, 0x49, 0x3b, 0xb5, 0x3f, 0x31, 0xd0, 0x0b, 0x69, 0x83, 0xc1, 0x79, 0x7e,
	0x8e, 0x2d, 0xfe, 0x36, 0xcb, 0xea, 0xb3, 0xc4, 0x1a, 0x7c, 0x58, 0x7d, 0xec, 0x98, 0x25, 0xee,
	0x48, 0x17, 0x81, 0x8a, 0xa9, 0xa3, 0x8d, 0xbb, 0x98, 0x59, 0x70, 0xe3, 0x82, 0x6e, 0x19, 0x69,
	0x53, 0xff, 0x99, 0xad, 0x06, 0x25, 0xcb, 0x46, 0x1a, 0xa2, 0x14, 0x51, 0x7f, 0xa4, 0x21, 0x4a,
	0x21, 0x91, 0xc7, 0xac, 0x25, 0x28, 0x5e, 0xc1, 0x17, 0xe5, 0x79, 0x4e, 0x9a, 0xe9, 0xa3, 0x09,
	0x4d, 0xfe, 0x8e, 0x9d, 0xb5, 0x49, 0x29, 0x37, 0xd2, 0xb3, 0x36, 0x1d, 0xed, 0x47, 0x7a, 0xd6,
	0xa6, 0x65, 0xf3, 0x68, 0xf7, 0x42, 0x5e, 0x95, 0x80, 0x22, 0x29, 0xef, 0x2b, 0x2f, 0xb8, 0x7c,
	0xcc, 0xd2, 0x13, 0x39, 0x9d, 0x06, 0x1f, 0x2f, 0x2a, 0x9d, 0x64, 0x09, 0x3f, 0x95, 0x13, 0x3d,
	0xf4, 0x00, 0x2c, 0xb7, 0x13, 0x2c, 0xd7, 0xf0, 0x55, 0x6d, 0xa9, 0xa5, 0xc3, 0x3b, 0x2b, 0x8b,
	0x2d, 0x8c, 0x60, 0xb3, 0x84, 0x7f, 0x2c, 0x29, 0x24, 0xa5, 0x08, 0x36, 0xc5, 0x85, 0xa4, 0x3c,
	0xd1, 0xa7, 0xb8, 0x90, 0x24, 0x61, 0xf0, 0x68, 0xcf, 0x31, 0x32, 0xe8, 0xba, 0x1d, 0xcf, 0x6d,
	0xc4, 0x25, 0x90, 0x14, 0x40, 0x0e, 0xea, 0xef, 0xc5, 0xc9, 0x12, 0x89, 0x36, 0xda, 0xc9, 0x92,
	0xf2, 0x7d, 0xb4, 0x93, 0x25, 0x67, 0xf1, 0x68, 0xbf, 0xa1, 0x18, 0x4e, 0x96, 0xe7, 0x23, 0x5f,
	0x7a, 0x3f, 0x67, 0x5b, 0x78, 0x11, 0x8f, 0x46, 0xba, 0x85, 0x97, 0x64, 0xf8, 0x48, 0xb7, 0xf0,
	0xb2, 0xc4, 0x9d, 0x5e, 0x6a, 0x99, 0x1c, 0x54, 0xda, 0xf5, 0xfd, 0x9c, 0x05, 0xcb, 0xb2, 0x52,
	0xa3, 0x34, 0x58, 0xd6, 0x10, 0x7a, 0xa4, 0xc1, 0xb2, 0x8e, 0x66, 0x63, 0x5a, 0x89, 0xed, 0xf7,
	0xf0, 0x9d, 0x72, 0xf5, 0x4b, 0xc1, 0xc5, 0x15, 0x97, 0x33, 0xbf, 0xc7, 0x8e, 0x6c, 0x25, 0x9c,
	0x19, 0xe9, 0x91, 0xad, 0x9a, 0x9a, 0x23, 0x3d, 0xb2, 0xd5, 0x50, 0x71, 0xcc, 0x97, 0x13, 0x70,
	0xc7, 0xf1, 0x78, 0xe6, 0xea, 0x10, 0xf4, 0x83, 0x9b, 0x3b, 0x8c, 0x6b, 0x93, 0x9e, 0x96, 0x0f,
	0x0d, 0x34, 0x94, 0xe2, 0xc7, 0x60, 0xe5, 0x19, 0x89, 0xc0, 0xba, 0x91, 0xde, 0x28, 0x92, 0xd0,
	0x6c, 0xcc, 0x89, 0xc4, 0xb6, 0x03, 0x78, 0xbf, 0x6c, 0xab, 0x64, 0xbc, 0x9b, 0xb4, 0x49, 0xdf,
	0x34, 0xd0, 0x66, 0x81, 0x46, 0x83, 0x0f, 0x48, 0x43, 0xb4, 0x3c, 0x41, 0xa7, 0x72, 0xb0, 0xb8,
	0x61, 0x89, 0xf3, 0x61, 0x9b, 0x0f, 0x17, 0xbb, 0xe7, 0x93, 0xb6, 0xed, 0x0f, 0x59, 0x71, 0x38,
	0x43, 0xb8, 0x51, 0x87, 0x44, 0x39, 0x3a, 0x8f, 0x3a, 0x24, 0xca, 0xf3, 0x77, 0x4a, 0x84, 0x44,
	0x29, 0x7a, 0x4f, 0xda, 0xcc, 0x6f, 0xb1, 0x90, 0x28, 0x4b, 0xc2, 0xc1, 0xf2, 0xca, 0xb4, 0x94,
	0xc9, 0x23, 0x0d, 0x89, 0x54, 0xac, 0x9e, 0x82, 0x32, 0xb6, 0x48, 0xf7, 0x09, 0xf0, 0x5f, 0x18,
	0xe8, 0xb9, 0xb8, 0x8c, 0x96, 0x66, 0xde, 0xe0, 0xa3, 0xca, 0x32, 0x98, 0x84, 0xf7, 0x53, 0x39,
	0x56, 0xb2, 0x35, 0x18, 0x79, 0x25, 0x31, 0xf2, 0x3c, 0x3e, 0xab, 0xb9, 0x92, 0xe3, 0x37, 0xe8,
	0x35, 0x76, 0xe1, 0xa3, 0x8f, 0x73, 0xad, 0x1f, 0xa6, 0x2f, 0x16, 0x65, 0x88, 0x38, 0x9a, 0x8b,
	0x45, 0x72, 0x4a, 0x90, 0xe6, 0x62, 0x91, 0x82, 0xe3, 0xa3, 0xdd, 0x42, 0x01, 0x45, 0x3a, 0x95,
	0xca, 0x01, 0x49, 0x27, 0x4f, 0xc2, 0x44, 0xa4, 0xc9, 0x3a, 0x9a, 0x89, 0x90, 0x50, 0x85, 0x34,
	0x13, 0x21, 0x63, 0x00, 0x95, 0x99, 0x88, 0xf8, 0x52, 0x43, 0xce, 0xfe, 0xd8, 0xe3, 0xfe, 0x2b,
	0x0b, 0xa6, 0x95, 0xa4, 0x1d, 0x79, 0xbd, 0xaf, 0x80, 0x49, 0x24, 0xaf, 0xf7, 0x15, 0xf1, 0x82,
	0xf4, 0xf5, 0xbe, 0xf8, 0xef, 0xe3, 0x30, 0x72, 0x44, 0xa3, 0x1b, 0xf5, 0x67, 0x7f, 0xfb, 0x46,
	0x13, 0x54, 0xff, 0x27, 0xab, 0x63, 0xe8, 0x28, 0x3d, 0xd2, 0x3a, 0x46, 0x09, 0xb6, 0x91, 0xb4,
	0x8e, 0x51, 0x86, 0x3b, 0x64, 0xde, 0x4d, 0x70, 0xbe, 0x81, 0xaf, 0x49, 0x4f, 0x7c, 0x72, 0x70,
	0xad, 0xb0, 0x10, 0xeb, 0x4f, 0x59, 0x7c, 0xaa, 0x62, 0xff, 0x60, 0x5d, 0x45, 0x49, 0x35, 0x91,
	0x27, 0x7b, 0xea, 0x53, 0xa2, 0x24, 0xcd, 0x3f, 0x9c, 0xde, 0xa6, 0xf1, 0x97, 0x06, 0x1a, 0x8b,
	0xa7, 0x51, 0xca, 0x0c, 0x92, 0x9e, 0xda, 0x15, 0x53, 0x96, 0x2a, 0x67, 0x7a, 0xed, 0x06, 0x18,
	0xef, 0x24, 0x18, 0x6b, 0x78, 0x5a, 0x3a, 0x87, 0x59, 0xa8, 0x25, 0xa6, 0xf0, 0x1f, 0x98, 0x5b,
	0x94, 0x92, 0x88, 0xa4, 0x6e, 0x51, 0xc7, 0x68, 0x92, 0xba, 0x45, 0x2d, 0x3f, 0xc9, 0x7c, 0x2b,
	0x41, 0x35, 0x85, 0x5f, 0x53, 0x5d, 0xf8, 0x2a, 0x0d, 0xe7, 0x07, 0x2c, 0x5c, 0x95, 0x71, 0x83,
	0xa4, 0xe1, 0xaa, 0x86, 0xe8, 0x24, 0x0d, 0x57, 0x75, 0xfc, 0x25, 0xf3, 0xf5, 0x04, 0xcb, 0x05,
	0x7c, 0x2e, 0xe3, 0x1f, 0x65, 0xc4, 0x26, 0xb9, 0x83, 0xfc, 0x15, 0xbb, 0xe8, 0xa5, 0x65, 0x12,
	0x49, 0x2f, 0x7a, 0x95, 0xa1, 0x37, 0x49, 0x2f, 0x7a, 0x95, 0x22, 0x2d, 0x69, 0x3f, 0xb2, 0x38,
	0x60, 0x4d, 0x8e, 0x5a, 0x05, 0xf2, 0x8a, 0x1c, 0xe9, 0x7f, 0xb3, 0x73, 0xb9, 0x02, 0x8e, 0x10,
	0x3e, 0xaf, 0x31, 0x59, 0x4f, 0x5d, 0xaa, 0x5c, 0x58, 0x4e, 0xd7, 0x12, 0x9b, 0x43, 0x8c, 0x37,
	0x71, 0x9b, 0x3a, 0xc4, 0xbc, 0xc8, 0xfd, 0x5f, 0xec, 0xce, 0xb9, 0x9e, 0x03, 0x84, 0x75, 0x53,
	0xa4, 0x25, 0x26, 0x55, 0xce, 0x2f, 0xa3, 0x67, 0x2f, 0xb3, 0x1b, 0x3b, 0x98, 0x32, 0x60, 0xbf,
	0xdc, 0x87, 0x8e, 0xa4, 0xc0, 0x16, 0x31, 0x81, 0xf0, 0x94, 0xc6, 0xf8, 0x92, 0xfc, 0xa3, 0xca,
	0xe5, 0x15, 0xc9, 0x28, 0x71, 0xa8, 0x11, 0x0f, 0x45, 0x8e, 0xac, 0xd4, 0x08, 0x3d, 0x96, 0x8b,
	0xc6, 0x67, 0x4f, 0x34, 0x62, 0xae, 0xf0, 0x7b, 0xc9, 0x79, 0x16, 0x91, 0xf4, 0x90, 0x46, 0xcf,
	0x4c, 0x92, 0x1e, 0xd2, 0x14, 0x90, 0x94, 0xb4, 0x49, 0x53, 0x9a, 0xbd, 0x14, 0x21, 0x68, 0x25,
	0xd6, 0xfd, 0x80, 0x15, 0x6a, 0xe4, 0xec, 0x21, 0x69, 0xa1, 0x46, 0xcb, 0x54, 0xaa, 0x9c, 0xe8,
	0xa1, 0x47, 0x89, 0x63, 0xcb, 0x54, 0x71, 0x19, 0xb6, 0x3f, 0x20, 0xfa, 0x64, 0x4e, 0xfe, 0x2b,
	0x92, 0xb2, 0x38, 0x07, 0xa1, 0x35, 0x49, 0xca, 0x63, 0x52, 0x4c, 0x80, 0x96, 0xb8, 0xa4, 0x3d,
	0xb3, 0x4c, 0xc1, 0xe0, 0xbe, 0x33, 0x8f, 0x63, 0xaa, 0xfe, 0xd1, 0xa7, 0x63, 0xc6, 0x8f, 0x3e,
	0x1d, 0x33, 0xfe, 0xed, 0xd3, 0x31, 0xe3, 0xc3, 0xcf, 0xc6, 0x9e, 0xf9, 0xd1, 0x67, 0x63, 0xcf,
	0xfc, 0xf4, 0xb3, 0xb1, 0x67, 0x1e, 0x9c, 0x2b, 0xc9, 0x31, 0x7b, 0x9c, 0x52, 0x4b, 0xff, 0x6d,
	0xaa, 0xd9, 0x7e, 0xfa, 0x8f, 0x25, 0x9d, 0xfc, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x31, 0x85,
	0x68, 0xe8, 0x0c, 0x6b, 0x00, 0x00,
}

func (this *QueryTotalStakeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryTotalStakeResponse)
	if !ok {
		that2, ok := that.(QueryTotalStakeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	return true
}
func (this *QueryReputerStakeInTopicResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryReputerStakeInTopicResponse)
	if !ok {
		that2, ok := that.(QueryReputerStakeInTopicResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	return true
}
func (this *QueryStakeFromReputerInTopicInSelfResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryStakeFromReputerInTopicInSelfResponse)
	if !ok {
		that2, ok := that.(QueryStakeFromReputerInTopicInSelfResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	return true
}
func (this *QueryDelegateStakeInTopicInReputerResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryDelegateStakeInTopicInReputerResponse)
	if !ok {
		that2, ok := that.(QueryDelegateStakeInTopicInReputerResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	return true
}
func (this *QueryStakeFromDelegatorInTopicInReputerResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryStakeFromDelegatorInTopicInReputerResponse)
	if !ok {
		that2, ok := that.(QueryStakeFromDelegatorInTopicInReputerResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	return true
}
func (this *QueryStakeFromDelegatorInTopicResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryStakeFromDelegatorInTopicResponse)
	if !ok {
		that2, ok := that.(QueryStakeFromDelegatorInTopicResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	return true
}
func (this *QueryTopicStakeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryTopicStakeResponse)
	if !ok {
		that2, ok := that.(QueryTopicStakeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params returns the module parameters.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	GetNextTopicId(ctx context.Context, in *QueryNextTopicIdRequest, opts ...grpc.CallOption) (*QueryNextTopicIdResponse, error)
	GetTopic(ctx context.Context, in *QueryTopicRequest, opts ...grpc.CallOption) (*QueryTopicResponse, error)
	GetActiveTopics(ctx context.Context, in *QueryActiveTopicsRequest, opts ...grpc.CallOption) (*QueryActiveTopicsResponse, error)
	GetWorkerLatestInferenceByTopicId(ctx context.Context, in *QueryWorkerLatestInferenceRequest, opts ...grpc.CallOption) (*QueryWorkerLatestInferenceResponse, error)
	GetInferencesAtBlock(ctx context.Context, in *QueryInferencesAtBlockRequest, opts ...grpc.CallOption) (*QueryInferencesAtBlockResponse, error)
	GetLatestTopicInferences(ctx context.Context, in *QueryLatestTopicInferencesRequest, opts ...grpc.CallOption) (*QueryLatestTopicInferencesResponse, error)
	GetForecastsAtBlock(ctx context.Context, in *QueryForecastsAtBlockRequest, opts ...grpc.CallOption) (*QueryForecastsAtBlockResponse, error)
	GetNetworkLossBundleAtBlock(ctx context.Context, in *QueryNetworkLossBundleAtBlockRequest, opts ...grpc.CallOption) (*QueryNetworkLossBundleAtBlockResponse, error)
	GetTotalStake(ctx context.Context, in *QueryTotalStakeRequest, opts ...grpc.CallOption) (*QueryTotalStakeResponse, error)
	GetReputerStakeInTopic(ctx context.Context, in *QueryReputerStakeInTopicRequest, opts ...grpc.CallOption) (*QueryReputerStakeInTopicResponse, error)
	GetMultiReputerStakeInTopic(ctx context.Context, in *QueryMultiReputerStakeInTopicRequest, opts ...grpc.CallOption) (*QueryMultiReputerStakeInTopicResponse, error)
	GetStakeFromReputerInTopicInSelf(ctx context.Context, in *QueryStakeFromReputerInTopicInSelfRequest, opts ...grpc.CallOption) (*QueryStakeFromReputerInTopicInSelfResponse, error)
	GetDelegateStakeInTopicInReputer(ctx context.Context, in *QueryDelegateStakeInTopicInReputerRequest, opts ...grpc.CallOption) (*QueryDelegateStakeInTopicInReputerResponse, error)
	GetStakeFromDelegatorInTopicInReputer(ctx context.Context, in *QueryStakeFromDelegatorInTopicInReputerRequest, opts ...grpc.CallOption) (*QueryStakeFromDelegatorInTopicInReputerResponse, error)
	GetStakeFromDelegatorInTopic(ctx context.Context, in *QueryStakeFromDelegatorInTopicRequest, opts ...grpc.CallOption) (*QueryStakeFromDelegatorInTopicResponse, error)
	GetTopicStake(ctx context.Context, in *QueryTopicStakeRequest, opts ...grpc.CallOption) (*QueryTopicStakeResponse, error)
	GetStakeRemovalsUpUntilBlock(ctx context.Context, in *QueryStakeRemovalsUpUntilBlockRequest, opts ...grpc.CallOption) (*QueryStakeRemovalsUpUntilBlockResponse, error)
	GetDelegateStakeRemovalsUpUntilBlock(ctx context.Context, in *QueryDelegateStakeRemovalsUpUntilBlockRequest, opts ...grpc.CallOption) (*QueryDelegateStakeRemovalsUpUntilBlockResponse, error)
	GetStakeRemovalInfo(ctx context.Context, in *QueryStakeRemovalInfoRequest, opts ...grpc.CallOption) (*QueryStakeRemovalInfoResponse, error)
	GetDelegateStakeRemovalInfo(ctx context.Context, in *QueryDelegateStakeRemovalInfoRequest, opts ...grpc.CallOption) (*QueryDelegateStakeRemovalInfoResponse, error)
	GetWorkerNodeInfo(ctx context.Context, in *QueryWorkerNodeInfoRequest, opts ...grpc.CallOption) (*QueryWorkerNodeInfoResponse, error)
	GetReputerNodeInfo(ctx context.Context, in *QueryReputerNodeInfoRequest, opts ...grpc.CallOption) (*QueryReputerNodeInfoResponse, error)
	IsWorkerRegisteredInTopicId(ctx context.Context, in *QueryIsWorkerRegisteredInTopicIdRequest, opts ...grpc.CallOption) (*QueryIsWorkerRegisteredInTopicIdResponse, error)
	IsReputerRegisteredInTopicId(ctx context.Context, in *QueryIsReputerRegisteredInTopicIdRequest, opts ...grpc.CallOption) (*QueryIsReputerRegisteredInTopicIdResponse, error)
	GetNetworkInferencesAtBlock(ctx context.Context, in *QueryNetworkInferencesAtBlockRequest, opts ...grpc.CallOption) (*QueryNetworkInferencesAtBlockResponse, error)
	GetLatestNetworkInference(ctx context.Context, in *QueryLatestNetworkInferencesRequest, opts ...grpc.CallOption) (*QueryLatestNetworkInferencesResponse, error)
	GetLatestAvailableNetworkInference(ctx context.Context, in *QueryLatestNetworkInferencesRequest, opts ...grpc.CallOption) (*QueryLatestNetworkInferencesResponse, error)
	IsWorkerNonceUnfulfilled(ctx context.Context, in *QueryIsWorkerNonceUnfulfilledRequest, opts ...grpc.CallOption) (*QueryIsWorkerNonceUnfulfilledResponse, error)
	IsReputerNonceUnfulfilled(ctx context.Context, in *QueryIsReputerNonceUnfulfilledRequest, opts ...grpc.CallOption) (*QueryIsReputerNonceUnfulfilledResponse, error)
	GetUnfulfilledWorkerNonces(ctx context.Context, in *QueryUnfulfilledWorkerNoncesRequest, opts ...grpc.CallOption) (*QueryUnfulfilledWorkerNoncesResponse, error)
	GetUnfulfilledReputerNonces(ctx context.Context, in *QueryUnfulfilledReputerNoncesRequest, opts ...grpc.CallOption) (*QueryUnfulfilledReputerNoncesResponse, error)
	GetInfererNetworkRegret(ctx context.Context, in *QueryInfererNetworkRegretRequest, opts ...grpc.CallOption) (*QueryInfererNetworkRegretResponse, error)
	GetForecasterNetworkRegret(ctx context.Context, in *QueryForecasterNetworkRegretRequest, opts ...grpc.CallOption) (*QueryForecasterNetworkRegretResponse, error)
	GetOneInForecasterNetworkRegret(ctx context.Context, in *QueryOneInForecasterNetworkRegretRequest, opts ...grpc.CallOption) (*QueryOneInForecasterNetworkRegretResponse, error)
	GetOneInForecasterSelfNetworkRegret(ctx context.Context, in *QueryOneInForecasterSelfNetworkRegretRequest, opts ...grpc.CallOption) (*QueryOneInForecasterSelfNetworkRegretResponse, error)
	IsWhitelistAdmin(ctx context.Context, in *QueryIsWhitelistAdminRequest, opts ...grpc.CallOption) (*QueryIsWhitelistAdminResponse, error)
	GetTopicLastWorkerCommitInfo(ctx context.Context, in *QueryTopicLastCommitRequest, opts ...grpc.CallOption) (*QueryTopicLastCommitResponse, error)
	GetTopicLastReputerCommitInfo(ctx context.Context, in *QueryTopicLastCommitRequest, opts ...grpc.CallOption) (*QueryTopicLastCommitResponse, error)
	GetTopicRewardNonce(ctx context.Context, in *QueryTopicRewardNonceRequest, opts ...grpc.CallOption) (*QueryTopicRewardNonceResponse, error)
	GetReputerLossBundlesAtBlock(ctx context.Context, in *QueryReputerLossBundlesAtBlockRequest, opts ...grpc.CallOption) (*QueryReputerLossBundlesAtBlockResponse, error)
	GetStakeReputerAuthority(ctx context.Context, in *QueryStakeReputerAuthorityRequest, opts ...grpc.CallOption) (*QueryStakeReputerAuthorityResponse, error)
	GetDelegateStakePlacement(ctx context.Context, in *QueryDelegateStakePlacementRequest, opts ...grpc.CallOption) (*QueryDelegateStakePlacementResponse, error)
	GetDelegateStakeUponReputer(ctx context.Context, in *QueryDelegateStakeUponReputerRequest, opts ...grpc.CallOption) (*QueryDelegateStakeUponReputerResponse, error)
	GetDelegateRewardPerShare(ctx context.Context, in *QueryDelegateRewardPerShareRequest, opts ...grpc.CallOption) (*QueryDelegateRewardPerShareResponse, error)
	GetStakeRemovalForReputerAndTopicId(ctx context.Context, in *QueryStakeRemovalForReputerAndTopicIdRequest, opts ...grpc.CallOption) (*QueryStakeRemovalForReputerAndTopicIdResponse, error)
	GetDelegateStakeRemoval(ctx context.Context, in *QueryDelegateStakeRemovalRequest, opts ...grpc.CallOption) (*QueryDelegateStakeRemovalResponse, error)
	GetPreviousTopicWeight(ctx context.Context, in *QueryPreviousTopicWeightRequest, opts ...grpc.CallOption) (*QueryPreviousTopicWeightResponse, error)
	TopicExists(ctx context.Context, in *QueryTopicExistsRequest, opts ...grpc.CallOption) (*QueryTopicExistsResponse, error)
	IsTopicActive(ctx context.Context, in *QueryIsTopicActiveRequest, opts ...grpc.CallOption) (*QueryIsTopicActiveResponse, error)
	GetTopicFeeRevenue(ctx context.Context, in *QueryTopicFeeRevenueRequest, opts ...grpc.CallOption) (*QueryTopicFeeRevenueResponse, error)
	GetRewardableTopics(ctx context.Context, in *QueryRewardableTopicsRequest, opts ...grpc.CallOption) (*QueryRewardableTopicsResponse, error)
	GetLatestInfererScore(ctx context.Context, in *QueryLatestInfererScoreRequest, opts ...grpc.CallOption) (*QueryLatestInfererScoreResponse, error)
	GetLatestForecasterScore(ctx context.Context, in *QueryLatestForecasterScoreRequest, opts ...grpc.CallOption) (*QueryLatestForecasterScoreResponse, error)
	GetLatestReputerScore(ctx context.Context, in *QueryLatestReputerScoreRequest, opts ...grpc.CallOption) (*QueryLatestReputerScoreResponse, error)
	GetInferenceScoresUntilBlock(ctx context.Context, in *QueryInferenceScoresUntilBlockRequest, opts ...grpc.CallOption) (*QueryInferenceScoresUntilBlockResponse, error)
	GetWorkerInferenceScoresAtBlock(ctx context.Context, in *QueryWorkerInferenceScoresAtBlockRequest, opts ...grpc.CallOption) (*QueryWorkerInferenceScoresAtBlockResponse, error)
	GetForecastScoresUntilBlock(ctx context.Context, in *QueryForecastScoresUntilBlockRequest, opts ...grpc.CallOption) (*QueryForecastScoresUntilBlockResponse, error)
	GetWorkerForecastScoresAtBlock(ctx context.Context, in *QueryWorkerForecastScoresAtBlockRequest, opts ...grpc.CallOption) (*QueryWorkerForecastScoresAtBlockResponse, error)
	GetReputersScoresAtBlock(ctx context.Context, in *QueryReputersScoresAtBlockRequest, opts ...grpc.CallOption) (*QueryReputersScoresAtBlockResponse, error)
	GetListeningCoefficient(ctx context.Context, in *QueryListeningCoefficientRequest, opts ...grpc.CallOption) (*QueryListeningCoefficientResponse, error)
	GetPreviousReputerRewardFraction(ctx context.Context, in *QueryPreviousReputerRewardFractionRequest, opts ...grpc.CallOption) (*QueryPreviousReputerRewardFractionResponse, error)
	GetPreviousInferenceRewardFraction(ctx context.Context, in *QueryPreviousInferenceRewardFractionRequest, opts ...grpc.CallOption) (*QueryPreviousInferenceRewardFractionResponse, error)
	GetPreviousForecastRewardFraction(ctx context.Context, in *QueryPreviousForecastRewardFractionRequest, opts ...grpc.CallOption) (*QueryPreviousForecastRewardFractionResponse, error)
	GetPreviousPercentageRewardToStakedReputers(ctx context.Context, in *QueryPreviousPercentageRewardToStakedReputersRequest, opts ...grpc.CallOption) (*QueryPreviousPercentageRewardToStakedReputersResponse, error)
	GetTotalRewardToDistribute(ctx context.Context, in *QueryTotalRewardToDistributeRequest, opts ...grpc.CallOption) (*QueryTotalRewardToDistributeResponse, error)
	GetTopicLastWorkerPayload(ctx context.Context, in *QueryTopicLastWorkerPayloadRequest, opts ...grpc.CallOption) (*QueryTopicLastWorkerPayloadResponse, error)
	GetTopicLastReputerPayload(ctx context.Context, in *QueryTopicLastReputerPayloadRequest, opts ...grpc.CallOption) (*QueryTopicLastReputerPayloadResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetNextTopicId(ctx context.Context, in *QueryNextTopicIdRequest, opts ...grpc.CallOption) (*QueryNextTopicIdResponse, error) {
	out := new(QueryNextTopicIdResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetNextTopicId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTopic(ctx context.Context, in *QueryTopicRequest, opts ...grpc.CallOption) (*QueryTopicResponse, error) {
	out := new(QueryTopicResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetActiveTopics(ctx context.Context, in *QueryActiveTopicsRequest, opts ...grpc.CallOption) (*QueryActiveTopicsResponse, error) {
	out := new(QueryActiveTopicsResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetActiveTopics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetWorkerLatestInferenceByTopicId(ctx context.Context, in *QueryWorkerLatestInferenceRequest, opts ...grpc.CallOption) (*QueryWorkerLatestInferenceResponse, error) {
	out := new(QueryWorkerLatestInferenceResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetWorkerLatestInferenceByTopicId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetInferencesAtBlock(ctx context.Context, in *QueryInferencesAtBlockRequest, opts ...grpc.CallOption) (*QueryInferencesAtBlockResponse, error) {
	out := new(QueryInferencesAtBlockResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetInferencesAtBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLatestTopicInferences(ctx context.Context, in *QueryLatestTopicInferencesRequest, opts ...grpc.CallOption) (*QueryLatestTopicInferencesResponse, error) {
	out := new(QueryLatestTopicInferencesResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetLatestTopicInferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetForecastsAtBlock(ctx context.Context, in *QueryForecastsAtBlockRequest, opts ...grpc.CallOption) (*QueryForecastsAtBlockResponse, error) {
	out := new(QueryForecastsAtBlockResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetForecastsAtBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetNetworkLossBundleAtBlock(ctx context.Context, in *QueryNetworkLossBundleAtBlockRequest, opts ...grpc.CallOption) (*QueryNetworkLossBundleAtBlockResponse, error) {
	out := new(QueryNetworkLossBundleAtBlockResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetNetworkLossBundleAtBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTotalStake(ctx context.Context, in *QueryTotalStakeRequest, opts ...grpc.CallOption) (*QueryTotalStakeResponse, error) {
	out := new(QueryTotalStakeResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetTotalStake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetReputerStakeInTopic(ctx context.Context, in *QueryReputerStakeInTopicRequest, opts ...grpc.CallOption) (*QueryReputerStakeInTopicResponse, error) {
	out := new(QueryReputerStakeInTopicResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetReputerStakeInTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetMultiReputerStakeInTopic(ctx context.Context, in *QueryMultiReputerStakeInTopicRequest, opts ...grpc.CallOption) (*QueryMultiReputerStakeInTopicResponse, error) {
	out := new(QueryMultiReputerStakeInTopicResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetMultiReputerStakeInTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetStakeFromReputerInTopicInSelf(ctx context.Context, in *QueryStakeFromReputerInTopicInSelfRequest, opts ...grpc.CallOption) (*QueryStakeFromReputerInTopicInSelfResponse, error) {
	out := new(QueryStakeFromReputerInTopicInSelfResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetStakeFromReputerInTopicInSelf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDelegateStakeInTopicInReputer(ctx context.Context, in *QueryDelegateStakeInTopicInReputerRequest, opts ...grpc.CallOption) (*QueryDelegateStakeInTopicInReputerResponse, error) {
	out := new(QueryDelegateStakeInTopicInReputerResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetDelegateStakeInTopicInReputer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetStakeFromDelegatorInTopicInReputer(ctx context.Context, in *QueryStakeFromDelegatorInTopicInReputerRequest, opts ...grpc.CallOption) (*QueryStakeFromDelegatorInTopicInReputerResponse, error) {
	out := new(QueryStakeFromDelegatorInTopicInReputerResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetStakeFromDelegatorInTopicInReputer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetStakeFromDelegatorInTopic(ctx context.Context, in *QueryStakeFromDelegatorInTopicRequest, opts ...grpc.CallOption) (*QueryStakeFromDelegatorInTopicResponse, error) {
	out := new(QueryStakeFromDelegatorInTopicResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetStakeFromDelegatorInTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTopicStake(ctx context.Context, in *QueryTopicStakeRequest, opts ...grpc.CallOption) (*QueryTopicStakeResponse, error) {
	out := new(QueryTopicStakeResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetTopicStake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetStakeRemovalsUpUntilBlock(ctx context.Context, in *QueryStakeRemovalsUpUntilBlockRequest, opts ...grpc.CallOption) (*QueryStakeRemovalsUpUntilBlockResponse, error) {
	out := new(QueryStakeRemovalsUpUntilBlockResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetStakeRemovalsUpUntilBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDelegateStakeRemovalsUpUntilBlock(ctx context.Context, in *QueryDelegateStakeRemovalsUpUntilBlockRequest, opts ...grpc.CallOption) (*QueryDelegateStakeRemovalsUpUntilBlockResponse, error) {
	out := new(QueryDelegateStakeRemovalsUpUntilBlockResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetDelegateStakeRemovalsUpUntilBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetStakeRemovalInfo(ctx context.Context, in *QueryStakeRemovalInfoRequest, opts ...grpc.CallOption) (*QueryStakeRemovalInfoResponse, error) {
	out := new(QueryStakeRemovalInfoResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetStakeRemovalInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDelegateStakeRemovalInfo(ctx context.Context, in *QueryDelegateStakeRemovalInfoRequest, opts ...grpc.CallOption) (*QueryDelegateStakeRemovalInfoResponse, error) {
	out := new(QueryDelegateStakeRemovalInfoResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetDelegateStakeRemovalInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetWorkerNodeInfo(ctx context.Context, in *QueryWorkerNodeInfoRequest, opts ...grpc.CallOption) (*QueryWorkerNodeInfoResponse, error) {
	out := new(QueryWorkerNodeInfoResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetWorkerNodeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetReputerNodeInfo(ctx context.Context, in *QueryReputerNodeInfoRequest, opts ...grpc.CallOption) (*QueryReputerNodeInfoResponse, error) {
	out := new(QueryReputerNodeInfoResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetReputerNodeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IsWorkerRegisteredInTopicId(ctx context.Context, in *QueryIsWorkerRegisteredInTopicIdRequest, opts ...grpc.CallOption) (*QueryIsWorkerRegisteredInTopicIdResponse, error) {
	out := new(QueryIsWorkerRegisteredInTopicIdResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/IsWorkerRegisteredInTopicId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IsReputerRegisteredInTopicId(ctx context.Context, in *QueryIsReputerRegisteredInTopicIdRequest, opts ...grpc.CallOption) (*QueryIsReputerRegisteredInTopicIdResponse, error) {
	out := new(QueryIsReputerRegisteredInTopicIdResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/IsReputerRegisteredInTopicId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetNetworkInferencesAtBlock(ctx context.Context, in *QueryNetworkInferencesAtBlockRequest, opts ...grpc.CallOption) (*QueryNetworkInferencesAtBlockResponse, error) {
	out := new(QueryNetworkInferencesAtBlockResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetNetworkInferencesAtBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLatestNetworkInference(ctx context.Context, in *QueryLatestNetworkInferencesRequest, opts ...grpc.CallOption) (*QueryLatestNetworkInferencesResponse, error) {
	out := new(QueryLatestNetworkInferencesResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetLatestNetworkInference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLatestAvailableNetworkInference(ctx context.Context, in *QueryLatestNetworkInferencesRequest, opts ...grpc.CallOption) (*QueryLatestNetworkInferencesResponse, error) {
	out := new(QueryLatestNetworkInferencesResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetLatestAvailableNetworkInference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IsWorkerNonceUnfulfilled(ctx context.Context, in *QueryIsWorkerNonceUnfulfilledRequest, opts ...grpc.CallOption) (*QueryIsWorkerNonceUnfulfilledResponse, error) {
	out := new(QueryIsWorkerNonceUnfulfilledResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/IsWorkerNonceUnfulfilled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IsReputerNonceUnfulfilled(ctx context.Context, in *QueryIsReputerNonceUnfulfilledRequest, opts ...grpc.CallOption) (*QueryIsReputerNonceUnfulfilledResponse, error) {
	out := new(QueryIsReputerNonceUnfulfilledResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/IsReputerNonceUnfulfilled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetUnfulfilledWorkerNonces(ctx context.Context, in *QueryUnfulfilledWorkerNoncesRequest, opts ...grpc.CallOption) (*QueryUnfulfilledWorkerNoncesResponse, error) {
	out := new(QueryUnfulfilledWorkerNoncesResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetUnfulfilledWorkerNonces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetUnfulfilledReputerNonces(ctx context.Context, in *QueryUnfulfilledReputerNoncesRequest, opts ...grpc.CallOption) (*QueryUnfulfilledReputerNoncesResponse, error) {
	out := new(QueryUnfulfilledReputerNoncesResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetUnfulfilledReputerNonces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetInfererNetworkRegret(ctx context.Context, in *QueryInfererNetworkRegretRequest, opts ...grpc.CallOption) (*QueryInfererNetworkRegretResponse, error) {
	out := new(QueryInfererNetworkRegretResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetInfererNetworkRegret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetForecasterNetworkRegret(ctx context.Context, in *QueryForecasterNetworkRegretRequest, opts ...grpc.CallOption) (*QueryForecasterNetworkRegretResponse, error) {
	out := new(QueryForecasterNetworkRegretResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetForecasterNetworkRegret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetOneInForecasterNetworkRegret(ctx context.Context, in *QueryOneInForecasterNetworkRegretRequest, opts ...grpc.CallOption) (*QueryOneInForecasterNetworkRegretResponse, error) {
	out := new(QueryOneInForecasterNetworkRegretResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetOneInForecasterNetworkRegret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetOneInForecasterSelfNetworkRegret(ctx context.Context, in *QueryOneInForecasterSelfNetworkRegretRequest, opts ...grpc.CallOption) (*QueryOneInForecasterSelfNetworkRegretResponse, error) {
	out := new(QueryOneInForecasterSelfNetworkRegretResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetOneInForecasterSelfNetworkRegret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IsWhitelistAdmin(ctx context.Context, in *QueryIsWhitelistAdminRequest, opts ...grpc.CallOption) (*QueryIsWhitelistAdminResponse, error) {
	out := new(QueryIsWhitelistAdminResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/IsWhitelistAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTopicLastWorkerCommitInfo(ctx context.Context, in *QueryTopicLastCommitRequest, opts ...grpc.CallOption) (*QueryTopicLastCommitResponse, error) {
	out := new(QueryTopicLastCommitResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetTopicLastWorkerCommitInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTopicLastReputerCommitInfo(ctx context.Context, in *QueryTopicLastCommitRequest, opts ...grpc.CallOption) (*QueryTopicLastCommitResponse, error) {
	out := new(QueryTopicLastCommitResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetTopicLastReputerCommitInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTopicRewardNonce(ctx context.Context, in *QueryTopicRewardNonceRequest, opts ...grpc.CallOption) (*QueryTopicRewardNonceResponse, error) {
	out := new(QueryTopicRewardNonceResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetTopicRewardNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetReputerLossBundlesAtBlock(ctx context.Context, in *QueryReputerLossBundlesAtBlockRequest, opts ...grpc.CallOption) (*QueryReputerLossBundlesAtBlockResponse, error) {
	out := new(QueryReputerLossBundlesAtBlockResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetReputerLossBundlesAtBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetStakeReputerAuthority(ctx context.Context, in *QueryStakeReputerAuthorityRequest, opts ...grpc.CallOption) (*QueryStakeReputerAuthorityResponse, error) {
	out := new(QueryStakeReputerAuthorityResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetStakeReputerAuthority", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDelegateStakePlacement(ctx context.Context, in *QueryDelegateStakePlacementRequest, opts ...grpc.CallOption) (*QueryDelegateStakePlacementResponse, error) {
	out := new(QueryDelegateStakePlacementResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetDelegateStakePlacement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDelegateStakeUponReputer(ctx context.Context, in *QueryDelegateStakeUponReputerRequest, opts ...grpc.CallOption) (*QueryDelegateStakeUponReputerResponse, error) {
	out := new(QueryDelegateStakeUponReputerResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetDelegateStakeUponReputer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDelegateRewardPerShare(ctx context.Context, in *QueryDelegateRewardPerShareRequest, opts ...grpc.CallOption) (*QueryDelegateRewardPerShareResponse, error) {
	out := new(QueryDelegateRewardPerShareResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetDelegateRewardPerShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetStakeRemovalForReputerAndTopicId(ctx context.Context, in *QueryStakeRemovalForReputerAndTopicIdRequest, opts ...grpc.CallOption) (*QueryStakeRemovalForReputerAndTopicIdResponse, error) {
	out := new(QueryStakeRemovalForReputerAndTopicIdResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetStakeRemovalForReputerAndTopicId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDelegateStakeRemoval(ctx context.Context, in *QueryDelegateStakeRemovalRequest, opts ...grpc.CallOption) (*QueryDelegateStakeRemovalResponse, error) {
	out := new(QueryDelegateStakeRemovalResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetDelegateStakeRemoval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPreviousTopicWeight(ctx context.Context, in *QueryPreviousTopicWeightRequest, opts ...grpc.CallOption) (*QueryPreviousTopicWeightResponse, error) {
	out := new(QueryPreviousTopicWeightResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetPreviousTopicWeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TopicExists(ctx context.Context, in *QueryTopicExistsRequest, opts ...grpc.CallOption) (*QueryTopicExistsResponse, error) {
	out := new(QueryTopicExistsResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/TopicExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IsTopicActive(ctx context.Context, in *QueryIsTopicActiveRequest, opts ...grpc.CallOption) (*QueryIsTopicActiveResponse, error) {
	out := new(QueryIsTopicActiveResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/IsTopicActive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTopicFeeRevenue(ctx context.Context, in *QueryTopicFeeRevenueRequest, opts ...grpc.CallOption) (*QueryTopicFeeRevenueResponse, error) {
	out := new(QueryTopicFeeRevenueResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetTopicFeeRevenue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetRewardableTopics(ctx context.Context, in *QueryRewardableTopicsRequest, opts ...grpc.CallOption) (*QueryRewardableTopicsResponse, error) {
	out := new(QueryRewardableTopicsResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetRewardableTopics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLatestInfererScore(ctx context.Context, in *QueryLatestInfererScoreRequest, opts ...grpc.CallOption) (*QueryLatestInfererScoreResponse, error) {
	out := new(QueryLatestInfererScoreResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetLatestInfererScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLatestForecasterScore(ctx context.Context, in *QueryLatestForecasterScoreRequest, opts ...grpc.CallOption) (*QueryLatestForecasterScoreResponse, error) {
	out := new(QueryLatestForecasterScoreResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetLatestForecasterScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLatestReputerScore(ctx context.Context, in *QueryLatestReputerScoreRequest, opts ...grpc.CallOption) (*QueryLatestReputerScoreResponse, error) {
	out := new(QueryLatestReputerScoreResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetLatestReputerScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetInferenceScoresUntilBlock(ctx context.Context, in *QueryInferenceScoresUntilBlockRequest, opts ...grpc.CallOption) (*QueryInferenceScoresUntilBlockResponse, error) {
	out := new(QueryInferenceScoresUntilBlockResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetInferenceScoresUntilBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetWorkerInferenceScoresAtBlock(ctx context.Context, in *QueryWorkerInferenceScoresAtBlockRequest, opts ...grpc.CallOption) (*QueryWorkerInferenceScoresAtBlockResponse, error) {
	out := new(QueryWorkerInferenceScoresAtBlockResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetWorkerInferenceScoresAtBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetForecastScoresUntilBlock(ctx context.Context, in *QueryForecastScoresUntilBlockRequest, opts ...grpc.CallOption) (*QueryForecastScoresUntilBlockResponse, error) {
	out := new(QueryForecastScoresUntilBlockResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetForecastScoresUntilBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetWorkerForecastScoresAtBlock(ctx context.Context, in *QueryWorkerForecastScoresAtBlockRequest, opts ...grpc.CallOption) (*QueryWorkerForecastScoresAtBlockResponse, error) {
	out := new(QueryWorkerForecastScoresAtBlockResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetWorkerForecastScoresAtBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetReputersScoresAtBlock(ctx context.Context, in *QueryReputersScoresAtBlockRequest, opts ...grpc.CallOption) (*QueryReputersScoresAtBlockResponse, error) {
	out := new(QueryReputersScoresAtBlockResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetReputersScoresAtBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetListeningCoefficient(ctx context.Context, in *QueryListeningCoefficientRequest, opts ...grpc.CallOption) (*QueryListeningCoefficientResponse, error) {
	out := new(QueryListeningCoefficientResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetListeningCoefficient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPreviousReputerRewardFraction(ctx context.Context, in *QueryPreviousReputerRewardFractionRequest, opts ...grpc.CallOption) (*QueryPreviousReputerRewardFractionResponse, error) {
	out := new(QueryPreviousReputerRewardFractionResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetPreviousReputerRewardFraction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPreviousInferenceRewardFraction(ctx context.Context, in *QueryPreviousInferenceRewardFractionRequest, opts ...grpc.CallOption) (*QueryPreviousInferenceRewardFractionResponse, error) {
	out := new(QueryPreviousInferenceRewardFractionResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetPreviousInferenceRewardFraction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPreviousForecastRewardFraction(ctx context.Context, in *QueryPreviousForecastRewardFractionRequest, opts ...grpc.CallOption) (*QueryPreviousForecastRewardFractionResponse, error) {
	out := new(QueryPreviousForecastRewardFractionResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetPreviousForecastRewardFraction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPreviousPercentageRewardToStakedReputers(ctx context.Context, in *QueryPreviousPercentageRewardToStakedReputersRequest, opts ...grpc.CallOption) (*QueryPreviousPercentageRewardToStakedReputersResponse, error) {
	out := new(QueryPreviousPercentageRewardToStakedReputersResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetPreviousPercentageRewardToStakedReputers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTotalRewardToDistribute(ctx context.Context, in *QueryTotalRewardToDistributeRequest, opts ...grpc.CallOption) (*QueryTotalRewardToDistributeResponse, error) {
	out := new(QueryTotalRewardToDistributeResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetTotalRewardToDistribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTopicLastWorkerPayload(ctx context.Context, in *QueryTopicLastWorkerPayloadRequest, opts ...grpc.CallOption) (*QueryTopicLastWorkerPayloadResponse, error) {
	out := new(QueryTopicLastWorkerPayloadResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetTopicLastWorkerPayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTopicLastReputerPayload(ctx context.Context, in *QueryTopicLastReputerPayloadRequest, opts ...grpc.CallOption) (*QueryTopicLastReputerPayloadResponse, error) {
	out := new(QueryTopicLastReputerPayloadResponse)
	err := c.cc.Invoke(ctx, "/emissions.v1.Query/GetTopicLastReputerPayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params returns the module parameters.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	GetNextTopicId(context.Context, *QueryNextTopicIdRequest) (*QueryNextTopicIdResponse, error)
	GetTopic(context.Context, *QueryTopicRequest) (*QueryTopicResponse, error)
	GetActiveTopics(context.Context, *QueryActiveTopicsRequest) (*QueryActiveTopicsResponse, error)
	GetWorkerLatestInferenceByTopicId(context.Context, *QueryWorkerLatestInferenceRequest) (*QueryWorkerLatestInferenceResponse, error)
	GetInferencesAtBlock(context.Context, *QueryInferencesAtBlockRequest) (*QueryInferencesAtBlockResponse, error)
	GetLatestTopicInferences(context.Context, *QueryLatestTopicInferencesRequest) (*QueryLatestTopicInferencesResponse, error)
	GetForecastsAtBlock(context.Context, *QueryForecastsAtBlockRequest) (*QueryForecastsAtBlockResponse, error)
	GetNetworkLossBundleAtBlock(context.Context, *QueryNetworkLossBundleAtBlockRequest) (*QueryNetworkLossBundleAtBlockResponse, error)
	GetTotalStake(context.Context, *QueryTotalStakeRequest) (*QueryTotalStakeResponse, error)
	GetReputerStakeInTopic(context.Context, *QueryReputerStakeInTopicRequest) (*QueryReputerStakeInTopicResponse, error)
	GetMultiReputerStakeInTopic(context.Context, *QueryMultiReputerStakeInTopicRequest) (*QueryMultiReputerStakeInTopicResponse, error)
	GetStakeFromReputerInTopicInSelf(context.Context, *QueryStakeFromReputerInTopicInSelfRequest) (*QueryStakeFromReputerInTopicInSelfResponse, error)
	GetDelegateStakeInTopicInReputer(context.Context, *QueryDelegateStakeInTopicInReputerRequest) (*QueryDelegateStakeInTopicInReputerResponse, error)
	GetStakeFromDelegatorInTopicInReputer(context.Context, *QueryStakeFromDelegatorInTopicInReputerRequest) (*QueryStakeFromDelegatorInTopicInReputerResponse, error)
	GetStakeFromDelegatorInTopic(context.Context, *QueryStakeFromDelegatorInTopicRequest) (*QueryStakeFromDelegatorInTopicResponse, error)
	GetTopicStake(context.Context, *QueryTopicStakeRequest) (*QueryTopicStakeResponse, error)
	GetStakeRemovalsUpUntilBlock(context.Context, *QueryStakeRemovalsUpUntilBlockRequest) (*QueryStakeRemovalsUpUntilBlockResponse, error)
	GetDelegateStakeRemovalsUpUntilBlock(context.Context, *QueryDelegateStakeRemovalsUpUntilBlockRequest) (*QueryDelegateStakeRemovalsUpUntilBlockResponse, error)
	GetStakeRemovalInfo(context.Context, *QueryStakeRemovalInfoRequest) (*QueryStakeRemovalInfoResponse, error)
	GetDelegateStakeRemovalInfo(context.Context, *QueryDelegateStakeRemovalInfoRequest) (*QueryDelegateStakeRemovalInfoResponse, error)
	GetWorkerNodeInfo(context.Context, *QueryWorkerNodeInfoRequest) (*QueryWorkerNodeInfoResponse, error)
	GetReputerNodeInfo(context.Context, *QueryReputerNodeInfoRequest) (*QueryReputerNodeInfoResponse, error)
	IsWorkerRegisteredInTopicId(context.Context, *QueryIsWorkerRegisteredInTopicIdRequest) (*QueryIsWorkerRegisteredInTopicIdResponse, error)
	IsReputerRegisteredInTopicId(context.Context, *QueryIsReputerRegisteredInTopicIdRequest) (*QueryIsReputerRegisteredInTopicIdResponse, error)
	GetNetworkInferencesAtBlock(context.Context, *QueryNetworkInferencesAtBlockRequest) (*QueryNetworkInferencesAtBlockResponse, error)
	GetLatestNetworkInference(context.Context, *QueryLatestNetworkInferencesRequest) (*QueryLatestNetworkInferencesResponse, error)
	GetLatestAvailableNetworkInference(context.Context, *QueryLatestNetworkInferencesRequest) (*QueryLatestNetworkInferencesResponse, error)
	IsWorkerNonceUnfulfilled(context.Context, *QueryIsWorkerNonceUnfulfilledRequest) (*QueryIsWorkerNonceUnfulfilledResponse, error)
	IsReputerNonceUnfulfilled(context.Context, *QueryIsReputerNonceUnfulfilledRequest) (*QueryIsReputerNonceUnfulfilledResponse, error)
	GetUnfulfilledWorkerNonces(context.Context, *QueryUnfulfilledWorkerNoncesRequest) (*QueryUnfulfilledWorkerNoncesResponse, error)
	GetUnfulfilledReputerNonces(context.Context, *QueryUnfulfilledReputerNoncesRequest) (*QueryUnfulfilledReputerNoncesResponse, error)
	GetInfererNetworkRegret(context.Context, *QueryInfererNetworkRegretRequest) (*QueryInfererNetworkRegretResponse, error)
	GetForecasterNetworkRegret(context.Context, *QueryForecasterNetworkRegretRequest) (*QueryForecasterNetworkRegretResponse, error)
	GetOneInForecasterNetworkRegret(context.Context, *QueryOneInForecasterNetworkRegretRequest) (*QueryOneInForecasterNetworkRegretResponse, error)
	GetOneInForecasterSelfNetworkRegret(context.Context, *QueryOneInForecasterSelfNetworkRegretRequest) (*QueryOneInForecasterSelfNetworkRegretResponse, error)
	IsWhitelistAdmin(context.Context, *QueryIsWhitelistAdminRequest) (*QueryIsWhitelistAdminResponse, error)
	GetTopicLastWorkerCommitInfo(context.Context, *QueryTopicLastCommitRequest) (*QueryTopicLastCommitResponse, error)
	GetTopicLastReputerCommitInfo(context.Context, *QueryTopicLastCommitRequest) (*QueryTopicLastCommitResponse, error)
	GetTopicRewardNonce(context.Context, *QueryTopicRewardNonceRequest) (*QueryTopicRewardNonceResponse, error)
	GetReputerLossBundlesAtBlock(context.Context, *QueryReputerLossBundlesAtBlockRequest) (*QueryReputerLossBundlesAtBlockResponse, error)
	GetStakeReputerAuthority(context.Context, *QueryStakeReputerAuthorityRequest) (*QueryStakeReputerAuthorityResponse, error)
	GetDelegateStakePlacement(context.Context, *QueryDelegateStakePlacementRequest) (*QueryDelegateStakePlacementResponse, error)
	GetDelegateStakeUponReputer(context.Context, *QueryDelegateStakeUponReputerRequest) (*QueryDelegateStakeUponReputerResponse, error)
	GetDelegateRewardPerShare(context.Context, *QueryDelegateRewardPerShareRequest) (*QueryDelegateRewardPerShareResponse, error)
	GetStakeRemovalForReputerAndTopicId(context.Context, *QueryStakeRemovalForReputerAndTopicIdRequest) (*QueryStakeRemovalForReputerAndTopicIdResponse, error)
	GetDelegateStakeRemoval(context.Context, *QueryDelegateStakeRemovalRequest) (*QueryDelegateStakeRemovalResponse, error)
	GetPreviousTopicWeight(context.Context, *QueryPreviousTopicWeightRequest) (*QueryPreviousTopicWeightResponse, error)
	TopicExists(context.Context, *QueryTopicExistsRequest) (*QueryTopicExistsResponse, error)
	IsTopicActive(context.Context, *QueryIsTopicActiveRequest) (*QueryIsTopicActiveResponse, error)
	GetTopicFeeRevenue(context.Context, *QueryTopicFeeRevenueRequest) (*QueryTopicFeeRevenueResponse, error)
	GetRewardableTopics(context.Context, *QueryRewardableTopicsRequest) (*QueryRewardableTopicsResponse, error)
	GetLatestInfererScore(context.Context, *QueryLatestInfererScoreRequest) (*QueryLatestInfererScoreResponse, error)
	GetLatestForecasterScore(context.Context, *QueryLatestForecasterScoreRequest) (*QueryLatestForecasterScoreResponse, error)
	GetLatestReputerScore(context.Context, *QueryLatestReputerScoreRequest) (*QueryLatestReputerScoreResponse, error)
	GetInferenceScoresUntilBlock(context.Context, *QueryInferenceScoresUntilBlockRequest) (*QueryInferenceScoresUntilBlockResponse, error)
	GetWorkerInferenceScoresAtBlock(context.Context, *QueryWorkerInferenceScoresAtBlockRequest) (*QueryWorkerInferenceScoresAtBlockResponse, error)
	GetForecastScoresUntilBlock(context.Context, *QueryForecastScoresUntilBlockRequest) (*QueryForecastScoresUntilBlockResponse, error)
	GetWorkerForecastScoresAtBlock(context.Context, *QueryWorkerForecastScoresAtBlockRequest) (*QueryWorkerForecastScoresAtBlockResponse, error)
	GetReputersScoresAtBlock(context.Context, *QueryReputersScoresAtBlockRequest) (*QueryReputersScoresAtBlockResponse, error)
	GetListeningCoefficient(context.Context, *QueryListeningCoefficientRequest) (*QueryListeningCoefficientResponse, error)
	GetPreviousReputerRewardFraction(context.Context, *QueryPreviousReputerRewardFractionRequest) (*QueryPreviousReputerRewardFractionResponse, error)
	GetPreviousInferenceRewardFraction(context.Context, *QueryPreviousInferenceRewardFractionRequest) (*QueryPreviousInferenceRewardFractionResponse, error)
	GetPreviousForecastRewardFraction(context.Context, *QueryPreviousForecastRewardFractionRequest) (*QueryPreviousForecastRewardFractionResponse, error)
	GetPreviousPercentageRewardToStakedReputers(context.Context, *QueryPreviousPercentageRewardToStakedReputersRequest) (*QueryPreviousPercentageRewardToStakedReputersResponse, error)
	GetTotalRewardToDistribute(context.Context, *QueryTotalRewardToDistributeRequest) (*QueryTotalRewardToDistributeResponse, error)
	GetTopicLastWorkerPayload(context.Context, *QueryTopicLastWorkerPayloadRequest) (*QueryTopicLastWorkerPayloadResponse, error)
	GetTopicLastReputerPayload(context.Context, *QueryTopicLastReputerPayloadRequest) (*QueryTopicLastReputerPayloadResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) GetNextTopicId(ctx context.Context, req *QueryNextTopicIdRequest) (*QueryNextTopicIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextTopicId not implemented")
}
func (*UnimplementedQueryServer) GetTopic(ctx context.Context, req *QueryTopicRequest) (*QueryTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopic not implemented")
}
func (*UnimplementedQueryServer) GetActiveTopics(ctx context.Context, req *QueryActiveTopicsRequest) (*QueryActiveTopicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveTopics not implemented")
}
func (*UnimplementedQueryServer) GetWorkerLatestInferenceByTopicId(ctx context.Context, req *QueryWorkerLatestInferenceRequest) (*QueryWorkerLatestInferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerLatestInferenceByTopicId not implemented")
}
func (*UnimplementedQueryServer) GetInferencesAtBlock(ctx context.Context, req *QueryInferencesAtBlockRequest) (*QueryInferencesAtBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInferencesAtBlock not implemented")
}
func (*UnimplementedQueryServer) GetLatestTopicInferences(ctx context.Context, req *QueryLatestTopicInferencesRequest) (*QueryLatestTopicInferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestTopicInferences not implemented")
}
func (*UnimplementedQueryServer) GetForecastsAtBlock(ctx context.Context, req *QueryForecastsAtBlockRequest) (*QueryForecastsAtBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForecastsAtBlock not implemented")
}
func (*UnimplementedQueryServer) GetNetworkLossBundleAtBlock(ctx context.Context, req *QueryNetworkLossBundleAtBlockRequest) (*QueryNetworkLossBundleAtBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkLossBundleAtBlock not implemented")
}
func (*UnimplementedQueryServer) GetTotalStake(ctx context.Context, req *QueryTotalStakeRequest) (*QueryTotalStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalStake not implemented")
}
func (*UnimplementedQueryServer) GetReputerStakeInTopic(ctx context.Context, req *QueryReputerStakeInTopicRequest) (*QueryReputerStakeInTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReputerStakeInTopic not implemented")
}
func (*UnimplementedQueryServer) GetMultiReputerStakeInTopic(ctx context.Context, req *QueryMultiReputerStakeInTopicRequest) (*QueryMultiReputerStakeInTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMultiReputerStakeInTopic not implemented")
}
func (*UnimplementedQueryServer) GetStakeFromReputerInTopicInSelf(ctx context.Context, req *QueryStakeFromReputerInTopicInSelfRequest) (*QueryStakeFromReputerInTopicInSelfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakeFromReputerInTopicInSelf not implemented")
}
func (*UnimplementedQueryServer) GetDelegateStakeInTopicInReputer(ctx context.Context, req *QueryDelegateStakeInTopicInReputerRequest) (*QueryDelegateStakeInTopicInReputerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegateStakeInTopicInReputer not implemented")
}
func (*UnimplementedQueryServer) GetStakeFromDelegatorInTopicInReputer(ctx context.Context, req *QueryStakeFromDelegatorInTopicInReputerRequest) (*QueryStakeFromDelegatorInTopicInReputerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakeFromDelegatorInTopicInReputer not implemented")
}
func (*UnimplementedQueryServer) GetStakeFromDelegatorInTopic(ctx context.Context, req *QueryStakeFromDelegatorInTopicRequest) (*QueryStakeFromDelegatorInTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakeFromDelegatorInTopic not implemented")
}
func (*UnimplementedQueryServer) GetTopicStake(ctx context.Context, req *QueryTopicStakeRequest) (*QueryTopicStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicStake not implemented")
}
func (*UnimplementedQueryServer) GetStakeRemovalsUpUntilBlock(ctx context.Context, req *QueryStakeRemovalsUpUntilBlockRequest) (*QueryStakeRemovalsUpUntilBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakeRemovalsUpUntilBlock not implemented")
}
func (*UnimplementedQueryServer) GetDelegateStakeRemovalsUpUntilBlock(ctx context.Context, req *QueryDelegateStakeRemovalsUpUntilBlockRequest) (*QueryDelegateStakeRemovalsUpUntilBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegateStakeRemovalsUpUntilBlock not implemented")
}
func (*UnimplementedQueryServer) GetStakeRemovalInfo(ctx context.Context, req *QueryStakeRemovalInfoRequest) (*QueryStakeRemovalInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakeRemovalInfo not implemented")
}
func (*UnimplementedQueryServer) GetDelegateStakeRemovalInfo(ctx context.Context, req *QueryDelegateStakeRemovalInfoRequest) (*QueryDelegateStakeRemovalInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegateStakeRemovalInfo not implemented")
}
func (*UnimplementedQueryServer) GetWorkerNodeInfo(ctx context.Context, req *QueryWorkerNodeInfoRequest) (*QueryWorkerNodeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerNodeInfo not implemented")
}
func (*UnimplementedQueryServer) GetReputerNodeInfo(ctx context.Context, req *QueryReputerNodeInfoRequest) (*QueryReputerNodeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReputerNodeInfo not implemented")
}
func (*UnimplementedQueryServer) IsWorkerRegisteredInTopicId(ctx context.Context, req *QueryIsWorkerRegisteredInTopicIdRequest) (*QueryIsWorkerRegisteredInTopicIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsWorkerRegisteredInTopicId not implemented")
}
func (*UnimplementedQueryServer) IsReputerRegisteredInTopicId(ctx context.Context, req *QueryIsReputerRegisteredInTopicIdRequest) (*QueryIsReputerRegisteredInTopicIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsReputerRegisteredInTopicId not implemented")
}
func (*UnimplementedQueryServer) GetNetworkInferencesAtBlock(ctx context.Context, req *QueryNetworkInferencesAtBlockRequest) (*QueryNetworkInferencesAtBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkInferencesAtBlock not implemented")
}
func (*UnimplementedQueryServer) GetLatestNetworkInference(ctx context.Context, req *QueryLatestNetworkInferencesRequest) (*QueryLatestNetworkInferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestNetworkInference not implemented")
}
func (*UnimplementedQueryServer) GetLatestAvailableNetworkInference(ctx context.Context, req *QueryLatestNetworkInferencesRequest) (*QueryLatestNetworkInferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestAvailableNetworkInference not implemented")
}
func (*UnimplementedQueryServer) IsWorkerNonceUnfulfilled(ctx context.Context, req *QueryIsWorkerNonceUnfulfilledRequest) (*QueryIsWorkerNonceUnfulfilledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsWorkerNonceUnfulfilled not implemented")
}
func (*UnimplementedQueryServer) IsReputerNonceUnfulfilled(ctx context.Context, req *QueryIsReputerNonceUnfulfilledRequest) (*QueryIsReputerNonceUnfulfilledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsReputerNonceUnfulfilled not implemented")
}
func (*UnimplementedQueryServer) GetUnfulfilledWorkerNonces(ctx context.Context, req *QueryUnfulfilledWorkerNoncesRequest) (*QueryUnfulfilledWorkerNoncesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnfulfilledWorkerNonces not implemented")
}
func (*UnimplementedQueryServer) GetUnfulfilledReputerNonces(ctx context.Context, req *QueryUnfulfilledReputerNoncesRequest) (*QueryUnfulfilledReputerNoncesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnfulfilledReputerNonces not implemented")
}
func (*UnimplementedQueryServer) GetInfererNetworkRegret(ctx context.Context, req *QueryInfererNetworkRegretRequest) (*QueryInfererNetworkRegretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfererNetworkRegret not implemented")
}
func (*UnimplementedQueryServer) GetForecasterNetworkRegret(ctx context.Context, req *QueryForecasterNetworkRegretRequest) (*QueryForecasterNetworkRegretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForecasterNetworkRegret not implemented")
}
func (*UnimplementedQueryServer) GetOneInForecasterNetworkRegret(ctx context.Context, req *QueryOneInForecasterNetworkRegretRequest) (*QueryOneInForecasterNetworkRegretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneInForecasterNetworkRegret not implemented")
}
func (*UnimplementedQueryServer) GetOneInForecasterSelfNetworkRegret(ctx context.Context, req *QueryOneInForecasterSelfNetworkRegretRequest) (*QueryOneInForecasterSelfNetworkRegretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneInForecasterSelfNetworkRegret not implemented")
}
func (*UnimplementedQueryServer) IsWhitelistAdmin(ctx context.Context, req *QueryIsWhitelistAdminRequest) (*QueryIsWhitelistAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsWhitelistAdmin not implemented")
}
func (*UnimplementedQueryServer) GetTopicLastWorkerCommitInfo(ctx context.Context, req *QueryTopicLastCommitRequest) (*QueryTopicLastCommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicLastWorkerCommitInfo not implemented")
}
func (*UnimplementedQueryServer) GetTopicLastReputerCommitInfo(ctx context.Context, req *QueryTopicLastCommitRequest) (*QueryTopicLastCommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicLastReputerCommitInfo not implemented")
}
func (*UnimplementedQueryServer) GetTopicRewardNonce(ctx context.Context, req *QueryTopicRewardNonceRequest) (*QueryTopicRewardNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicRewardNonce not implemented")
}
func (*UnimplementedQueryServer) GetReputerLossBundlesAtBlock(ctx context.Context, req *QueryReputerLossBundlesAtBlockRequest) (*QueryReputerLossBundlesAtBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReputerLossBundlesAtBlock not implemented")
}
func (*UnimplementedQueryServer) GetStakeReputerAuthority(ctx context.Context, req *QueryStakeReputerAuthorityRequest) (*QueryStakeReputerAuthorityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakeReputerAuthority not implemented")
}
func (*UnimplementedQueryServer) GetDelegateStakePlacement(ctx context.Context, req *QueryDelegateStakePlacementRequest) (*QueryDelegateStakePlacementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegateStakePlacement not implemented")
}
func (*UnimplementedQueryServer) GetDelegateStakeUponReputer(ctx context.Context, req *QueryDelegateStakeUponReputerRequest) (*QueryDelegateStakeUponReputerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegateStakeUponReputer not implemented")
}
func (*UnimplementedQueryServer) GetDelegateRewardPerShare(ctx context.Context, req *QueryDelegateRewardPerShareRequest) (*QueryDelegateRewardPerShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegateRewardPerShare not implemented")
}
func (*UnimplementedQueryServer) GetStakeRemovalForReputerAndTopicId(ctx context.Context, req *QueryStakeRemovalForReputerAndTopicIdRequest) (*QueryStakeRemovalForReputerAndTopicIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakeRemovalForReputerAndTopicId not implemented")
}
func (*UnimplementedQueryServer) GetDelegateStakeRemoval(ctx context.Context, req *QueryDelegateStakeRemovalRequest) (*QueryDelegateStakeRemovalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegateStakeRemoval not implemented")
}
func (*UnimplementedQueryServer) GetPreviousTopicWeight(ctx context.Context, req *QueryPreviousTopicWeightRequest) (*QueryPreviousTopicWeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreviousTopicWeight not implemented")
}
func (*UnimplementedQueryServer) TopicExists(ctx context.Context, req *QueryTopicExistsRequest) (*QueryTopicExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopicExists not implemented")
}
func (*UnimplementedQueryServer) IsTopicActive(ctx context.Context, req *QueryIsTopicActiveRequest) (*QueryIsTopicActiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsTopicActive not implemented")
}
func (*UnimplementedQueryServer) GetTopicFeeRevenue(ctx context.Context, req *QueryTopicFeeRevenueRequest) (*QueryTopicFeeRevenueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicFeeRevenue not implemented")
}
func (*UnimplementedQueryServer) GetRewardableTopics(ctx context.Context, req *QueryRewardableTopicsRequest) (*QueryRewardableTopicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRewardableTopics not implemented")
}
func (*UnimplementedQueryServer) GetLatestInfererScore(ctx context.Context, req *QueryLatestInfererScoreRequest) (*QueryLatestInfererScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestInfererScore not implemented")
}
func (*UnimplementedQueryServer) GetLatestForecasterScore(ctx context.Context, req *QueryLatestForecasterScoreRequest) (*QueryLatestForecasterScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestForecasterScore not implemented")
}
func (*UnimplementedQueryServer) GetLatestReputerScore(ctx context.Context, req *QueryLatestReputerScoreRequest) (*QueryLatestReputerScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestReputerScore not implemented")
}
func (*UnimplementedQueryServer) GetInferenceScoresUntilBlock(ctx context.Context, req *QueryInferenceScoresUntilBlockRequest) (*QueryInferenceScoresUntilBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInferenceScoresUntilBlock not implemented")
}
func (*UnimplementedQueryServer) GetWorkerInferenceScoresAtBlock(ctx context.Context, req *QueryWorkerInferenceScoresAtBlockRequest) (*QueryWorkerInferenceScoresAtBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerInferenceScoresAtBlock not implemented")
}
func (*UnimplementedQueryServer) GetForecastScoresUntilBlock(ctx context.Context, req *QueryForecastScoresUntilBlockRequest) (*QueryForecastScoresUntilBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForecastScoresUntilBlock not implemented")
}
func (*UnimplementedQueryServer) GetWorkerForecastScoresAtBlock(ctx context.Context, req *QueryWorkerForecastScoresAtBlockRequest) (*QueryWorkerForecastScoresAtBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerForecastScoresAtBlock not implemented")
}
func (*UnimplementedQueryServer) GetReputersScoresAtBlock(ctx context.Context, req *QueryReputersScoresAtBlockRequest) (*QueryReputersScoresAtBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReputersScoresAtBlock not implemented")
}
func (*UnimplementedQueryServer) GetListeningCoefficient(ctx context.Context, req *QueryListeningCoefficientRequest) (*QueryListeningCoefficientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListeningCoefficient not implemented")
}
func (*UnimplementedQueryServer) GetPreviousReputerRewardFraction(ctx context.Context, req *QueryPreviousReputerRewardFractionRequest) (*QueryPreviousReputerRewardFractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreviousReputerRewardFraction not implemented")
}
func (*UnimplementedQueryServer) GetPreviousInferenceRewardFraction(ctx context.Context, req *QueryPreviousInferenceRewardFractionRequest) (*QueryPreviousInferenceRewardFractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreviousInferenceRewardFraction not implemented")
}
func (*UnimplementedQueryServer) GetPreviousForecastRewardFraction(ctx context.Context, req *QueryPreviousForecastRewardFractionRequest) (*QueryPreviousForecastRewardFractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreviousForecastRewardFraction not implemented")
}
func (*UnimplementedQueryServer) GetPreviousPercentageRewardToStakedReputers(ctx context.Context, req *QueryPreviousPercentageRewardToStakedReputersRequest) (*QueryPreviousPercentageRewardToStakedReputersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreviousPercentageRewardToStakedReputers not implemented")
}
func (*UnimplementedQueryServer) GetTotalRewardToDistribute(ctx context.Context, req *QueryTotalRewardToDistributeRequest) (*QueryTotalRewardToDistributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalRewardToDistribute not implemented")
}
func (*UnimplementedQueryServer) GetTopicLastWorkerPayload(ctx context.Context, req *QueryTopicLastWorkerPayloadRequest) (*QueryTopicLastWorkerPayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicLastWorkerPayload not implemented")
}
func (*UnimplementedQueryServer) GetTopicLastReputerPayload(ctx context.Context, req *QueryTopicLastReputerPayloadRequest) (*QueryTopicLastReputerPayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicLastReputerPayload not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetNextTopicId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNextTopicIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetNextTopicId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetNextTopicId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetNextTopicId(ctx, req.(*QueryNextTopicIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTopic(ctx, req.(*QueryTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetActiveTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryActiveTopicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetActiveTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetActiveTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetActiveTopics(ctx, req.(*QueryActiveTopicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetWorkerLatestInferenceByTopicId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWorkerLatestInferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetWorkerLatestInferenceByTopicId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetWorkerLatestInferenceByTopicId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetWorkerLatestInferenceByTopicId(ctx, req.(*QueryWorkerLatestInferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetInferencesAtBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInferencesAtBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetInferencesAtBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetInferencesAtBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetInferencesAtBlock(ctx, req.(*QueryInferencesAtBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLatestTopicInferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatestTopicInferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLatestTopicInferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetLatestTopicInferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLatestTopicInferences(ctx, req.(*QueryLatestTopicInferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetForecastsAtBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryForecastsAtBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetForecastsAtBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetForecastsAtBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetForecastsAtBlock(ctx, req.(*QueryForecastsAtBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetNetworkLossBundleAtBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNetworkLossBundleAtBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetNetworkLossBundleAtBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetNetworkLossBundleAtBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetNetworkLossBundleAtBlock(ctx, req.(*QueryNetworkLossBundleAtBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTotalStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalStakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTotalStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetTotalStake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTotalStake(ctx, req.(*QueryTotalStakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetReputerStakeInTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReputerStakeInTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetReputerStakeInTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetReputerStakeInTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetReputerStakeInTopic(ctx, req.(*QueryReputerStakeInTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetMultiReputerStakeInTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMultiReputerStakeInTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetMultiReputerStakeInTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetMultiReputerStakeInTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetMultiReputerStakeInTopic(ctx, req.(*QueryMultiReputerStakeInTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetStakeFromReputerInTopicInSelf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakeFromReputerInTopicInSelfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetStakeFromReputerInTopicInSelf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetStakeFromReputerInTopicInSelf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetStakeFromReputerInTopicInSelf(ctx, req.(*QueryStakeFromReputerInTopicInSelfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDelegateStakeInTopicInReputer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegateStakeInTopicInReputerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDelegateStakeInTopicInReputer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetDelegateStakeInTopicInReputer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDelegateStakeInTopicInReputer(ctx, req.(*QueryDelegateStakeInTopicInReputerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetStakeFromDelegatorInTopicInReputer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakeFromDelegatorInTopicInReputerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetStakeFromDelegatorInTopicInReputer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetStakeFromDelegatorInTopicInReputer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetStakeFromDelegatorInTopicInReputer(ctx, req.(*QueryStakeFromDelegatorInTopicInReputerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetStakeFromDelegatorInTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakeFromDelegatorInTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetStakeFromDelegatorInTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetStakeFromDelegatorInTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetStakeFromDelegatorInTopic(ctx, req.(*QueryStakeFromDelegatorInTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTopicStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTopicStakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTopicStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetTopicStake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTopicStake(ctx, req.(*QueryTopicStakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetStakeRemovalsUpUntilBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakeRemovalsUpUntilBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetStakeRemovalsUpUntilBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetStakeRemovalsUpUntilBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetStakeRemovalsUpUntilBlock(ctx, req.(*QueryStakeRemovalsUpUntilBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDelegateStakeRemovalsUpUntilBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegateStakeRemovalsUpUntilBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDelegateStakeRemovalsUpUntilBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetDelegateStakeRemovalsUpUntilBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDelegateStakeRemovalsUpUntilBlock(ctx, req.(*QueryDelegateStakeRemovalsUpUntilBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetStakeRemovalInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakeRemovalInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetStakeRemovalInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetStakeRemovalInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetStakeRemovalInfo(ctx, req.(*QueryStakeRemovalInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDelegateStakeRemovalInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegateStakeRemovalInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDelegateStakeRemovalInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetDelegateStakeRemovalInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDelegateStakeRemovalInfo(ctx, req.(*QueryDelegateStakeRemovalInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetWorkerNodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWorkerNodeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetWorkerNodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetWorkerNodeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetWorkerNodeInfo(ctx, req.(*QueryWorkerNodeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetReputerNodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReputerNodeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetReputerNodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetReputerNodeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetReputerNodeInfo(ctx, req.(*QueryReputerNodeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IsWorkerRegisteredInTopicId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIsWorkerRegisteredInTopicIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IsWorkerRegisteredInTopicId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/IsWorkerRegisteredInTopicId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IsWorkerRegisteredInTopicId(ctx, req.(*QueryIsWorkerRegisteredInTopicIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IsReputerRegisteredInTopicId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIsReputerRegisteredInTopicIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IsReputerRegisteredInTopicId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/IsReputerRegisteredInTopicId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IsReputerRegisteredInTopicId(ctx, req.(*QueryIsReputerRegisteredInTopicIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetNetworkInferencesAtBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNetworkInferencesAtBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetNetworkInferencesAtBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetNetworkInferencesAtBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetNetworkInferencesAtBlock(ctx, req.(*QueryNetworkInferencesAtBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLatestNetworkInference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatestNetworkInferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLatestNetworkInference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetLatestNetworkInference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLatestNetworkInference(ctx, req.(*QueryLatestNetworkInferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLatestAvailableNetworkInference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatestNetworkInferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLatestAvailableNetworkInference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetLatestAvailableNetworkInference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLatestAvailableNetworkInference(ctx, req.(*QueryLatestNetworkInferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IsWorkerNonceUnfulfilled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIsWorkerNonceUnfulfilledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IsWorkerNonceUnfulfilled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/IsWorkerNonceUnfulfilled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IsWorkerNonceUnfulfilled(ctx, req.(*QueryIsWorkerNonceUnfulfilledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IsReputerNonceUnfulfilled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIsReputerNonceUnfulfilledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IsReputerNonceUnfulfilled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/IsReputerNonceUnfulfilled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IsReputerNonceUnfulfilled(ctx, req.(*QueryIsReputerNonceUnfulfilledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetUnfulfilledWorkerNonces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUnfulfilledWorkerNoncesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetUnfulfilledWorkerNonces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetUnfulfilledWorkerNonces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetUnfulfilledWorkerNonces(ctx, req.(*QueryUnfulfilledWorkerNoncesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetUnfulfilledReputerNonces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUnfulfilledReputerNoncesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetUnfulfilledReputerNonces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetUnfulfilledReputerNonces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetUnfulfilledReputerNonces(ctx, req.(*QueryUnfulfilledReputerNoncesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetInfererNetworkRegret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInfererNetworkRegretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetInfererNetworkRegret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetInfererNetworkRegret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetInfererNetworkRegret(ctx, req.(*QueryInfererNetworkRegretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetForecasterNetworkRegret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryForecasterNetworkRegretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetForecasterNetworkRegret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetForecasterNetworkRegret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetForecasterNetworkRegret(ctx, req.(*QueryForecasterNetworkRegretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetOneInForecasterNetworkRegret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOneInForecasterNetworkRegretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetOneInForecasterNetworkRegret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetOneInForecasterNetworkRegret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetOneInForecasterNetworkRegret(ctx, req.(*QueryOneInForecasterNetworkRegretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetOneInForecasterSelfNetworkRegret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOneInForecasterSelfNetworkRegretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetOneInForecasterSelfNetworkRegret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetOneInForecasterSelfNetworkRegret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetOneInForecasterSelfNetworkRegret(ctx, req.(*QueryOneInForecasterSelfNetworkRegretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IsWhitelistAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIsWhitelistAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IsWhitelistAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/IsWhitelistAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IsWhitelistAdmin(ctx, req.(*QueryIsWhitelistAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTopicLastWorkerCommitInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTopicLastCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTopicLastWorkerCommitInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetTopicLastWorkerCommitInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTopicLastWorkerCommitInfo(ctx, req.(*QueryTopicLastCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTopicLastReputerCommitInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTopicLastCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTopicLastReputerCommitInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetTopicLastReputerCommitInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTopicLastReputerCommitInfo(ctx, req.(*QueryTopicLastCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTopicRewardNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTopicRewardNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTopicRewardNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetTopicRewardNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTopicRewardNonce(ctx, req.(*QueryTopicRewardNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetReputerLossBundlesAtBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReputerLossBundlesAtBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetReputerLossBundlesAtBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetReputerLossBundlesAtBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetReputerLossBundlesAtBlock(ctx, req.(*QueryReputerLossBundlesAtBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetStakeReputerAuthority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakeReputerAuthorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetStakeReputerAuthority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetStakeReputerAuthority",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetStakeReputerAuthority(ctx, req.(*QueryStakeReputerAuthorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDelegateStakePlacement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegateStakePlacementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDelegateStakePlacement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetDelegateStakePlacement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDelegateStakePlacement(ctx, req.(*QueryDelegateStakePlacementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDelegateStakeUponReputer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegateStakeUponReputerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDelegateStakeUponReputer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetDelegateStakeUponReputer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDelegateStakeUponReputer(ctx, req.(*QueryDelegateStakeUponReputerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDelegateRewardPerShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegateRewardPerShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDelegateRewardPerShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetDelegateRewardPerShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDelegateRewardPerShare(ctx, req.(*QueryDelegateRewardPerShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetStakeRemovalForReputerAndTopicId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakeRemovalForReputerAndTopicIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetStakeRemovalForReputerAndTopicId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetStakeRemovalForReputerAndTopicId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetStakeRemovalForReputerAndTopicId(ctx, req.(*QueryStakeRemovalForReputerAndTopicIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDelegateStakeRemoval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegateStakeRemovalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDelegateStakeRemoval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetDelegateStakeRemoval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDelegateStakeRemoval(ctx, req.(*QueryDelegateStakeRemovalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPreviousTopicWeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPreviousTopicWeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPreviousTopicWeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetPreviousTopicWeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPreviousTopicWeight(ctx, req.(*QueryPreviousTopicWeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TopicExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTopicExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TopicExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/TopicExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TopicExists(ctx, req.(*QueryTopicExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IsTopicActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIsTopicActiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IsTopicActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/IsTopicActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IsTopicActive(ctx, req.(*QueryIsTopicActiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTopicFeeRevenue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTopicFeeRevenueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTopicFeeRevenue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetTopicFeeRevenue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTopicFeeRevenue(ctx, req.(*QueryTopicFeeRevenueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetRewardableTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRewardableTopicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRewardableTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetRewardableTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRewardableTopics(ctx, req.(*QueryRewardableTopicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLatestInfererScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatestInfererScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLatestInfererScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetLatestInfererScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLatestInfererScore(ctx, req.(*QueryLatestInfererScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLatestForecasterScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatestForecasterScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLatestForecasterScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetLatestForecasterScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLatestForecasterScore(ctx, req.(*QueryLatestForecasterScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLatestReputerScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatestReputerScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLatestReputerScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetLatestReputerScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLatestReputerScore(ctx, req.(*QueryLatestReputerScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetInferenceScoresUntilBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInferenceScoresUntilBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetInferenceScoresUntilBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetInferenceScoresUntilBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetInferenceScoresUntilBlock(ctx, req.(*QueryInferenceScoresUntilBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetWorkerInferenceScoresAtBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWorkerInferenceScoresAtBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetWorkerInferenceScoresAtBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetWorkerInferenceScoresAtBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetWorkerInferenceScoresAtBlock(ctx, req.(*QueryWorkerInferenceScoresAtBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetForecastScoresUntilBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryForecastScoresUntilBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetForecastScoresUntilBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetForecastScoresUntilBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetForecastScoresUntilBlock(ctx, req.(*QueryForecastScoresUntilBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetWorkerForecastScoresAtBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWorkerForecastScoresAtBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetWorkerForecastScoresAtBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetWorkerForecastScoresAtBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetWorkerForecastScoresAtBlock(ctx, req.(*QueryWorkerForecastScoresAtBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetReputersScoresAtBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReputersScoresAtBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetReputersScoresAtBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetReputersScoresAtBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetReputersScoresAtBlock(ctx, req.(*QueryReputersScoresAtBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetListeningCoefficient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListeningCoefficientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetListeningCoefficient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetListeningCoefficient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetListeningCoefficient(ctx, req.(*QueryListeningCoefficientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPreviousReputerRewardFraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPreviousReputerRewardFractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPreviousReputerRewardFraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetPreviousReputerRewardFraction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPreviousReputerRewardFraction(ctx, req.(*QueryPreviousReputerRewardFractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPreviousInferenceRewardFraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPreviousInferenceRewardFractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPreviousInferenceRewardFraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetPreviousInferenceRewardFraction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPreviousInferenceRewardFraction(ctx, req.(*QueryPreviousInferenceRewardFractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPreviousForecastRewardFraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPreviousForecastRewardFractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPreviousForecastRewardFraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetPreviousForecastRewardFraction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPreviousForecastRewardFraction(ctx, req.(*QueryPreviousForecastRewardFractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPreviousPercentageRewardToStakedReputers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPreviousPercentageRewardToStakedReputersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPreviousPercentageRewardToStakedReputers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetPreviousPercentageRewardToStakedReputers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPreviousPercentageRewardToStakedReputers(ctx, req.(*QueryPreviousPercentageRewardToStakedReputersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTotalRewardToDistribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalRewardToDistributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTotalRewardToDistribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetTotalRewardToDistribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTotalRewardToDistribute(ctx, req.(*QueryTotalRewardToDistributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTopicLastWorkerPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTopicLastWorkerPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTopicLastWorkerPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetTopicLastWorkerPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTopicLastWorkerPayload(ctx, req.(*QueryTopicLastWorkerPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTopicLastReputerPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTopicLastReputerPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTopicLastReputerPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emissions.v1.Query/GetTopicLastReputerPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTopicLastReputerPayload(ctx, req.(*QueryTopicLastReputerPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "emissions.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "GetNextTopicId",
			Handler:    _Query_GetNextTopicId_Handler,
		},
		{
			MethodName: "GetTopic",
			Handler:    _Query_GetTopic_Handler,
		},
		{
			MethodName: "GetActiveTopics",
			Handler:    _Query_GetActiveTopics_Handler,
		},
		{
			MethodName: "GetWorkerLatestInferenceByTopicId",
			Handler:    _Query_GetWorkerLatestInferenceByTopicId_Handler,
		},
		{
			MethodName: "GetInferencesAtBlock",
			Handler:    _Query_GetInferencesAtBlock_Handler,
		},
		{
			MethodName: "GetLatestTopicInferences",
			Handler:    _Query_GetLatestTopicInferences_Handler,
		},
		{
			MethodName: "GetForecastsAtBlock",
			Handler:    _Query_GetForecastsAtBlock_Handler,
		},
		{
			MethodName: "GetNetworkLossBundleAtBlock",
			Handler:    _Query_GetNetworkLossBundleAtBlock_Handler,
		},
		{
			MethodName: "GetTotalStake",
			Handler:    _Query_GetTotalStake_Handler,
		},
		{
			MethodName: "GetReputerStakeInTopic",
			Handler:    _Query_GetReputerStakeInTopic_Handler,
		},
		{
			MethodName: "GetMultiReputerStakeInTopic",
			Handler:    _Query_GetMultiReputerStakeInTopic_Handler,
		},
		{
			MethodName: "GetStakeFromReputerInTopicInSelf",
			Handler:    _Query_GetStakeFromReputerInTopicInSelf_Handler,
		},
		{
			MethodName: "GetDelegateStakeInTopicInReputer",
			Handler:    _Query_GetDelegateStakeInTopicInReputer_Handler,
		},
		{
			MethodName: "GetStakeFromDelegatorInTopicInReputer",
			Handler:    _Query_GetStakeFromDelegatorInTopicInReputer_Handler,
		},
		{
			MethodName: "GetStakeFromDelegatorInTopic",
			Handler:    _Query_GetStakeFromDelegatorInTopic_Handler,
		},
		{
			MethodName: "GetTopicStake",
			Handler:    _Query_GetTopicStake_Handler,
		},
		{
			MethodName: "GetStakeRemovalsUpUntilBlock",
			Handler:    _Query_GetStakeRemovalsUpUntilBlock_Handler,
		},
		{
			MethodName: "GetDelegateStakeRemovalsUpUntilBlock",
			Handler:    _Query_GetDelegateStakeRemovalsUpUntilBlock_Handler,
		},
		{
			MethodName: "GetStakeRemovalInfo",
			Handler:    _Query_GetStakeRemovalInfo_Handler,
		},
		{
			MethodName: "GetDelegateStakeRemovalInfo",
			Handler:    _Query_GetDelegateStakeRemovalInfo_Handler,
		},
		{
			MethodName: "GetWorkerNodeInfo",
			Handler:    _Query_GetWorkerNodeInfo_Handler,
		},
		{
			MethodName: "GetReputerNodeInfo",
			Handler:    _Query_GetReputerNodeInfo_Handler,
		},
		{
			MethodName: "IsWorkerRegisteredInTopicId",
			Handler:    _Query_IsWorkerRegisteredInTopicId_Handler,
		},
		{
			MethodName: "IsReputerRegisteredInTopicId",
			Handler:    _Query_IsReputerRegisteredInTopicId_Handler,
		},
		{
			MethodName: "GetNetworkInferencesAtBlock",
			Handler:    _Query_GetNetworkInferencesAtBlock_Handler,
		},
		{
			MethodName: "GetLatestNetworkInference",
			Handler:    _Query_GetLatestNetworkInference_Handler,
		},
		{
			MethodName: "GetLatestAvailableNetworkInference",
			Handler:    _Query_GetLatestAvailableNetworkInference_Handler,
		},
		{
			MethodName: "IsWorkerNonceUnfulfilled",
			Handler:    _Query_IsWorkerNonceUnfulfilled_Handler,
		},
		{
			MethodName: "IsReputerNonceUnfulfilled",
			Handler:    _Query_IsReputerNonceUnfulfilled_Handler,
		},
		{
			MethodName: "GetUnfulfilledWorkerNonces",
			Handler:    _Query_GetUnfulfilledWorkerNonces_Handler,
		},
		{
			MethodName: "GetUnfulfilledReputerNonces",
			Handler:    _Query_GetUnfulfilledReputerNonces_Handler,
		},
		{
			MethodName: "GetInfererNetworkRegret",
			Handler:    _Query_GetInfererNetworkRegret_Handler,
		},
		{
			MethodName: "GetForecasterNetworkRegret",
			Handler:    _Query_GetForecasterNetworkRegret_Handler,
		},
		{
			MethodName: "GetOneInForecasterNetworkRegret",
			Handler:    _Query_GetOneInForecasterNetworkRegret_Handler,
		},
		{
			MethodName: "GetOneInForecasterSelfNetworkRegret",
			Handler:    _Query_GetOneInForecasterSelfNetworkRegret_Handler,
		},
		{
			MethodName: "IsWhitelistAdmin",
			Handler:    _Query_IsWhitelistAdmin_Handler,
		},
		{
			MethodName: "GetTopicLastWorkerCommitInfo",
			Handler:    _Query_GetTopicLastWorkerCommitInfo_Handler,
		},
		{
			MethodName: "GetTopicLastReputerCommitInfo",
			Handler:    _Query_GetTopicLastReputerCommitInfo_Handler,
		},
		{
			MethodName: "GetTopicRewardNonce",
			Handler:    _Query_GetTopicRewardNonce_Handler,
		},
		{
			MethodName: "GetReputerLossBundlesAtBlock",
			Handler:    _Query_GetReputerLossBundlesAtBlock_Handler,
		},
		{
			MethodName: "GetStakeReputerAuthority",
			Handler:    _Query_GetStakeReputerAuthority_Handler,
		},
		{
			MethodName: "GetDelegateStakePlacement",
			Handler:    _Query_GetDelegateStakePlacement_Handler,
		},
		{
			MethodName: "GetDelegateStakeUponReputer",
			Handler:    _Query_GetDelegateStakeUponReputer_Handler,
		},
		{
			MethodName: "GetDelegateRewardPerShare",
			Handler:    _Query_GetDelegateRewardPerShare_Handler,
		},
		{
			MethodName: "GetStakeRemovalForReputerAndTopicId",
			Handler:    _Query_GetStakeRemovalForReputerAndTopicId_Handler,
		},
		{
			MethodName: "GetDelegateStakeRemoval",
			Handler:    _Query_GetDelegateStakeRemoval_Handler,
		},
		{
			MethodName: "GetPreviousTopicWeight",
			Handler:    _Query_GetPreviousTopicWeight_Handler,
		},
		{
			MethodName: "TopicExists",
			Handler:    _Query_TopicExists_Handler,
		},
		{
			MethodName: "IsTopicActive",
			Handler:    _Query_IsTopicActive_Handler,
		},
		{
			MethodName: "GetTopicFeeRevenue",
			Handler:    _Query_GetTopicFeeRevenue_Handler,
		},
		{
			MethodName: "GetRewardableTopics",
			Handler:    _Query_GetRewardableTopics_Handler,
		},
		{
			MethodName: "GetLatestInfererScore",
			Handler:    _Query_GetLatestInfererScore_Handler,
		},
		{
			MethodName: "GetLatestForecasterScore",
			Handler:    _Query_GetLatestForecasterScore_Handler,
		},
		{
			MethodName: "GetLatestReputerScore",
			Handler:    _Query_GetLatestReputerScore_Handler,
		},
		{
			MethodName: "GetInferenceScoresUntilBlock",
			Handler:    _Query_GetInferenceScoresUntilBlock_Handler,
		},
		{
			MethodName: "GetWorkerInferenceScoresAtBlock",
			Handler:    _Query_GetWorkerInferenceScoresAtBlock_Handler,
		},
		{
			MethodName: "GetForecastScoresUntilBlock",
			Handler:    _Query_GetForecastScoresUntilBlock_Handler,
		},
		{
			MethodName: "GetWorkerForecastScoresAtBlock",
			Handler:    _Query_GetWorkerForecastScoresAtBlock_Handler,
		},
		{
			MethodName: "GetReputersScoresAtBlock",
			Handler:    _Query_GetReputersScoresAtBlock_Handler,
		},
		{
			MethodName: "GetListeningCoefficient",
			Handler:    _Query_GetListeningCoefficient_Handler,
		},
		{
			MethodName: "GetPreviousReputerRewardFraction",
			Handler:    _Query_GetPreviousReputerRewardFraction_Handler,
		},
		{
			MethodName: "GetPreviousInferenceRewardFraction",
			Handler:    _Query_GetPreviousInferenceRewardFraction_Handler,
		},
		{
			MethodName: "GetPreviousForecastRewardFraction",
			Handler:    _Query_GetPreviousForecastRewardFraction_Handler,
		},
		{
			MethodName: "GetPreviousPercentageRewardToStakedReputers",
			Handler:    _Query_GetPreviousPercentageRewardToStakedReputers_Handler,
		},
		{
			MethodName: "GetTotalRewardToDistribute",
			Handler:    _Query_GetTotalRewardToDistribute_Handler,
		},
		{
			MethodName: "GetTopicLastWorkerPayload",
			Handler:    _Query_GetTopicLastWorkerPayload_Handler,
		},
		{
			MethodName: "GetTopicLastReputerPayload",
			Handler:    _Query_GetTopicLastReputerPayload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "emissions/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTotalStakeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalStakeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalStakeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTotalStakeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalStakeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalStakeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryReputerStakeInTopicRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReputerStakeInTopicRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReputerStakeInTopicRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryReputerStakeInTopicResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReputerStakeInTopicResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReputerStakeInTopicResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryMultiReputerStakeInTopicRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMultiReputerStakeInTopicRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMultiReputerStakeInTopicRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryMultiReputerStakeInTopicResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMultiReputerStakeInTopicResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMultiReputerStakeInTopicResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amounts) > 0 {
		for iNdEx := len(m.Amounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakeFromReputerInTopicInSelfRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakeFromReputerInTopicInSelfRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakeFromReputerInTopicInSelfRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ReputerAddress) > 0 {
		i -= len(m.ReputerAddress)
		copy(dAtA[i:], m.ReputerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ReputerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakeFromReputerInTopicInSelfResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakeFromReputerInTopicInSelfResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakeFromReputerInTopicInSelfResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryDelegateStakeInTopicInReputerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegateStakeInTopicInReputerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegateStakeInTopicInReputerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ReputerAddress) > 0 {
		i -= len(m.ReputerAddress)
		copy(dAtA[i:], m.ReputerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ReputerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegateStakeInTopicInReputerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegateStakeInTopicInReputerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegateStakeInTopicInReputerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryStakeFromDelegatorInTopicInReputerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakeFromDelegatorInTopicInReputerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakeFromDelegatorInTopicInReputerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ReputerAddress) > 0 {
		i -= len(m.ReputerAddress)
		copy(dAtA[i:], m.ReputerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ReputerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakeFromDelegatorInTopicInReputerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakeFromDelegatorInTopicInReputerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakeFromDelegatorInTopicInReputerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryStakeFromDelegatorInTopicRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakeFromDelegatorInTopicRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakeFromDelegatorInTopicRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakeFromDelegatorInTopicResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakeFromDelegatorInTopicResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakeFromDelegatorInTopicResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTopicStakeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTopicStakeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTopicStakeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTopicStakeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTopicStakeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTopicStakeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryNetworkLossBundleAtBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNetworkLossBundleAtBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNetworkLossBundleAtBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryNetworkLossBundleAtBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNetworkLossBundleAtBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNetworkLossBundleAtBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LossBundle != nil {
		{
			size, err := m.LossBundle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryNextTopicIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNextTopicIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNextTopicIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryNextTopicIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNextTopicIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNextTopicIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextTopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.NextTopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTopicRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTopicRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTopicRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTopicResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTopicResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTopicResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EffectiveRevenue) > 0 {
		i -= len(m.EffectiveRevenue)
		copy(dAtA[i:], m.EffectiveRevenue)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EffectiveRevenue)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Weight) > 0 {
		i -= len(m.Weight)
		copy(dAtA[i:], m.Weight)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Weight)))
		i--
		dAtA[i] = 0x12
	}
	if m.Topic != nil {
		{
			size, err := m.Topic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryActiveTopicsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryActiveTopicsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryActiveTopicsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryActiveTopicsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryActiveTopicsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryActiveTopicsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Topics) > 0 {
		for iNdEx := len(m.Topics) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Topics[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryInferencesAtBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInferencesAtBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInferencesAtBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryInferencesAtBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInferencesAtBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInferencesAtBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Inferences != nil {
		{
			size, err := m.Inferences.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLatestTopicInferencesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestTopicInferencesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestTopicInferencesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLatestTopicInferencesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestTopicInferencesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestTopicInferencesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.Inferences != nil {
		{
			size, err := m.Inferences.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryForecastsAtBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryForecastsAtBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryForecastsAtBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryForecastsAtBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryForecastsAtBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryForecastsAtBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Forecasts != nil {
		{
			size, err := m.Forecasts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryWorkerLatestInferenceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWorkerLatestInferenceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWorkerLatestInferenceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WorkerAddress) > 0 {
		i -= len(m.WorkerAddress)
		copy(dAtA[i:], m.WorkerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.WorkerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryWorkerLatestInferenceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWorkerLatestInferenceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWorkerLatestInferenceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LatestInference != nil {
		{
			size, err := m.LatestInference.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryWorkerNodeInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWorkerNodeInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWorkerNodeInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *QueryWorkerNodeInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWorkerNodeInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWorkerNodeInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NodeInfo != nil {
		{
			size, err := m.NodeInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryReputerNodeInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReputerNodeInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReputerNodeInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *QueryReputerNodeInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReputerNodeInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReputerNodeInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NodeInfo != nil {
		{
			size, err := m.NodeInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryNetworkInferencesAtBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNetworkInferencesAtBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNetworkInferencesAtBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeightLastReward != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeightLastReward))
		i--
		dAtA[i] = 0x18
	}
	if m.BlockHeightLastInference != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeightLastInference))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLatestNetworkInferencesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestNetworkInferencesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestNetworkInferencesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsWorkerNonceUnfulfilledRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsWorkerNonceUnfulfilledRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsWorkerNonceUnfulfilledRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsWorkerNonceUnfulfilledResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsWorkerNonceUnfulfilledResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsWorkerNonceUnfulfilledResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsWorkerNonceUnfulfilled {
		i--
		if m.IsWorkerNonceUnfulfilled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryUnfulfilledReputerNoncesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUnfulfilledReputerNoncesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUnfulfilledReputerNoncesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryUnfulfilledReputerNoncesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUnfulfilledReputerNoncesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUnfulfilledReputerNoncesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonces != nil {
		{
			size, err := m.Nonces.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUnfulfilledWorkerNoncesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUnfulfilledWorkerNoncesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUnfulfilledWorkerNoncesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryUnfulfilledWorkerNoncesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUnfulfilledWorkerNoncesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUnfulfilledWorkerNoncesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonces != nil {
		{
			size, err := m.Nonces.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryInfererNetworkRegretRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInfererNetworkRegretRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInfererNetworkRegretRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ActorId) > 0 {
		i -= len(m.ActorId)
		copy(dAtA[i:], m.ActorId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ActorId)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryInfererNetworkRegretResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInfererNetworkRegretResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInfererNetworkRegretResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Regret != nil {
		{
			size, err := m.Regret.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryForecasterNetworkRegretRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryForecasterNetworkRegretRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryForecasterNetworkRegretRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Worker) > 0 {
		i -= len(m.Worker)
		copy(dAtA[i:], m.Worker)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Worker)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryForecasterNetworkRegretResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryForecasterNetworkRegretResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryForecasterNetworkRegretResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Regret != nil {
		{
			size, err := m.Regret.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOneInForecasterNetworkRegretRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOneInForecasterNetworkRegretRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOneInForecasterNetworkRegretRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Inferer) > 0 {
		i -= len(m.Inferer)
		copy(dAtA[i:], m.Inferer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Inferer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Forecaster) > 0 {
		i -= len(m.Forecaster)
		copy(dAtA[i:], m.Forecaster)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Forecaster)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryOneInForecasterNetworkRegretResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOneInForecasterNetworkRegretResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOneInForecasterNetworkRegretResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Regret != nil {
		{
			size, err := m.Regret.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOneInForecasterSelfNetworkRegretRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOneInForecasterSelfNetworkRegretRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOneInForecasterSelfNetworkRegretRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Forecaster) > 0 {
		i -= len(m.Forecaster)
		copy(dAtA[i:], m.Forecaster)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Forecaster)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryOneInForecasterSelfNetworkRegretResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOneInForecasterSelfNetworkRegretResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOneInForecasterSelfNetworkRegretResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Regret != nil {
		{
			size, err := m.Regret.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsReputerNonceUnfulfilledRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsReputerNonceUnfulfilledRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsReputerNonceUnfulfilledRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsReputerNonceUnfulfilledResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsReputerNonceUnfulfilledResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsReputerNonceUnfulfilledResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsReputerNonceUnfulfilled {
		i--
		if m.IsReputerNonceUnfulfilled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryNetworkInferencesAtBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNetworkInferencesAtBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNetworkInferencesAtBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NetworkInferences != nil {
		{
			size, err := m.NetworkInferences.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLatestNetworkInferencesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestNetworkInferencesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestNetworkInferencesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConfidenceIntervalValues) > 0 {
		for iNdEx := len(m.ConfidenceIntervalValues) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.ConfidenceIntervalValues[iNdEx].Size()
				i -= size
				if _, err := m.ConfidenceIntervalValues[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.ConfidenceIntervalRawPercentiles) > 0 {
		for iNdEx := len(m.ConfidenceIntervalRawPercentiles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.ConfidenceIntervalRawPercentiles[iNdEx].Size()
				i -= size
				if _, err := m.ConfidenceIntervalRawPercentiles[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.LossBlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LossBlockHeight))
		i--
		dAtA[i] = 0x30
	}
	if m.InferenceBlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.InferenceBlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ForecastImpliedInferences) > 0 {
		for iNdEx := len(m.ForecastImpliedInferences) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ForecastImpliedInferences[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ForecasterWeights) > 0 {
		for iNdEx := len(m.ForecasterWeights) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ForecasterWeights[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.InfererWeights) > 0 {
		for iNdEx := len(m.InfererWeights) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InfererWeights[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.NetworkInferences != nil {
		{
			size, err := m.NetworkInferences.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsWorkerRegisteredInTopicIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsWorkerRegisteredInTopicIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsWorkerRegisteredInTopicIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsWorkerRegisteredInTopicIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsWorkerRegisteredInTopicIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsWorkerRegisteredInTopicIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsRegistered {
		i--
		if m.IsRegistered {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsReputerRegisteredInTopicIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsReputerRegisteredInTopicIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsReputerRegisteredInTopicIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsReputerRegisteredInTopicIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsReputerRegisteredInTopicIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsReputerRegisteredInTopicIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsRegistered {
		i--
		if m.IsRegistered {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsWhitelistAdminRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsWhitelistAdminRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsWhitelistAdminRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsWhitelistAdminResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsWhitelistAdminResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsWhitelistAdminResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsAdmin {
		i--
		if m.IsAdmin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakeRemovalsUpUntilBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakeRemovalsUpUntilBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakeRemovalsUpUntilBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakeRemovalsUpUntilBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakeRemovalsUpUntilBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakeRemovalsUpUntilBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Removals) > 0 {
		for iNdEx := len(m.Removals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Removals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegateStakeRemovalsUpUntilBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegateStakeRemovalsUpUntilBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegateStakeRemovalsUpUntilBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegateStakeRemovalsUpUntilBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegateStakeRemovalsUpUntilBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegateStakeRemovalsUpUntilBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Removals) > 0 {
		for iNdEx := len(m.Removals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Removals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakeRemovalInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakeRemovalInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakeRemovalInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reputer) > 0 {
		i -= len(m.Reputer)
		copy(dAtA[i:], m.Reputer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Reputer)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakeRemovalInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakeRemovalInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakeRemovalInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Removal != nil {
		{
			size, err := m.Removal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegateStakeRemovalInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegateStakeRemovalInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegateStakeRemovalInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reputer) > 0 {
		i -= len(m.Reputer)
		copy(dAtA[i:], m.Reputer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Reputer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Delegator) > 0 {
		i -= len(m.Delegator)
		copy(dAtA[i:], m.Delegator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Delegator)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegateStakeRemovalInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegateStakeRemovalInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegateStakeRemovalInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Removal != nil {
		{
			size, err := m.Removal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTopicLastCommitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTopicLastCommitRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTopicLastCommitRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTopicLastCommitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTopicLastCommitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTopicLastCommitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastCommit != nil {
		{
			size, err := m.LastCommit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTopicRewardNonceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTopicRewardNonceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTopicRewardNonceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTopicRewardNonceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTopicRewardNonceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTopicRewardNonceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryReputerLossBundlesAtBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReputerLossBundlesAtBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReputerLossBundlesAtBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryReputerLossBundlesAtBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReputerLossBundlesAtBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReputerLossBundlesAtBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LossBundles != nil {
		{
			size, err := m.LossBundles.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakeReputerAuthorityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakeReputerAuthorityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakeReputerAuthorityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reputer) > 0 {
		i -= len(m.Reputer)
		copy(dAtA[i:], m.Reputer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Reputer)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakeReputerAuthorityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakeReputerAuthorityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakeReputerAuthorityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Authority.Size()
		i -= size
		if _, err := m.Authority.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryDelegateStakePlacementRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegateStakePlacementRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegateStakePlacementRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Target) > 0 {
		i -= len(m.Target)
		copy(dAtA[i:], m.Target)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Target)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Delegator) > 0 {
		i -= len(m.Delegator)
		copy(dAtA[i:], m.Delegator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Delegator)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegateStakePlacementResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegateStakePlacementResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegateStakePlacementResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DelegatorInfo != nil {
		{
			size, err := m.DelegatorInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegateStakeUponReputerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegateStakeUponReputerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegateStakeUponReputerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Target) > 0 {
		i -= len(m.Target)
		copy(dAtA[i:], m.Target)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Target)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegateStakeUponReputerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegateStakeUponReputerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegateStakeUponReputerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Stake.Size()
		i -= size
		if _, err := m.Stake.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryDelegateRewardPerShareRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegateRewardPerShareRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegateRewardPerShareRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reputer) > 0 {
		i -= len(m.Reputer)
		copy(dAtA[i:], m.Reputer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Reputer)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegateRewardPerShareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegateRewardPerShareResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegateRewardPerShareResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.RewardPerShare.Size()
		i -= size
		if _, err := m.RewardPerShare.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryStakeRemovalForReputerAndTopicIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakeRemovalForReputerAndTopicIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakeRemovalForReputerAndTopicIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Reputer) > 0 {
		i -= len(m.Reputer)
		copy(dAtA[i:], m.Reputer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Reputer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakeRemovalForReputerAndTopicIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakeRemovalForReputerAndTopicIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakeRemovalForReputerAndTopicIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StakeRemovalInfo != nil {
		{
			size, err := m.StakeRemovalInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegateStakeRemovalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegateStakeRemovalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegateStakeRemovalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reputer) > 0 {
		i -= len(m.Reputer)
		copy(dAtA[i:], m.Reputer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Reputer)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Delegator) > 0 {
		i -= len(m.Delegator)
		copy(dAtA[i:], m.Delegator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Delegator)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x10
	}
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegateStakeRemovalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegateStakeRemovalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegateStakeRemovalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StakeRemovalInfo != nil {
		{
			size, err := m.StakeRemovalInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPreviousTopicWeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPreviousTopicWeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPreviousTopicWeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPreviousTopicWeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPreviousTopicWeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPreviousTopicWeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NotFound {
		i--
		if m.NotFound {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.Weight.Size()
		i -= size
		if _, err := m.Weight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTopicExistsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTopicExistsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTopicExistsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTopicExistsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTopicExistsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTopicExistsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Exists {
		i--
		if m.Exists {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsTopicActiveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsTopicActiveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsTopicActiveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsTopicActiveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsTopicActiveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsTopicActiveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTopicFeeRevenueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTopicFeeRevenueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTopicFeeRevenueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTopicFeeRevenueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTopicFeeRevenueResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTopicFeeRevenueResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.FeeRevenue.Size()
		i -= size
		if _, err := m.FeeRevenue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryRewardableTopicsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardableTopicsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardableTopicsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryRewardableTopicsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardableTopicsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardableTopicsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardableTopicIds) > 0 {
		dAtA28 := make([]byte, len(m.RewardableTopicIds)*10)
		var j27 int
		for _, num := range m.RewardableTopicIds {
			for num >= 1<<7 {
				dAtA28[j27] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j27++
			}
			dAtA28[j27] = uint8(num)
			j27++
		}
		i -= j27
		copy(dAtA[i:], dAtA28[:j27])
		i = encodeVarintQuery(dAtA, i, uint64(j27))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLatestInfererScoreRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestInfererScoreRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestInfererScoreRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Inferer) > 0 {
		i -= len(m.Inferer)
		copy(dAtA[i:], m.Inferer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Inferer)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLatestInfererScoreResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestInfererScoreResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestInfererScoreResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Score != nil {
		{
			size, err := m.Score.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLatestForecasterScoreRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestForecasterScoreRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestForecasterScoreRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Forecaster) > 0 {
		i -= len(m.Forecaster)
		copy(dAtA[i:], m.Forecaster)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Forecaster)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLatestForecasterScoreResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestForecasterScoreResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestForecasterScoreResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Score != nil {
		{
			size, err := m.Score.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLatestReputerScoreRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestReputerScoreRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestReputerScoreRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reputer) > 0 {
		i -= len(m.Reputer)
		copy(dAtA[i:], m.Reputer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Reputer)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLatestReputerScoreResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestReputerScoreResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestReputerScoreResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Score != nil {
		{
			size, err := m.Score.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryInferenceScoresUntilBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInferenceScoresUntilBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInferenceScoresUntilBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryInferenceScoresUntilBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInferenceScoresUntilBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInferenceScoresUntilBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Scores) > 0 {
		for iNdEx := len(m.Scores) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Scores[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryWorkerInferenceScoresAtBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWorkerInferenceScoresAtBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWorkerInferenceScoresAtBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryWorkerInferenceScoresAtBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWorkerInferenceScoresAtBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWorkerInferenceScoresAtBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Scores != nil {
		{
			size, err := m.Scores.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryForecastScoresUntilBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryForecastScoresUntilBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryForecastScoresUntilBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryForecastScoresUntilBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryForecastScoresUntilBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryForecastScoresUntilBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Scores) > 0 {
		for iNdEx := len(m.Scores) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Scores[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryWorkerForecastScoresAtBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWorkerForecastScoresAtBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWorkerForecastScoresAtBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryWorkerForecastScoresAtBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWorkerForecastScoresAtBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWorkerForecastScoresAtBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Scores != nil {
		{
			size, err := m.Scores.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryReputersScoresAtBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReputersScoresAtBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReputersScoresAtBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryReputersScoresAtBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReputersScoresAtBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReputersScoresAtBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Scores != nil {
		{
			size, err := m.Scores.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListeningCoefficientRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListeningCoefficientRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListeningCoefficientRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reputer) > 0 {
		i -= len(m.Reputer)
		copy(dAtA[i:], m.Reputer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Reputer)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryListeningCoefficientResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListeningCoefficientResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListeningCoefficientResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ListeningCoefficient != nil {
		{
			size, err := m.ListeningCoefficient.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPreviousReputerRewardFractionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPreviousReputerRewardFractionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPreviousReputerRewardFractionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reputer) > 0 {
		i -= len(m.Reputer)
		copy(dAtA[i:], m.Reputer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Reputer)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPreviousReputerRewardFractionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPreviousReputerRewardFractionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPreviousReputerRewardFractionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NotFound {
		i--
		if m.NotFound {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.RewardFraction.Size()
		i -= size
		if _, err := m.RewardFraction.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPreviousInferenceRewardFractionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPreviousInferenceRewardFractionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPreviousInferenceRewardFractionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Worker) > 0 {
		i -= len(m.Worker)
		copy(dAtA[i:], m.Worker)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Worker)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPreviousInferenceRewardFractionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPreviousInferenceRewardFractionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPreviousInferenceRewardFractionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NotFound {
		i--
		if m.NotFound {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.RewardFraction.Size()
		i -= size
		if _, err := m.RewardFraction.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPreviousForecastRewardFractionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPreviousForecastRewardFractionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPreviousForecastRewardFractionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Worker) > 0 {
		i -= len(m.Worker)
		copy(dAtA[i:], m.Worker)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Worker)))
		i--
		dAtA[i] = 0x12
	}
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPreviousForecastRewardFractionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPreviousForecastRewardFractionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPreviousForecastRewardFractionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NotFound {
		i--
		if m.NotFound {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.RewardFraction.Size()
		i -= size
		if _, err := m.RewardFraction.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPreviousPercentageRewardToStakedReputersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPreviousPercentageRewardToStakedReputersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPreviousPercentageRewardToStakedReputersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPreviousPercentageRewardToStakedReputersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPreviousPercentageRewardToStakedReputersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPreviousPercentageRewardToStakedReputersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.PercentageReward.Size()
		i -= size
		if _, err := m.PercentageReward.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTotalRewardToDistributeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalRewardToDistributeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalRewardToDistributeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTotalRewardToDistributeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalRewardToDistributeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalRewardToDistributeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalReward.Size()
		i -= size
		if _, err := m.TotalReward.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTopicLastWorkerPayloadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTopicLastWorkerPayloadRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTopicLastWorkerPayloadRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTopicLastWorkerPayloadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTopicLastWorkerPayloadResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTopicLastWorkerPayloadResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		{
			size, err := m.Payload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTopicLastReputerPayloadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTopicLastReputerPayloadRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTopicLastReputerPayloadRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TopicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTopicLastReputerPayloadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTopicLastReputerPayloadResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTopicLastReputerPayloadResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		{
			size, err := m.Payload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTotalStakeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTotalStakeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryReputerStakeInTopicRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *QueryReputerStakeInTopicResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryMultiReputerStakeInTopicRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *QueryMultiReputerStakeInTopicResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Amounts) > 0 {
		for _, e := range m.Amounts {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryStakeFromReputerInTopicInSelfRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReputerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *QueryStakeFromReputerInTopicInSelfResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryDelegateStakeInTopicInReputerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReputerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *QueryDelegateStakeInTopicInReputerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryStakeFromDelegatorInTopicInReputerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ReputerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *QueryStakeFromDelegatorInTopicInReputerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryStakeFromDelegatorInTopicRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *QueryStakeFromDelegatorInTopicResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTopicStakeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *QueryTopicStakeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryNetworkLossBundleAtBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *QueryNetworkLossBundleAtBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LossBundle != nil {
		l = m.LossBundle.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryNextTopicIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryNextTopicIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NextTopicId != 0 {
		n += 1 + sovQuery(uint64(m.NextTopicId))
	}
	return n
}

func (m *QueryTopicRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *QueryTopicResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Topic != nil {
		l = m.Topic.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Weight)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.EffectiveRevenue)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryActiveTopicsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryActiveTopicsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Topics) > 0 {
		for _, e := range m.Topics {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryInferencesAtBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *QueryInferencesAtBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Inferences != nil {
		l = m.Inferences.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLatestTopicInferencesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *QueryLatestTopicInferencesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Inferences != nil {
		l = m.Inferences.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *QueryForecastsAtBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *QueryForecastsAtBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Forecasts != nil {
		l = m.Forecasts.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWorkerLatestInferenceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.WorkerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWorkerLatestInferenceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LatestInference != nil {
		l = m.LatestInference.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWorkerNodeInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWorkerNodeInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeInfo != nil {
		l = m.NodeInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryReputerNodeInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryReputerNodeInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeInfo != nil {
		l = m.NodeInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryNetworkInferencesAtBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	if m.BlockHeightLastInference != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeightLastInference))
	}
	if m.BlockHeightLastReward != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeightLastReward))
	}
	return n
}

func (m *QueryLatestNetworkInferencesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *QueryIsWorkerNonceUnfulfilledRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *QueryIsWorkerNonceUnfulfilledResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsWorkerNonceUnfulfilled {
		n += 2
	}
	return n
}

func (m *QueryUnfulfilledReputerNoncesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *QueryUnfulfilledReputerNoncesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonces != nil {
		l = m.Nonces.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUnfulfilledWorkerNoncesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *QueryUnfulfilledWorkerNoncesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonces != nil {
		l = m.Nonces.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryInfererNetworkRegretRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.ActorId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryInfererNetworkRegretResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Regret != nil {
		l = m.Regret.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryForecasterNetworkRegretRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Worker)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryForecasterNetworkRegretResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Regret != nil {
		l = m.Regret.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOneInForecasterNetworkRegretRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Forecaster)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Inferer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOneInForecasterNetworkRegretResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Regret != nil {
		l = m.Regret.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOneInForecasterSelfNetworkRegretRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Forecaster)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOneInForecasterSelfNetworkRegretResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Regret != nil {
		l = m.Regret.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIsReputerNonceUnfulfilledRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *QueryIsReputerNonceUnfulfilledResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsReputerNonceUnfulfilled {
		n += 2
	}
	return n
}

func (m *QueryNetworkInferencesAtBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkInferences != nil {
		l = m.NetworkInferences.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLatestNetworkInferencesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkInferences != nil {
		l = m.NetworkInferences.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.InfererWeights) > 0 {
		for _, e := range m.InfererWeights {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.ForecasterWeights) > 0 {
		for _, e := range m.ForecasterWeights {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.ForecastImpliedInferences) > 0 {
		for _, e := range m.ForecastImpliedInferences {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.InferenceBlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.InferenceBlockHeight))
	}
	if m.LossBlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.LossBlockHeight))
	}
	if len(m.ConfidenceIntervalRawPercentiles) > 0 {
		for _, e := range m.ConfidenceIntervalRawPercentiles {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.ConfidenceIntervalValues) > 0 {
		for _, e := range m.ConfidenceIntervalValues {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryIsWorkerRegisteredInTopicIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIsWorkerRegisteredInTopicIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsRegistered {
		n += 2
	}
	return n
}

func (m *QueryIsReputerRegisteredInTopicIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIsReputerRegisteredInTopicIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsRegistered {
		n += 2
	}
	return n
}

func (m *QueryIsWhitelistAdminRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIsWhitelistAdminResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsAdmin {
		n += 2
	}
	return n
}

func (m *QueryStakeRemovalsUpUntilBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *QueryStakeRemovalsUpUntilBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Removals) > 0 {
		for _, e := range m.Removals {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryDelegateStakeRemovalsUpUntilBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *QueryDelegateStakeRemovalsUpUntilBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Removals) > 0 {
		for _, e := range m.Removals {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryStakeRemovalInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Reputer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStakeRemovalInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Removal != nil {
		l = m.Removal.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegateStakeRemovalInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Delegator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Reputer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegateStakeRemovalInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Removal != nil {
		l = m.Removal.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTopicLastCommitRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *QueryTopicLastCommitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastCommit != nil {
		l = m.LastCommit.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTopicRewardNonceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *QueryTopicRewardNonceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	return n
}

func (m *QueryReputerLossBundlesAtBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *QueryReputerLossBundlesAtBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LossBundles != nil {
		l = m.LossBundles.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStakeReputerAuthorityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Reputer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStakeReputerAuthorityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Authority.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryDelegateStakePlacementRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Delegator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegateStakePlacementResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DelegatorInfo != nil {
		l = m.DelegatorInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegateStakeUponReputerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegateStakeUponReputerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Stake.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryDelegateRewardPerShareRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Reputer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegateRewardPerShareResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RewardPerShare.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryStakeRemovalForReputerAndTopicIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reputer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *QueryStakeRemovalForReputerAndTopicIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakeRemovalInfo != nil {
		l = m.StakeRemovalInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegateStakeRemovalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Delegator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Reputer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegateStakeRemovalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakeRemovalInfo != nil {
		l = m.StakeRemovalInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPreviousTopicWeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *QueryPreviousTopicWeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Weight.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.NotFound {
		n += 2
	}
	return n
}

func (m *QueryTopicExistsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *QueryTopicExistsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Exists {
		n += 2
	}
	return n
}

func (m *QueryIsTopicActiveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *QueryIsTopicActiveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsActive {
		n += 2
	}
	return n
}

func (m *QueryTopicFeeRevenueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *QueryTopicFeeRevenueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.FeeRevenue.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryRewardableTopicsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryRewardableTopicsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RewardableTopicIds) > 0 {
		l = 0
		for _, e := range m.RewardableTopicIds {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	return n
}

func (m *QueryLatestInfererScoreRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Inferer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLatestInfererScoreResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Score != nil {
		l = m.Score.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLatestForecasterScoreRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Forecaster)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLatestForecasterScoreResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Score != nil {
		l = m.Score.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLatestReputerScoreRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Reputer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLatestReputerScoreResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Score != nil {
		l = m.Score.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryInferenceScoresUntilBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *QueryInferenceScoresUntilBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Scores) > 0 {
		for _, e := range m.Scores {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryWorkerInferenceScoresAtBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *QueryWorkerInferenceScoresAtBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Scores != nil {
		l = m.Scores.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryForecastScoresUntilBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *QueryForecastScoresUntilBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Scores) > 0 {
		for _, e := range m.Scores {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryWorkerForecastScoresAtBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *QueryWorkerForecastScoresAtBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Scores != nil {
		l = m.Scores.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryReputersScoresAtBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *QueryReputersScoresAtBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Scores != nil {
		l = m.Scores.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListeningCoefficientRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Reputer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListeningCoefficientResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ListeningCoefficient != nil {
		l = m.ListeningCoefficient.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPreviousReputerRewardFractionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Reputer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPreviousReputerRewardFractionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RewardFraction.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.NotFound {
		n += 2
	}
	return n
}

func (m *QueryPreviousInferenceRewardFractionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Worker)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPreviousInferenceRewardFractionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RewardFraction.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.NotFound {
		n += 2
	}
	return n
}

func (m *QueryPreviousForecastRewardFractionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	l = len(m.Worker)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPreviousForecastRewardFractionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RewardFraction.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.NotFound {
		n += 2
	}
	return n
}

func (m *QueryPreviousPercentageRewardToStakedReputersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPreviousPercentageRewardToStakedReputersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PercentageReward.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTotalRewardToDistributeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTotalRewardToDistributeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TotalReward.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTopicLastWorkerPayloadRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *QueryTopicLastWorkerPayloadResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Payload != nil {
		l = m.Payload.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTopicLastReputerPayloadRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TopicId != 0 {
		n += 1 + sovQuery(uint64(m.TopicId))
	}
	return n
}

func (m *QueryTopicLastReputerPayloadResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Payload != nil {
		l = m.Payload.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalStakeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalStakeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalStakeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalStakeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalStakeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalStakeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReputerStakeInTopicRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReputerStakeInTopicRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReputerStakeInTopicRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReputerStakeInTopicResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReputerStakeInTopicResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReputerStakeInTopicResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMultiReputerStakeInTopicRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMultiReputerStakeInTopicRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMultiReputerStakeInTopicRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMultiReputerStakeInTopicResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMultiReputerStakeInTopicResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMultiReputerStakeInTopicResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amounts = append(m.Amounts, &StakeInfo{})
			if err := m.Amounts[len(m.Amounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakeFromReputerInTopicInSelfRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakeFromReputerInTopicInSelfRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakeFromReputerInTopicInSelfRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReputerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReputerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakeFromReputerInTopicInSelfResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakeFromReputerInTopicInSelfResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakeFromReputerInTopicInSelfResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegateStakeInTopicInReputerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegateStakeInTopicInReputerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegateStakeInTopicInReputerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReputerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReputerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegateStakeInTopicInReputerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegateStakeInTopicInReputerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegateStakeInTopicInReputerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakeFromDelegatorInTopicInReputerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakeFromDelegatorInTopicInReputerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakeFromDelegatorInTopicInReputerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReputerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReputerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakeFromDelegatorInTopicInReputerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakeFromDelegatorInTopicInReputerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakeFromDelegatorInTopicInReputerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakeFromDelegatorInTopicRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakeFromDelegatorInTopicRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakeFromDelegatorInTopicRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakeFromDelegatorInTopicResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakeFromDelegatorInTopicResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakeFromDelegatorInTopicResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTopicStakeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTopicStakeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTopicStakeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTopicStakeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTopicStakeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTopicStakeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNetworkLossBundleAtBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNetworkLossBundleAtBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNetworkLossBundleAtBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNetworkLossBundleAtBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNetworkLossBundleAtBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNetworkLossBundleAtBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LossBundle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LossBundle == nil {
				m.LossBundle = &ValueBundle{}
			}
			if err := m.LossBundle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNextTopicIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNextTopicIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNextTopicIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNextTopicIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNextTopicIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNextTopicIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextTopicId", wireType)
			}
			m.NextTopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextTopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTopicRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTopicRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTopicRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTopicResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTopicResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTopicResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Topic == nil {
				m.Topic = &Topic{}
			}
			if err := m.Topic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Weight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveRevenue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EffectiveRevenue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryActiveTopicsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActiveTopicsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActiveTopicsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &SimpleCursorPaginationRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryActiveTopicsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActiveTopicsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActiveTopicsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topics = append(m.Topics, &Topic{})
			if err := m.Topics[len(m.Topics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &SimpleCursorPaginationResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInferencesAtBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInferencesAtBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInferencesAtBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInferencesAtBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInferencesAtBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInferencesAtBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inferences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Inferences == nil {
				m.Inferences = &Inferences{}
			}
			if err := m.Inferences.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestTopicInferencesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestTopicInferencesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestTopicInferencesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestTopicInferencesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestTopicInferencesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestTopicInferencesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inferences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Inferences == nil {
				m.Inferences = &Inferences{}
			}
			if err := m.Inferences.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryForecastsAtBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryForecastsAtBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryForecastsAtBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryForecastsAtBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryForecastsAtBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryForecastsAtBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forecasts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Forecasts == nil {
				m.Forecasts = &Forecasts{}
			}
			if err := m.Forecasts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWorkerLatestInferenceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWorkerLatestInferenceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWorkerLatestInferenceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWorkerLatestInferenceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWorkerLatestInferenceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWorkerLatestInferenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestInference", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LatestInference == nil {
				m.LatestInference = &Inference{}
			}
			if err := m.LatestInference.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWorkerNodeInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWorkerNodeInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWorkerNodeInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWorkerNodeInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWorkerNodeInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWorkerNodeInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeInfo == nil {
				m.NodeInfo = &OffchainNode{}
			}
			if err := m.NodeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReputerNodeInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReputerNodeInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReputerNodeInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReputerNodeInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReputerNodeInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReputerNodeInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeInfo == nil {
				m.NodeInfo = &OffchainNode{}
			}
			if err := m.NodeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNetworkInferencesAtBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNetworkInferencesAtBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNetworkInferencesAtBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeightLastInference", wireType)
			}
			m.BlockHeightLastInference = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeightLastInference |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeightLastReward", wireType)
			}
			m.BlockHeightLastReward = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeightLastReward |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestNetworkInferencesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestNetworkInferencesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestNetworkInferencesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsWorkerNonceUnfulfilledRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsWorkerNonceUnfulfilledRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsWorkerNonceUnfulfilledRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsWorkerNonceUnfulfilledResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsWorkerNonceUnfulfilledResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsWorkerNonceUnfulfilledResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsWorkerNonceUnfulfilled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsWorkerNonceUnfulfilled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUnfulfilledReputerNoncesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUnfulfilledReputerNoncesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUnfulfilledReputerNoncesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUnfulfilledReputerNoncesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUnfulfilledReputerNoncesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUnfulfilledReputerNoncesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nonces == nil {
				m.Nonces = &ReputerRequestNonces{}
			}
			if err := m.Nonces.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUnfulfilledWorkerNoncesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUnfulfilledWorkerNoncesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUnfulfilledWorkerNoncesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUnfulfilledWorkerNoncesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUnfulfilledWorkerNoncesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUnfulfilledWorkerNoncesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nonces == nil {
				m.Nonces = &Nonces{}
			}
			if err := m.Nonces.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInfererNetworkRegretRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInfererNetworkRegretRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInfererNetworkRegretRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInfererNetworkRegretResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInfererNetworkRegretResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInfererNetworkRegretResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Regret", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Regret == nil {
				m.Regret = &TimestampedValue{}
			}
			if err := m.Regret.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryForecasterNetworkRegretRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryForecasterNetworkRegretRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryForecasterNetworkRegretRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Worker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Worker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryForecasterNetworkRegretResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryForecasterNetworkRegretResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryForecasterNetworkRegretResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Regret", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Regret == nil {
				m.Regret = &TimestampedValue{}
			}
			if err := m.Regret.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOneInForecasterNetworkRegretRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOneInForecasterNetworkRegretRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOneInForecasterNetworkRegretRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forecaster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Forecaster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inferer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inferer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOneInForecasterNetworkRegretResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOneInForecasterNetworkRegretResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOneInForecasterNetworkRegretResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Regret", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Regret == nil {
				m.Regret = &TimestampedValue{}
			}
			if err := m.Regret.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOneInForecasterSelfNetworkRegretRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOneInForecasterSelfNetworkRegretRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOneInForecasterSelfNetworkRegretRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forecaster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Forecaster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOneInForecasterSelfNetworkRegretResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOneInForecasterSelfNetworkRegretResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOneInForecasterSelfNetworkRegretResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Regret", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Regret == nil {
				m.Regret = &TimestampedValue{}
			}
			if err := m.Regret.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsReputerNonceUnfulfilledRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsReputerNonceUnfulfilledRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsReputerNonceUnfulfilledRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsReputerNonceUnfulfilledResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsReputerNonceUnfulfilledResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsReputerNonceUnfulfilledResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsReputerNonceUnfulfilled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsReputerNonceUnfulfilled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNetworkInferencesAtBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNetworkInferencesAtBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNetworkInferencesAtBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkInferences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NetworkInferences == nil {
				m.NetworkInferences = &ValueBundle{}
			}
			if err := m.NetworkInferences.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestNetworkInferencesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestNetworkInferencesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestNetworkInferencesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkInferences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NetworkInferences == nil {
				m.NetworkInferences = &ValueBundle{}
			}
			if err := m.NetworkInferences.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfererWeights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InfererWeights = append(m.InfererWeights, &RegretInformedWeight{})
			if err := m.InfererWeights[len(m.InfererWeights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForecasterWeights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForecasterWeights = append(m.ForecasterWeights, &RegretInformedWeight{})
			if err := m.ForecasterWeights[len(m.ForecasterWeights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForecastImpliedInferences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForecastImpliedInferences = append(m.ForecastImpliedInferences, &WorkerAttributedValue{})
			if err := m.ForecastImpliedInferences[len(m.ForecastImpliedInferences)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InferenceBlockHeight", wireType)
			}
			m.InferenceBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InferenceBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LossBlockHeight", wireType)
			}
			m.LossBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LossBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfidenceIntervalRawPercentiles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_allora_network_allora_chain_math.Dec
			m.ConfidenceIntervalRawPercentiles = append(m.ConfidenceIntervalRawPercentiles, v)
			if err := m.ConfidenceIntervalRawPercentiles[len(m.ConfidenceIntervalRawPercentiles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfidenceIntervalValues", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_allora_network_allora_chain_math.Dec
			m.ConfidenceIntervalValues = append(m.ConfidenceIntervalValues, v)
			if err := m.ConfidenceIntervalValues[len(m.ConfidenceIntervalValues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsWorkerRegisteredInTopicIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsWorkerRegisteredInTopicIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsWorkerRegisteredInTopicIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsWorkerRegisteredInTopicIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsWorkerRegisteredInTopicIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsWorkerRegisteredInTopicIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRegistered", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRegistered = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsReputerRegisteredInTopicIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsReputerRegisteredInTopicIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsReputerRegisteredInTopicIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsReputerRegisteredInTopicIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsReputerRegisteredInTopicIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsReputerRegisteredInTopicIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRegistered", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRegistered = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsWhitelistAdminRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsWhitelistAdminRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsWhitelistAdminRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsWhitelistAdminResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsWhitelistAdminResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsWhitelistAdminResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdmin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAdmin = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakeRemovalsUpUntilBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakeRemovalsUpUntilBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakeRemovalsUpUntilBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakeRemovalsUpUntilBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakeRemovalsUpUntilBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakeRemovalsUpUntilBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Removals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Removals = append(m.Removals, &StakeRemovalInfo{})
			if err := m.Removals[len(m.Removals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegateStakeRemovalsUpUntilBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegateStakeRemovalsUpUntilBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegateStakeRemovalsUpUntilBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegateStakeRemovalsUpUntilBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegateStakeRemovalsUpUntilBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegateStakeRemovalsUpUntilBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Removals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Removals = append(m.Removals, &DelegateStakeRemovalInfo{})
			if err := m.Removals[len(m.Removals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakeRemovalInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakeRemovalInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakeRemovalInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reputer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reputer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakeRemovalInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakeRemovalInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakeRemovalInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Removal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Removal == nil {
				m.Removal = &StakeRemovalInfo{}
			}
			if err := m.Removal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegateStakeRemovalInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegateStakeRemovalInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegateStakeRemovalInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reputer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reputer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegateStakeRemovalInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegateStakeRemovalInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegateStakeRemovalInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Removal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Removal == nil {
				m.Removal = &DelegateStakeRemovalInfo{}
			}
			if err := m.Removal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTopicLastCommitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTopicLastCommitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTopicLastCommitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTopicLastCommitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTopicLastCommitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTopicLastCommitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastCommit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastCommit == nil {
				m.LastCommit = &TimestampedActorNonce{}
			}
			if err := m.LastCommit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTopicRewardNonceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTopicRewardNonceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTopicRewardNonceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTopicRewardNonceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTopicRewardNonceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTopicRewardNonceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReputerLossBundlesAtBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReputerLossBundlesAtBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReputerLossBundlesAtBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReputerLossBundlesAtBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReputerLossBundlesAtBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReputerLossBundlesAtBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LossBundles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LossBundles == nil {
				m.LossBundles = &ReputerValueBundles{}
			}
			if err := m.LossBundles.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakeReputerAuthorityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakeReputerAuthorityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakeReputerAuthorityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reputer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reputer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakeReputerAuthorityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakeReputerAuthorityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakeReputerAuthorityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Authority.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegateStakePlacementRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegateStakePlacementRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegateStakePlacementRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegateStakePlacementResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegateStakePlacementResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegateStakePlacementResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DelegatorInfo == nil {
				m.DelegatorInfo = &DelegatorInfo{}
			}
			if err := m.DelegatorInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegateStakeUponReputerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegateStakeUponReputerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegateStakeUponReputerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegateStakeUponReputerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegateStakeUponReputerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegateStakeUponReputerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stake", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Stake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegateRewardPerShareRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegateRewardPerShareRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegateRewardPerShareRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reputer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reputer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegateRewardPerShareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegateRewardPerShareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegateRewardPerShareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPerShare", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardPerShare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakeRemovalForReputerAndTopicIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakeRemovalForReputerAndTopicIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakeRemovalForReputerAndTopicIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reputer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reputer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakeRemovalForReputerAndTopicIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakeRemovalForReputerAndTopicIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakeRemovalForReputerAndTopicIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeRemovalInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StakeRemovalInfo == nil {
				m.StakeRemovalInfo = &StakeRemovalInfo{}
			}
			if err := m.StakeRemovalInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegateStakeRemovalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegateStakeRemovalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegateStakeRemovalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reputer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reputer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegateStakeRemovalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegateStakeRemovalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegateStakeRemovalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeRemovalInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StakeRemovalInfo == nil {
				m.StakeRemovalInfo = &DelegateStakeRemovalInfo{}
			}
			if err := m.StakeRemovalInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPreviousTopicWeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPreviousTopicWeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPreviousTopicWeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPreviousTopicWeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPreviousTopicWeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPreviousTopicWeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Weight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotFound", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NotFound = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTopicExistsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTopicExistsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTopicExistsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTopicExistsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTopicExistsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTopicExistsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exists", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exists = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsTopicActiveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsTopicActiveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsTopicActiveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsTopicActiveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsTopicActiveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsTopicActiveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTopicFeeRevenueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTopicFeeRevenueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTopicFeeRevenueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTopicFeeRevenueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTopicFeeRevenueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTopicFeeRevenueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeRevenue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeRevenue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardableTopicsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardableTopicsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardableTopicsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardableTopicsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardableTopicsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardableTopicsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RewardableTopicIds = append(m.RewardableTopicIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RewardableTopicIds) == 0 {
					m.RewardableTopicIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RewardableTopicIds = append(m.RewardableTopicIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardableTopicIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestInfererScoreRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestInfererScoreRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestInfererScoreRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inferer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inferer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestInfererScoreResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestInfererScoreResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestInfererScoreResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Score == nil {
				m.Score = &Score{}
			}
			if err := m.Score.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestForecasterScoreRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestForecasterScoreRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestForecasterScoreRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forecaster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Forecaster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestForecasterScoreResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestForecasterScoreResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestForecasterScoreResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Score == nil {
				m.Score = &Score{}
			}
			if err := m.Score.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestReputerScoreRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestReputerScoreRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestReputerScoreRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reputer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reputer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestReputerScoreResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestReputerScoreResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestReputerScoreResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Score == nil {
				m.Score = &Score{}
			}
			if err := m.Score.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInferenceScoresUntilBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInferenceScoresUntilBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInferenceScoresUntilBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInferenceScoresUntilBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInferenceScoresUntilBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInferenceScoresUntilBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scores = append(m.Scores, &Score{})
			if err := m.Scores[len(m.Scores)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWorkerInferenceScoresAtBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWorkerInferenceScoresAtBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWorkerInferenceScoresAtBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWorkerInferenceScoresAtBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWorkerInferenceScoresAtBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWorkerInferenceScoresAtBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scores == nil {
				m.Scores = &Scores{}
			}
			if err := m.Scores.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryForecastScoresUntilBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryForecastScoresUntilBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryForecastScoresUntilBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryForecastScoresUntilBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryForecastScoresUntilBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryForecastScoresUntilBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scores = append(m.Scores, &Score{})
			if err := m.Scores[len(m.Scores)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWorkerForecastScoresAtBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWorkerForecastScoresAtBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWorkerForecastScoresAtBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWorkerForecastScoresAtBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWorkerForecastScoresAtBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWorkerForecastScoresAtBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scores == nil {
				m.Scores = &Scores{}
			}
			if err := m.Scores.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReputersScoresAtBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReputersScoresAtBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReputersScoresAtBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReputersScoresAtBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReputersScoresAtBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReputersScoresAtBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scores == nil {
				m.Scores = &Scores{}
			}
			if err := m.Scores.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListeningCoefficientRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListeningCoefficientRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListeningCoefficientRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reputer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reputer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListeningCoefficientResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListeningCoefficientResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListeningCoefficientResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListeningCoefficient", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ListeningCoefficient == nil {
				m.ListeningCoefficient = &ListeningCoefficient{}
			}
			if err := m.ListeningCoefficient.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPreviousReputerRewardFractionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPreviousReputerRewardFractionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPreviousReputerRewardFractionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reputer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reputer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPreviousReputerRewardFractionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPreviousReputerRewardFractionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPreviousReputerRewardFractionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardFraction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardFraction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotFound", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NotFound = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPreviousInferenceRewardFractionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPreviousInferenceRewardFractionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPreviousInferenceRewardFractionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Worker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Worker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPreviousInferenceRewardFractionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPreviousInferenceRewardFractionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPreviousInferenceRewardFractionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardFraction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardFraction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotFound", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NotFound = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPreviousForecastRewardFractionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPreviousForecastRewardFractionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPreviousForecastRewardFractionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Worker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Worker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPreviousForecastRewardFractionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPreviousForecastRewardFractionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPreviousForecastRewardFractionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardFraction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardFraction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotFound", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NotFound = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPreviousPercentageRewardToStakedReputersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPreviousPercentageRewardToStakedReputersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPreviousPercentageRewardToStakedReputersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPreviousPercentageRewardToStakedReputersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPreviousPercentageRewardToStakedReputersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPreviousPercentageRewardToStakedReputersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PercentageReward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PercentageReward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalRewardToDistributeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalRewardToDistributeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalRewardToDistributeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalRewardToDistributeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalRewardToDistributeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalRewardToDistributeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalReward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalReward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTopicLastWorkerPayloadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTopicLastWorkerPayloadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTopicLastWorkerPayloadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTopicLastWorkerPayloadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTopicLastWorkerPayloadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTopicLastWorkerPayloadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Payload == nil {
				m.Payload = &TimestampedActorNonce{}
			}
			if err := m.Payload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTopicLastReputerPayloadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTopicLastReputerPayloadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTopicLastReputerPayloadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			m.TopicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTopicLastReputerPayloadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTopicLastReputerPayloadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTopicLastReputerPayloadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Payload == nil {
				m.Payload = &TimestampedActorNonce{}
			}
			if err := m.Payload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
