syntax = "proto3";
package emissions.v3;

option go_package = "github.com/allora-network/allora-chain/x/emissions/types";

import "cosmos/msg/v1/msg.proto";
import "gogoproto/gogo.proto";
import "amino/amino.proto";
import "emissions/v3/types.proto";
import "cosmos_proto/cosmos.proto";
import "emissions/v3/nonce.proto";
import "emissions/v3/reputer.proto";
import "emissions/v3/worker.proto";

// Msg defines the module Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  rpc CreateNewTopic(MsgCreateNewTopic) returns (MsgCreateNewTopicResponse);

  rpc Register(MsgRegister) returns (MsgRegisterResponse);

  rpc RemoveRegistration(MsgRemoveRegistration) returns (MsgRemoveRegistrationResponse);

  rpc AddStake(MsgAddStake) returns (MsgAddStakeResponse);

  rpc RemoveStake(MsgRemoveStake) returns (MsgRemoveStakeResponse);

  rpc CancelRemoveStake(MsgCancelRemoveStake) returns (MsgCancelRemoveStakeResponse);

  rpc DelegateStake(MsgDelegateStake) returns (MsgDelegateStakeResponse);

  rpc RewardDelegateStake(MsgRewardDelegateStake) returns (MsgRewardDelegateStakeResponse);

  rpc RemoveDelegateStake(MsgRemoveDelegateStake) returns (MsgRemoveDelegateStakeResponse);

  rpc CancelRemoveDelegateStake(MsgCancelRemoveDelegateStake) returns (MsgCancelRemoveDelegateStakeResponse);

  rpc FundTopic(MsgFundTopic) returns (MsgFundTopicResponse);

  rpc AddToWhitelistAdmin(MsgAddToWhitelistAdmin) returns (MsgAddToWhitelistAdminResponse);

  rpc RemoveFromWhitelistAdmin(MsgRemoveFromWhitelistAdmin) returns (MsgRemoveFromWhitelistAdminResponse);

  rpc InsertWorkerPayload(MsgInsertWorkerPayload) returns (MsgInsertWorkerPayloadResponse);

  rpc InsertReputerPayload(MsgInsertReputerPayload) returns (MsgInsertReputerPayloadResponse);
}

/// PARAMS

// Because gocosmos, grpc-gateway, and go-pulsar do not support optional fields
// and including google themselves
// https://cloud.google.com/apis/design/design_patterns.md#optional_primitive_fields
// we instead use a repeated field with a single element to represent an
// optional field and if the repeated field is empty, it is considered to be the
// same as if the field was not set
message OptionalParams {
  reserved 26, 27, 41;
  reserved "min_effective_topic_revenue", "max_retries_to_fulfil_nonces_worker", "max_retries_to_fulfil_nonces_reputer";

  repeated string version = 1;
  repeated int64 max_serialized_msg_length = 2;
  repeated string min_topic_weight = 3
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  repeated uint64 max_topics_per_block = 4;
  repeated string required_minimum_stake = 5 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  repeated int64 remove_stake_delay_window = 6;
  repeated int64 min_epoch_length = 7;
  repeated string beta_entropy = 8
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  repeated string learning_rate = 9
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  repeated string max_gradient_threshold = 10
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  repeated string min_stake_fraction = 11
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  repeated uint64 max_unfulfilled_worker_requests = 13;
  repeated uint64 max_unfulfilled_reputer_requests = 14;
  repeated string topic_reward_stake_importance = 15
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  repeated string topic_reward_fee_revenue_importance = 16
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  repeated string topic_reward_alpha = 17
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  repeated string task_reward_alpha = 18
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  repeated string validators_vs_allora_percent_reward = 19
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  repeated uint64 max_samples_to_scale_scores = 20;
  repeated uint64 max_top_inferers_to_reward = 21;
  repeated uint64 max_top_forecasters_to_reward = 22;
  repeated uint64 max_top_reputers_to_reward = 23;
  repeated string create_topic_fee = 24 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  repeated uint64 gradient_descent_max_iters = 25;
  repeated string registration_fee = 28 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  repeated uint64 default_page_limit = 29;
  repeated uint64 max_page_limit = 30;
  repeated int64 min_epoch_length_record_limit = 31;
  repeated uint64 blocks_per_month = 32;
  repeated string p_reward_inference = 33
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  repeated string p_reward_forecast = 34
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  repeated string p_reward_reputer = 35
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  repeated string c_reward_inference = 36
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  repeated string c_reward_forecast = 37
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  repeated string c_norm = 38
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  repeated string topic_fee_revenue_decay_rate = 39
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  repeated string epsilon_reputer = 40
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  repeated uint64 half_max_process_stake_removals_end_block = 42;
  repeated string data_sending_fee = 43 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  repeated string epsilon_safe_div = 44
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  repeated uint64 max_elements_per_forecast = 45;
}

message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1;
  OptionalParams params = 2;
}

message MsgUpdateParamsResponse {}

/// TOPICS

message MsgCreateNewTopic {
  reserved 3, 5, 6, 9;
  reserved "loss_logic", "inference_logic", "inference_method", "default_arg";

  option (cosmos.msg.v1.signer) = "creator";

  // creator is the message sender.
  string creator = 1;
  string metadata = 2;
  string loss_method = 4;
  int64 epoch_length = 7;
  int64 ground_truth_lag = 8;
  string p_norm = 10
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  string alpha_regret = 11
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  bool allow_negative = 12;
  string epsilon = 13
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  int64 worker_submission_window = 14;
}

message MsgCreateNewTopicResponse {
  uint64 topic_id = 1;
}

/// Worker and Reputer Interface

message MsgInsertReputerPayload {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;
  ReputerValueBundle reputer_value_bundle = 2;
}

message MsgInsertReputerPayloadResponse {}

message MsgInsertWorkerPayload {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;
  WorkerDataBundle worker_data_bundle = 2;
}

message MsgInsertWorkerPayloadResponse {}
///  Inference Node Registration

message MsgRegister {
  reserved 2, 3;
  reserved "lib_p2p_key", "multi_address";

  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;
  uint64 topic_id = 4;
  string owner = 5;
  bool is_reputer = 6;
}

message MsgRegisterResponse {
  bool success = 1;
  string message = 2;
}

message MsgRemoveRegistration {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;
  uint64 topic_id = 2;
  bool is_reputer = 3;
}

message MsgRemoveRegistrationResponse {
  bool success = 1;
  string message = 2;
}

///  Staking

message MsgAddStake {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;
  uint64 topic_id = 2;
  string amount = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

message MsgAddStakeResponse {}

message MsgRemoveStake {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;
  uint64 topic_id = 2;
  string amount = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

message MsgRemoveStakeResponse {}

message MsgCancelRemoveStake {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1;
  uint64 topic_id = 2;
}

message MsgCancelRemoveStakeResponse {}

message MsgDelegateStake {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1;
  uint64 topic_id = 2;
  string reputer = 3;
  string amount = 4 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

message MsgDelegateStakeResponse {}

message MsgRemoveDelegateStake {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1;
  string reputer = 2;
  uint64 topic_id = 3;
  string amount = 4 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

message MsgRemoveDelegateStakeResponse {}

message MsgCancelRemoveDelegateStake {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1;
  uint64 topic_id = 2;
  string delegator = 3;
  string reputer = 4;
}

message MsgCancelRemoveDelegateStakeResponse {}

// Inferences are requested by consumers who fund topics by sending ALLO to
// ecosystem account via TopicFund messages
message MsgFundTopic {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1;
  uint64 topic_id = 2;
  string amount = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];  // how many funds to send from alice with this Inference Request
}

message MsgFundTopicResponse {}

///  Whitelist

message MsgAddToWhitelistAdmin {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;
  string address = 2;
}

message MsgAddToWhitelistAdminResponse {}

message MsgRemoveFromWhitelistAdmin {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1;
  string address = 2;
}

message MsgRemoveFromWhitelistAdminResponse {}

message MsgRewardDelegateStakeResponse {}

message MsgRewardDelegateStake {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1;
  uint64 topic_id = 2;
  string reputer = 3;
}