syntax = "proto3";
package emissions.v2;

option go_package = "github.com/allora-network/allora-chain/x/emissions/types";

import "cosmos/base/query/v1beta1/pagination.proto";
import "emissions/v2/types.proto";
import "google/api/annotations.proto";
import "cosmos/query/v1/query.proto";
import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "emissions/v2/params.proto";
import "emissions/v2/node.proto";
import "emissions/v2/worker.proto";
import "emissions/v2/reputer.proto";
import "emissions/v2/nonce.proto";
import "emissions/v2/topic.proto";
import "emissions/v2/stake.proto";
import "emissions/v2/inference.proto";
import "emissions/v2/score.proto";

// Msg defines the module Msg service.
service Query {
  // Params returns the module parameters.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/emissions/v2/params";
  }

  rpc GetNextTopicId(QueryNextTopicIdRequest) returns (QueryNextTopicIdResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/next_topic_id";
  }

  rpc GetTopic(QueryTopicRequest) returns (QueryTopicResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/topics/{topic_id}";
  }

  rpc GetActiveTopics(QueryActiveTopicsRequest) returns (QueryActiveTopicsResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/active_topics";
  }

  rpc GetWorkerLatestInferenceByTopicId(QueryWorkerLatestInferenceRequest)
      returns (QueryWorkerLatestInferenceResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/topics/{topic_id}/"
                                   "workers/{worker_address}/latest_inference";
  }

  rpc GetInferencesAtBlock(QueryInferencesAtBlockRequest) returns (QueryInferencesAtBlockResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/inferences/{topic_id}/{block_height}";
  }

  rpc GetLatestTopicInferences(QueryLatestTopicInferencesRequest) returns (QueryLatestTopicInferencesResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/latest_inferences/{topic_id}";
  }

  rpc GetForecastsAtBlock(QueryForecastsAtBlockRequest) returns (QueryForecastsAtBlockResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/forecasts/{topic_id}/{block_height}";
  }

  rpc GetNetworkLossBundleAtBlock(QueryNetworkLossBundleAtBlockRequest)
      returns (QueryNetworkLossBundleAtBlockResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/network_loss/{topic_id}/{block_height}";
  }

  rpc GetTotalStake(QueryTotalStakeRequest) returns (QueryTotalStakeResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/total_stake";
  }

  rpc GetReputerStakeInTopic(QueryReputerStakeInTopicRequest) returns (QueryReputerStakeInTopicResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/reputer_stake/{address}/{topic_id}";
  }

  rpc GetMultiReputerStakeInTopic(QueryMultiReputerStakeInTopicRequest)
      returns (QueryMultiReputerStakeInTopicResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/reputers_stakes/{topic_id}";
  }

  rpc GetStakeFromReputerInTopicInSelf(QueryStakeFromReputerInTopicInSelfRequest)
      returns (QueryStakeFromReputerInTopicInSelfResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/reputer_stake_self/{reputer_address}/{topic_id}";
  }

  rpc GetDelegateStakeInTopicInReputer(QueryDelegateStakeInTopicInReputerRequest)
      returns (QueryDelegateStakeInTopicInReputerResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/reputer_delegate_stake/{reputer_address}/{topic_id}";
  }

  rpc GetStakeFromDelegatorInTopicInReputer(QueryStakeFromDelegatorInTopicInReputerRequest)
      returns (QueryStakeFromDelegatorInTopicInReputerResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/delegate_stake/{delegator_address}/{reputer_address}/"
                                   "{topic_id}";
  }

  rpc GetStakeFromDelegatorInTopic(QueryStakeFromDelegatorInTopicRequest)
      returns (QueryStakeFromDelegatorInTopicResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/delegate_stake/{delegator_address}/{topic_id}";
  }

  rpc GetTopicStake(QueryTopicStakeRequest) returns (QueryTopicStakeResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/stake/{topic_id}";
  }

  rpc GetStakeRemovalsUpUntilBlock(QueryStakeRemovalsUpUntilBlockRequest)
      returns (QueryStakeRemovalsUpUntilBlockResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/stake_removals/{block_height}";
  }

  rpc GetDelegateStakeRemovalsUpUntilBlock(QueryDelegateStakeRemovalsUpUntilBlockRequest)
      returns (QueryDelegateStakeRemovalsUpUntilBlockResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/delegate_stake_removals/{block_height}";
  }

  rpc GetStakeRemovalInfo(QueryStakeRemovalInfoRequest) returns (QueryStakeRemovalInfoResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/stake_removal/{topic_id}/{reputer}";
  }

  rpc GetDelegateStakeRemovalInfo(QueryDelegateStakeRemovalInfoRequest)
      returns (QueryDelegateStakeRemovalInfoResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/delegate_stake_removal/{topic_id}/{delegator}/{reputer}";
  }

  rpc GetWorkerNodeInfo(QueryWorkerNodeInfoRequest) returns (QueryWorkerNodeInfoResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/worker/{address}";
  }

  rpc GetReputerNodeInfo(QueryReputerNodeInfoRequest) returns (QueryReputerNodeInfoResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/reputer/{address}";
  }

  rpc IsWorkerRegisteredInTopicId(QueryIsWorkerRegisteredInTopicIdRequest)
      returns (QueryIsWorkerRegisteredInTopicIdResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/worker_registered/{topic_id}/{address}";
  }

  rpc IsReputerRegisteredInTopicId(QueryIsReputerRegisteredInTopicIdRequest)
      returns (QueryIsReputerRegisteredInTopicIdResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/reputer_registered/{topic_id}/{address}";
  }

  rpc GetNetworkInferencesAtBlock(QueryNetworkInferencesAtBlockRequest)
      returns (QueryNetworkInferencesAtBlockResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/network_inferences/{topic_id}/last_inference/"
                                   "{block_height_last_inference}";
  }

  rpc GetLatestNetworkInference(QueryLatestNetworkInferencesRequest) returns (QueryLatestNetworkInferencesResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/network_inferences/{topic_id}";
  }

  rpc GetLatestAvailableNetworkInference(QueryLatestNetworkInferencesRequest)
      returns (QueryLatestNetworkInferencesResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/network_inferences/{topic_id}";
  }

  rpc IsWorkerNonceUnfulfilled(QueryIsWorkerNonceUnfulfilledRequest) returns (QueryIsWorkerNonceUnfulfilledResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/is_worker_nonce_unfulfilled/{topic_id}/{block_height}";
  }

  rpc IsReputerNonceUnfulfilled(QueryIsReputerNonceUnfulfilledRequest)
      returns (QueryIsReputerNonceUnfulfilledResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/is_reputer_nonce_unfulfilled/{topic_id}/{block_height}";
  }

  rpc GetUnfulfilledWorkerNonces(QueryUnfulfilledWorkerNoncesRequest) returns (QueryUnfulfilledWorkerNoncesResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/unfulfilled_worker_nonces/{topic_id}";
  }

  rpc GetUnfulfilledReputerNonces(QueryUnfulfilledReputerNoncesRequest)
      returns (QueryUnfulfilledReputerNoncesResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/unfulfilled_reputer_nonces/{topic_id}";
  }

  rpc GetInfererNetworkRegret(QueryInfererNetworkRegretRequest) returns (QueryInfererNetworkRegretResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/inferer_network_regret/{topic_id}/{actor_id}";
  }

  rpc GetForecasterNetworkRegret(QueryForecasterNetworkRegretRequest) returns (QueryForecasterNetworkRegretResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/forecaster_network_regret/{topic_id}/{worker}";
  }

  rpc GetOneInForecasterNetworkRegret(QueryOneInForecasterNetworkRegretRequest)
      returns (QueryOneInForecasterNetworkRegretResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/one_in_forecaster_network_regret/{topic_id}/"
                                   "{forecaster}/{inferer}";
  }

  rpc IsWhitelistAdmin(QueryIsWhitelistAdminRequest) returns (QueryIsWhitelistAdminResponse) {
    option (google.api.http).get = "/emissions/v2/whitelist_admin/{address}";
  }

  rpc GetTopicLastWorkerCommitInfo(QueryTopicLastCommitRequest) returns (QueryTopicLastCommitResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/topic_last_commit/{topic_id}";
  }

  rpc GetTopicLastReputerCommitInfo(QueryTopicLastCommitRequest) returns (QueryTopicLastCommitResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/topic_last_commit/{topic_id}";
  }

  rpc GetTopicRewardNonce(QueryTopicRewardNonceRequest) returns (QueryTopicRewardNonceResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/topic_reward_nonce/{topic_id}";
  }

  rpc GetReputerLossBundlesAtBlock(QueryReputerLossBundlesAtBlockRequest)
      returns (QueryReputerLossBundlesAtBlockResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/reputer_loss_bundles/{topic_id}/{block_height}";
  }

  rpc GetStakeReputerAuthority(QueryStakeReputerAuthorityRequest) returns (QueryStakeReputerAuthorityResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/stake_reputer_authority/{topic_id}/{reputer}";
  }

  rpc GetDelegateStakePlacement(QueryDelegateStakePlacementRequest) returns (QueryDelegateStakePlacementResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/delegate_stake_placement/"
                                   "{topic_id}/{delegator}/{target}";
  }

  rpc GetDelegateStakeUponReputer(QueryDelegateStakeUponReputerRequest)
      returns (QueryDelegateStakeUponReputerResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/delegate_stake_upon_reputer/{topic_id}/{target}";
  }

  rpc GetDelegateRewardPerShare(QueryDelegateRewardPerShareRequest) returns (QueryDelegateRewardPerShareResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/delegate_reward_per_share/{topic_id}/{reputer}";
  }

  rpc GetStakeRemovalForReputerAndTopicId(QueryStakeRemovalForReputerAndTopicIdRequest)
      returns (QueryStakeRemovalForReputerAndTopicIdResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/stake_removal/{reputer}/{topic_id}";
  }

  rpc GetDelegateStakeRemoval(QueryDelegateStakeRemovalRequest) returns (QueryDelegateStakeRemovalResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/delegate_stake_removal/{block_height}/{topic_id}/"
                                   "{delegator}/{reputer}";
  }

  rpc GetPreviousTopicWeight(QueryPreviousTopicWeightRequest) returns (QueryPreviousTopicWeightResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/previous_topic_weight/{topic_id}";
  }

  rpc TopicExists(QueryTopicExistsRequest) returns (QueryTopicExistsResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/topic_exists/{topic_id}";
  }

  rpc IsTopicActive(QueryIsTopicActiveRequest) returns (QueryIsTopicActiveResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/is_topic_active/{topic_id}";
  }

  rpc GetTopicFeeRevenue(QueryTopicFeeRevenueRequest) returns (QueryTopicFeeRevenueResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/topic_fee_revenue/{topic_id}";
  }

  rpc GetRewardableTopics(QueryRewardableTopicsRequest) returns (QueryRewardableTopicsResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/rewardable_topics";
  }

  rpc GetLatestInfererScore(QueryLatestInfererScoreRequest) returns (QueryLatestInfererScoreResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/latest_inferer_score/{topic_id}/{inferer}";
  }

  rpc GetLatestForecasterScore(QueryLatestForecasterScoreRequest) returns (QueryLatestForecasterScoreResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/latest_forecaster_score/{topic_id}/{forecaster}";
  }

  rpc GetLatestReputerScore(QueryLatestReputerScoreRequest) returns (QueryLatestReputerScoreResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/latest_reputer_score/{topic_id}/{reputer}";
  }

  rpc GetInferenceScoresUntilBlock(QueryInferenceScoresUntilBlockRequest)
      returns (QueryInferenceScoresUntilBlockResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/inference_scores_until_block/{topic_id}/{block_height}";
  }

  rpc GetWorkerInferenceScoresAtBlock(QueryWorkerInferenceScoresAtBlockRequest)
      returns (QueryWorkerInferenceScoresAtBlockResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/worker_inference_scores_at_block/{topic_id}/"
                                   "{block_height}";
  }

  rpc GetForecastScoresUntilBlock(QueryForecastScoresUntilBlockRequest)
      returns (QueryForecastScoresUntilBlockResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/forecast_scores_until_block/{topic_id}/{block_height}";
  }

  rpc GetWorkerForecastScoresAtBlock(QueryWorkerForecastScoresAtBlockRequest)
      returns (QueryWorkerForecastScoresAtBlockResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/worker_forecast_scores_at_block/{topic_id}/"
                                   "{block_height}";
  }

  rpc GetReputersScoresAtBlock(QueryReputersScoresAtBlockRequest) returns (QueryReputersScoresAtBlockResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/reputers_scores_at_block/{topic_id}/{block_height}";
  }

  rpc GetListeningCoefficient(QueryListeningCoefficientRequest) returns (QueryListeningCoefficientResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/listening_coefficient/{topic_id}/{reputer}";
  }

  rpc GetPreviousReputerRewardFraction(QueryPreviousReputerRewardFractionRequest)
      returns (QueryPreviousReputerRewardFractionResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/previous_reputer_reward_fraction/{topic_id}/{reputer}";
  }

  rpc GetPreviousInferenceRewardFraction(QueryPreviousInferenceRewardFractionRequest)
      returns (QueryPreviousInferenceRewardFractionResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/previous_inference_reward_fraction/{topic_id}/{worker}";
  }

  rpc GetPreviousForecastRewardFraction(QueryPreviousForecastRewardFractionRequest)
      returns (QueryPreviousForecastRewardFractionResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/previous_forecast_reward_fraction/{topic_id}/{worker}";
  }

  rpc GetPreviousPercentageRewardToStakedReputers(QueryPreviousPercentageRewardToStakedReputersRequest)
      returns (QueryPreviousPercentageRewardToStakedReputersResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/previous_percentage_reward_to_staked_reputers";
  }

  rpc GetTotalRewardToDistribute(QueryTotalRewardToDistributeRequest) returns (QueryTotalRewardToDistributeResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/total_reward_to_distribute";
  }

  rpc GetNaiveInfererNetworkRegret(QueryNaiveInfererNetworkRegretRequest)
      returns (QueryNaiveInfererNetworkRegretResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/native_inferer_network_regret";
  }

  rpc GetOneOutInfererInfererNetworkRegret(QueryOneOutInfererInfererNetworkRegretRequest)
      returns (QueryOneOutInfererInfererNetworkRegretResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/one_out_inferer_inferer_network_regret";
  }

  rpc GetOneOutInfererForecasterNetworkRegret(QueryOneOutInfererForecasterNetworkRegretRequest)
      returns (QueryOneOutInfererForecasterNetworkRegretResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/one_out_inferer_forecaster_network_regret";
  }

  rpc GetOneOutForecasterInfererNetworkRegret(QueryOneOutForecasterInfererNetworkRegretRequest)
      returns (QueryOneOutForecasterInfererNetworkRegretResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/one_out_forecaster_inferer_network_regret";
  }

  rpc GetOneOutForecasterForecasterNetworkRegret(QueryOneOutForecasterForecasterNetworkRegretRequest)
      returns (QueryOneOutForecasterForecasterNetworkRegretResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/emissions/v2/one_out_forecaster_forecaster_network_regret";
  }
}

message QueryNaiveInfererNetworkRegretRequest {
  uint64 topic_id = 1;
  string inferer = 2;
}

message QueryNaiveInfererNetworkRegretResponse {
  TimestampedValue regret = 1;
}

message QueryOneOutInfererInfererNetworkRegretRequest {
  uint64 topic_id = 1;
  string one_out_inferer = 2;
  string inferer = 3;
}

message QueryOneOutInfererInfererNetworkRegretResponse {
  TimestampedValue regret = 1;
}

message QueryOneOutInfererForecasterNetworkRegretRequest {
  uint64 topic_id = 1;
  string one_out_inferer = 2;
  string forecaster = 3;
}

message QueryOneOutInfererForecasterNetworkRegretResponse {
  TimestampedValue regret = 1;
}

message QueryOneOutForecasterInfererNetworkRegretRequest {
  uint64 topic_id = 1;
  string one_out_forecaster = 2;
  string inferer = 3;
}

message QueryOneOutForecasterInfererNetworkRegretResponse {
  TimestampedValue regret = 1;
}

message QueryOneOutForecasterForecasterNetworkRegretRequest {
  uint64 topic_id = 1;
  string one_out_forecaster = 2;
  string forecaster = 3;
}

message QueryOneOutForecasterForecasterNetworkRegretResponse {
  TimestampedValue regret = 1;
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params defines the parameters of the module.
  Params params = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// Total Stake returns the total amount of stake in the system
message QueryTotalStakeRequest {}

// Total Stake returns the total amount of stake in the system
//
// NOTE: The amount field is an Int which implements the custom method
// signatures required by gogoproto.
message QueryTotalStakeResponse {
  option (gogoproto.equal) = true;
  string amount = 1 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

message QueryReputerStakeInTopicRequest {
  string address = 1;
  uint64 topic_id = 2;
}

message QueryReputerStakeInTopicResponse {
  option (gogoproto.equal) = true;
  string amount = 1 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

message QueryMultiReputerStakeInTopicRequest {
  repeated string addresses = 1;
  uint64 topic_id = 2;
}

message QueryMultiReputerStakeInTopicResponse {
  repeated StakeInfo amounts = 1;
}

message QueryStakeFromReputerInTopicInSelfRequest {
  string reputer_address = 1;
  uint64 topic_id = 2;
}

message QueryStakeFromReputerInTopicInSelfResponse {
  option (gogoproto.equal) = true;
  string amount = 1 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

message QueryDelegateStakeInTopicInReputerRequest {
  string reputer_address = 1;
  uint64 topic_id = 2;
}

message QueryDelegateStakeInTopicInReputerResponse {
  option (gogoproto.equal) = true;
  string amount = 1 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

message QueryStakeFromDelegatorInTopicInReputerRequest {
  string delegator_address = 1;
  string reputer_address = 2;
  uint64 topic_id = 3;
}

message QueryStakeFromDelegatorInTopicInReputerResponse {
  option (gogoproto.equal) = true;
  string amount = 1 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

message QueryStakeFromDelegatorInTopicRequest {
  string delegator_address = 1;
  uint64 topic_id = 2;
}

message QueryStakeFromDelegatorInTopicResponse {
  option (gogoproto.equal) = true;
  string amount = 1 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

message QueryTopicStakeRequest {
  uint64 topic_id = 1;
}

message QueryTopicStakeResponse {
  option (gogoproto.equal) = true;
  string amount = 1 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

message QueryNetworkLossBundleAtBlockRequest {
  uint64 topic_id = 1;
  int64 block_height = 2;
}

message QueryNetworkLossBundleAtBlockResponse {
  ValueBundle loss_bundle = 1;
}

message QueryNextTopicIdRequest {}

message QueryNextTopicIdResponse {
  uint64 next_topic_id = 1;
}

message QueryTopicRequest {
  uint64 topic_id = 1;
}

message QueryTopicResponse {
  Topic topic = 1;
  string weight = 2;
  string effective_revenue = 3;
}

message QueryActiveTopicsRequest {
  SimpleCursorPaginationRequest pagination = 1;
}

message QueryActiveTopicsResponse {
  repeated Topic topics = 1;
  SimpleCursorPaginationResponse pagination = 2;
}

// Returns the inferences on a topic posted at a block height
message QueryInferencesAtBlockRequest {
  uint64 topic_id = 1;
  int64 block_height = 2;
}

// Returns the inferences on a topic posted at a block height
//
// NOTE: The amount field is a Uint which implements the custom method
// signatures required by gogoproto.
message QueryInferencesAtBlockResponse {
  Inferences inferences = 1;
}

message QueryLatestTopicInferencesRequest {
  uint64 topic_id = 1;
}

message QueryLatestTopicInferencesResponse {
  Inferences inferences = 1;
  int64 block_height = 2;
}

// Returns the forecasts on a topic posted at a block height
message QueryForecastsAtBlockRequest {
  uint64 topic_id = 1;
  int64 block_height = 2;
}

// Returns the forecasts on a topic posted at a block height
//
// NOTE: The amount field is a Uint which implements the custom method
// signatures required by gogoproto.
message QueryForecastsAtBlockResponse {
  Forecasts forecasts = 1;
}

message QueryWorkerLatestInferenceRequest {
  uint64 topic_id = 1;
  string worker_address = 2;
}

message QueryWorkerLatestInferenceResponse {
  Inference latest_inference = 1;
}

message QueryWorkerNodeInfoRequest {
  reserved 1;
  reserved "libp2p_key";

  string address = 2;
}

message QueryWorkerNodeInfoResponse {
  OffchainNode node_info = 1;
}

message QueryReputerNodeInfoRequest {
  reserved 1;
  reserved "libp2p_key";

  string address = 2;
}

message QueryReputerNodeInfoResponse {
  OffchainNode node_info = 1;
}

message QueryNetworkInferencesAtBlockRequest {
  reserved 3;
  reserved "block_height_last_reward";
  
  uint64 topic_id = 1;
  int64 block_height_last_inference = 2;
}

message QueryLatestNetworkInferencesRequest {
  uint64 topic_id = 1;
}

message QueryIsWorkerNonceUnfulfilledRequest {
  uint64 topic_id = 1;
  int64 block_height = 2;
}

message QueryIsWorkerNonceUnfulfilledResponse {
  bool is_worker_nonce_unfulfilled = 1;
}

message QueryUnfulfilledReputerNoncesRequest {
  uint64 topic_id = 1;
}

message QueryUnfulfilledReputerNoncesResponse {
  ReputerRequestNonces nonces = 1;
}

message QueryUnfulfilledWorkerNoncesRequest {
  uint64 topic_id = 1;
}

message QueryUnfulfilledWorkerNoncesResponse {
  Nonces nonces = 1;
}

message QueryInfererNetworkRegretRequest {
  uint64 topic_id = 1;
  string actor_id = 2;
}

message QueryInfererNetworkRegretResponse {
  TimestampedValue regret = 1;
}

message QueryForecasterNetworkRegretRequest {
  uint64 topic_id = 1;
  string worker = 2;
}

message QueryForecasterNetworkRegretResponse {
  TimestampedValue regret = 1;
}

message QueryOneInForecasterNetworkRegretRequest {
  uint64 topic_id = 1;
  string forecaster = 2;
  string inferer = 3;
}

message QueryOneInForecasterNetworkRegretResponse {
  TimestampedValue regret = 1;
}

message QueryIsReputerNonceUnfulfilledRequest {
  uint64 topic_id = 1;
  int64 block_height = 2;
}

message QueryIsReputerNonceUnfulfilledResponse {
  bool is_reputer_nonce_unfulfilled = 1;
}

message QueryNetworkInferencesAtBlockResponse {
  ValueBundle network_inferences = 1;
}

message QueryLatestNetworkInferencesResponse {
  ValueBundle network_inferences = 1;
  repeated RegretInformedWeight inferer_weights = 2;
  repeated RegretInformedWeight forecaster_weights = 3;
  repeated WorkerAttributedValue forecastImpliedInferences = 4;
  int64 inference_block_height = 5;
  int64 loss_block_height = 6;
  repeated string confidence_interval_raw_percentiles = 7
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  repeated string confidence_interval_values = 8
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
}

message QueryIsWorkerRegisteredInTopicIdRequest {
  uint64 topic_id = 1;
  string address = 2;
}

message QueryIsWorkerRegisteredInTopicIdResponse {
  bool is_registered = 1;
}

message QueryIsReputerRegisteredInTopicIdRequest {
  uint64 topic_id = 1;
  string address = 2;
}

message QueryIsReputerRegisteredInTopicIdResponse {
  bool is_registered = 1;
}

message QueryIsWhitelistAdminRequest {
  string address = 1;
}

message QueryIsWhitelistAdminResponse {
  bool is_admin = 1;
}

message QueryStakeRemovalsUpUntilBlockRequest {
  int64 block_height = 1;
}

message QueryStakeRemovalsUpUntilBlockResponse {
  repeated StakeRemovalInfo removals = 1;
}

message QueryDelegateStakeRemovalsUpUntilBlockRequest {
  int64 block_height = 1;
}

message QueryDelegateStakeRemovalsUpUntilBlockResponse {
  repeated DelegateStakeRemovalInfo removals = 1;
}

message QueryStakeRemovalInfoRequest {
  uint64 topic_id = 1;
  string reputer = 2;
}

message QueryStakeRemovalInfoResponse {
  StakeRemovalInfo removal = 1;
}

message QueryDelegateStakeRemovalInfoRequest {
  uint64 topic_id = 1;
  string delegator = 2;
  string reputer = 3;
}

message QueryDelegateStakeRemovalInfoResponse {
  DelegateStakeRemovalInfo removal = 1;
}

message QueryTopicLastCommitRequest {
  uint64 topic_id = 1;
}

message QueryTopicLastCommitResponse {
  TimestampedActorNonce last_commit = 1;
}

message QueryTopicRewardNonceRequest {
  uint64 topic_id = 1;
}

message QueryTopicRewardNonceResponse {
  int64 nonce = 1;
}

message QueryReputerLossBundlesAtBlockRequest {
  uint64 topic_id = 1;
  int64 block_height = 2;
}

message QueryReputerLossBundlesAtBlockResponse {
  ReputerValueBundles loss_bundles = 1;
}

message QueryStakeReputerAuthorityRequest {
  uint64 topic_id = 1;
  string reputer = 2;
}

message QueryStakeReputerAuthorityResponse {
  string authority = 1 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

message QueryDelegateStakePlacementRequest {
  uint64 topic_id = 1;
  string delegator = 2;
  string target = 3;
}

message QueryDelegateStakePlacementResponse {
  DelegatorInfo delegator_info = 1;
}

message QueryDelegateStakeUponReputerRequest {
  uint64 topic_id = 1;
  string target = 2;
}

message QueryDelegateStakeUponReputerResponse {
  string stake = 1 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

message QueryDelegateRewardPerShareRequest {
  uint64 topic_id = 1;
  string reputer = 2;
}

message QueryDelegateRewardPerShareResponse {
  string reward_per_share = 1
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
}

message QueryStakeRemovalForReputerAndTopicIdRequest {
  string reputer = 1;
  uint64 topic_id = 2;
}

message QueryStakeRemovalForReputerAndTopicIdResponse {
  StakeRemovalInfo stake_removal_info = 1;
}

message QueryDelegateStakeRemovalRequest {
  int64 block_height = 1;
  uint64 topic_id = 2;
  string delegator = 3;
  string reputer = 4;
}

message QueryDelegateStakeRemovalResponse {
  DelegateStakeRemovalInfo stake_removal_info = 1;
}

message QueryPreviousTopicWeightRequest {
  uint64 topic_id = 1;
}

message QueryPreviousTopicWeightResponse {
  string weight = 1
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  bool not_found = 2;
}

message QueryTopicExistsRequest {
  uint64 topic_id = 1;
}

message QueryTopicExistsResponse {
  bool exists = 1;
}

message QueryIsTopicActiveRequest {
  uint64 topic_id = 1;
}

message QueryIsTopicActiveResponse {
  bool is_active = 1;
}

message QueryTopicFeeRevenueRequest {
  uint64 topic_id = 1;
}

message QueryTopicFeeRevenueResponse {
  string fee_revenue = 1 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

message QueryRewardableTopicsRequest {}

message QueryRewardableTopicsResponse {
  repeated uint64 rewardable_topic_ids = 1;
}

message QueryLatestInfererScoreRequest {
  uint64 topic_id = 1;
  string inferer = 2;
}

message QueryLatestInfererScoreResponse {
  Score score = 1;
}

message QueryLatestForecasterScoreRequest {
  uint64 topic_id = 1;
  string forecaster = 2;
}

message QueryLatestForecasterScoreResponse {
  Score score = 1;
}

message QueryLatestReputerScoreRequest {
  uint64 topic_id = 1;
  string reputer = 2;
}

message QueryLatestReputerScoreResponse {
  Score score = 1;
}

message QueryInferenceScoresUntilBlockRequest {
  uint64 topic_id = 1;
  int64 block_height = 2;
}

message QueryInferenceScoresUntilBlockResponse {
  repeated Score scores = 1;
}

message QueryWorkerInferenceScoresAtBlockRequest {
  uint64 topic_id = 1;
  int64 block_height = 2;
}

message QueryWorkerInferenceScoresAtBlockResponse {
  Scores scores = 1;
}

message QueryForecastScoresUntilBlockRequest {
  uint64 topic_id = 1;
  int64 block_height = 2;
}

message QueryForecastScoresUntilBlockResponse {
  repeated Score scores = 1;
}

message QueryWorkerForecastScoresAtBlockRequest {
  uint64 topic_id = 1;
  int64 block_height = 2;
}

message QueryWorkerForecastScoresAtBlockResponse {
  Scores scores = 1;
}

message QueryReputersScoresAtBlockRequest {
  uint64 topic_id = 1;
  int64 block_height = 2;
}

message QueryReputersScoresAtBlockResponse {
  Scores scores = 1;
}

message QueryListeningCoefficientRequest {
  uint64 topic_id = 1;
  string reputer = 2;
}

message QueryListeningCoefficientResponse {
  ListeningCoefficient listening_coefficient = 1;
}

message QueryPreviousReputerRewardFractionRequest {
  uint64 topic_id = 1;
  string reputer = 2;
}

message QueryPreviousReputerRewardFractionResponse {
  string reward_fraction = 1
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  bool not_found = 2;
}

message QueryPreviousInferenceRewardFractionRequest {
  uint64 topic_id = 1;
  string worker = 2;
}

message QueryPreviousInferenceRewardFractionResponse {
  string reward_fraction = 1
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  bool not_found = 2;
}

message QueryPreviousForecastRewardFractionRequest {
  uint64 topic_id = 1;
  string worker = 2;
}

message QueryPreviousForecastRewardFractionResponse {
  string reward_fraction = 1
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
  bool not_found = 2;
}
message QueryPreviousPercentageRewardToStakedReputersRequest {}

message QueryPreviousPercentageRewardToStakedReputersResponse {
  string percentage_reward = 1
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
}

message QueryTotalRewardToDistributeRequest {}

message QueryTotalRewardToDistributeResponse {
  string total_reward = 1
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
}
