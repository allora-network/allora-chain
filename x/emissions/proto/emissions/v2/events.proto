syntax = "proto3";
package emissions.v2;

option go_package = "github.com/allora-network/allora-chain/x/emissions/types";

import "gogoproto/gogo.proto";
import "emissions/v2/reputer.proto";

// We choose a denormalized schema for events to balance the size and number of
// events, as well as the complexity of likely downstream write and read
// patterns. One likely cares about how the topic performs in totality and may
// want to update topic state after all topic information is in, or in some
// chronological order. If one normalizs by actor type, then the event volume is
// likely to be much higher and one would have to wait an undetermined amount of
// time (how many actors participated
// == how many events to wait for) to update an topic state-level metric.
// Furthermore, we know that the size of each of these messages is bounded by
// the global parameters that bound the max number of actors and topics. If one
// were to track per-actor-per-type metrics, then one immediately knows that
// they were included and participated or not in the topic at a particular block
// height as soon as one event from the topic is recorded.

enum ActorType {
  INFERER = 0;
  FORECASTER = 1;
  REPUTER = 2;
}

message EventScoresSet {
  ActorType actor_type = 1;
  uint64 topic_id = 2;
  int64 block_height = 3;
  repeated string addresses = 4;
  repeated string scores = 5
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
}

message EventRewardsSettled {
  ActorType actor_type = 1;
  uint64 topic_id = 2;
  int64 block_height = 3;
  repeated string addresses = 4;
  repeated string rewards = 5
      [(gogoproto.customtype) = "github.com/allora-network/allora-chain/math.Dec", (gogoproto.nullable) = false];
}

message EventNetworkLossSet {
  uint64 topic_id = 1;
  int64 block_height = 2;
  ValueBundle value_bundle = 3;
}
