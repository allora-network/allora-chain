// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package emissionsv3

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_Params                                           protoreflect.MessageDescriptor
	fd_Params_version                                   protoreflect.FieldDescriptor
	fd_Params_max_serialized_msg_length                 protoreflect.FieldDescriptor
	fd_Params_min_topic_weight                          protoreflect.FieldDescriptor
	fd_Params_required_minimum_stake                    protoreflect.FieldDescriptor
	fd_Params_remove_stake_delay_window                 protoreflect.FieldDescriptor
	fd_Params_min_epoch_length                          protoreflect.FieldDescriptor
	fd_Params_beta_entropy                              protoreflect.FieldDescriptor
	fd_Params_learning_rate                             protoreflect.FieldDescriptor
	fd_Params_max_gradient_threshold                    protoreflect.FieldDescriptor
	fd_Params_min_stake_fraction                        protoreflect.FieldDescriptor
	fd_Params_max_unfulfilled_worker_requests           protoreflect.FieldDescriptor
	fd_Params_max_unfulfilled_reputer_requests          protoreflect.FieldDescriptor
	fd_Params_topic_reward_stake_importance             protoreflect.FieldDescriptor
	fd_Params_topic_reward_fee_revenue_importance       protoreflect.FieldDescriptor
	fd_Params_topic_reward_alpha                        protoreflect.FieldDescriptor
	fd_Params_task_reward_alpha                         protoreflect.FieldDescriptor
	fd_Params_validators_vs_allora_percent_reward       protoreflect.FieldDescriptor
	fd_Params_max_samples_to_scale_scores               protoreflect.FieldDescriptor
	fd_Params_max_top_inferers_to_reward                protoreflect.FieldDescriptor
	fd_Params_max_top_forecasters_to_reward             protoreflect.FieldDescriptor
	fd_Params_max_top_reputers_to_reward                protoreflect.FieldDescriptor
	fd_Params_create_topic_fee                          protoreflect.FieldDescriptor
	fd_Params_gradient_descent_max_iters                protoreflect.FieldDescriptor
	fd_Params_registration_fee                          protoreflect.FieldDescriptor
	fd_Params_default_page_limit                        protoreflect.FieldDescriptor
	fd_Params_max_page_limit                            protoreflect.FieldDescriptor
	fd_Params_min_epoch_length_record_limit             protoreflect.FieldDescriptor
	fd_Params_blocks_per_month                          protoreflect.FieldDescriptor
	fd_Params_p_reward_inference                        protoreflect.FieldDescriptor
	fd_Params_p_reward_forecast                         protoreflect.FieldDescriptor
	fd_Params_p_reward_reputer                          protoreflect.FieldDescriptor
	fd_Params_c_reward_inference                        protoreflect.FieldDescriptor
	fd_Params_c_reward_forecast                         protoreflect.FieldDescriptor
	fd_Params_c_norm                                    protoreflect.FieldDescriptor
	fd_Params_epsilon_reputer                           protoreflect.FieldDescriptor
	fd_Params_half_max_process_stake_removals_end_block protoreflect.FieldDescriptor
	fd_Params_epsilon_safe_div                          protoreflect.FieldDescriptor
	fd_Params_data_sending_fee                          protoreflect.FieldDescriptor
	fd_Params_max_elements_per_forecast                 protoreflect.FieldDescriptor
	fd_Params_max_active_topics_per_block               protoreflect.FieldDescriptor
)

func init() {
	file_emissions_v3_params_proto_init()
	md_Params = File_emissions_v3_params_proto.Messages().ByName("Params")
	fd_Params_version = md_Params.Fields().ByName("version")
	fd_Params_max_serialized_msg_length = md_Params.Fields().ByName("max_serialized_msg_length")
	fd_Params_min_topic_weight = md_Params.Fields().ByName("min_topic_weight")
	fd_Params_required_minimum_stake = md_Params.Fields().ByName("required_minimum_stake")
	fd_Params_remove_stake_delay_window = md_Params.Fields().ByName("remove_stake_delay_window")
	fd_Params_min_epoch_length = md_Params.Fields().ByName("min_epoch_length")
	fd_Params_beta_entropy = md_Params.Fields().ByName("beta_entropy")
	fd_Params_learning_rate = md_Params.Fields().ByName("learning_rate")
	fd_Params_max_gradient_threshold = md_Params.Fields().ByName("max_gradient_threshold")
	fd_Params_min_stake_fraction = md_Params.Fields().ByName("min_stake_fraction")
	fd_Params_max_unfulfilled_worker_requests = md_Params.Fields().ByName("max_unfulfilled_worker_requests")
	fd_Params_max_unfulfilled_reputer_requests = md_Params.Fields().ByName("max_unfulfilled_reputer_requests")
	fd_Params_topic_reward_stake_importance = md_Params.Fields().ByName("topic_reward_stake_importance")
	fd_Params_topic_reward_fee_revenue_importance = md_Params.Fields().ByName("topic_reward_fee_revenue_importance")
	fd_Params_topic_reward_alpha = md_Params.Fields().ByName("topic_reward_alpha")
	fd_Params_task_reward_alpha = md_Params.Fields().ByName("task_reward_alpha")
	fd_Params_validators_vs_allora_percent_reward = md_Params.Fields().ByName("validators_vs_allora_percent_reward")
	fd_Params_max_samples_to_scale_scores = md_Params.Fields().ByName("max_samples_to_scale_scores")
	fd_Params_max_top_inferers_to_reward = md_Params.Fields().ByName("max_top_inferers_to_reward")
	fd_Params_max_top_forecasters_to_reward = md_Params.Fields().ByName("max_top_forecasters_to_reward")
	fd_Params_max_top_reputers_to_reward = md_Params.Fields().ByName("max_top_reputers_to_reward")
	fd_Params_create_topic_fee = md_Params.Fields().ByName("create_topic_fee")
	fd_Params_gradient_descent_max_iters = md_Params.Fields().ByName("gradient_descent_max_iters")
	fd_Params_registration_fee = md_Params.Fields().ByName("registration_fee")
	fd_Params_default_page_limit = md_Params.Fields().ByName("default_page_limit")
	fd_Params_max_page_limit = md_Params.Fields().ByName("max_page_limit")
	fd_Params_min_epoch_length_record_limit = md_Params.Fields().ByName("min_epoch_length_record_limit")
	fd_Params_blocks_per_month = md_Params.Fields().ByName("blocks_per_month")
	fd_Params_p_reward_inference = md_Params.Fields().ByName("p_reward_inference")
	fd_Params_p_reward_forecast = md_Params.Fields().ByName("p_reward_forecast")
	fd_Params_p_reward_reputer = md_Params.Fields().ByName("p_reward_reputer")
	fd_Params_c_reward_inference = md_Params.Fields().ByName("c_reward_inference")
	fd_Params_c_reward_forecast = md_Params.Fields().ByName("c_reward_forecast")
	fd_Params_c_norm = md_Params.Fields().ByName("c_norm")
	fd_Params_epsilon_reputer = md_Params.Fields().ByName("epsilon_reputer")
	fd_Params_half_max_process_stake_removals_end_block = md_Params.Fields().ByName("half_max_process_stake_removals_end_block")
	fd_Params_epsilon_safe_div = md_Params.Fields().ByName("epsilon_safe_div")
	fd_Params_data_sending_fee = md_Params.Fields().ByName("data_sending_fee")
	fd_Params_max_elements_per_forecast = md_Params.Fields().ByName("max_elements_per_forecast")
	fd_Params_max_active_topics_per_block = md_Params.Fields().ByName("max_active_topics_per_block")
}

var _ protoreflect.Message = (*fastReflection_Params)(nil)

type fastReflection_Params Params

func (x *Params) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Params)(x)
}

func (x *Params) slowProtoReflect() protoreflect.Message {
	mi := &file_emissions_v3_params_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Params_messageType fastReflection_Params_messageType
var _ protoreflect.MessageType = fastReflection_Params_messageType{}

type fastReflection_Params_messageType struct{}

func (x fastReflection_Params_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Params)(nil)
}
func (x fastReflection_Params_messageType) New() protoreflect.Message {
	return new(fastReflection_Params)
}
func (x fastReflection_Params_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Params
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Params) Descriptor() protoreflect.MessageDescriptor {
	return md_Params
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Params) Type() protoreflect.MessageType {
	return _fastReflection_Params_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Params) New() protoreflect.Message {
	return new(fastReflection_Params)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Params) Interface() protoreflect.ProtoMessage {
	return (*Params)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Params) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Version != "" {
		value := protoreflect.ValueOfString(x.Version)
		if !f(fd_Params_version, value) {
			return
		}
	}
	if x.MaxSerializedMsgLength != int64(0) {
		value := protoreflect.ValueOfInt64(x.MaxSerializedMsgLength)
		if !f(fd_Params_max_serialized_msg_length, value) {
			return
		}
	}
	if x.MinTopicWeight != "" {
		value := protoreflect.ValueOfString(x.MinTopicWeight)
		if !f(fd_Params_min_topic_weight, value) {
			return
		}
	}
	if x.RequiredMinimumStake != "" {
		value := protoreflect.ValueOfString(x.RequiredMinimumStake)
		if !f(fd_Params_required_minimum_stake, value) {
			return
		}
	}
	if x.RemoveStakeDelayWindow != int64(0) {
		value := protoreflect.ValueOfInt64(x.RemoveStakeDelayWindow)
		if !f(fd_Params_remove_stake_delay_window, value) {
			return
		}
	}
	if x.MinEpochLength != int64(0) {
		value := protoreflect.ValueOfInt64(x.MinEpochLength)
		if !f(fd_Params_min_epoch_length, value) {
			return
		}
	}
	if x.BetaEntropy != "" {
		value := protoreflect.ValueOfString(x.BetaEntropy)
		if !f(fd_Params_beta_entropy, value) {
			return
		}
	}
	if x.LearningRate != "" {
		value := protoreflect.ValueOfString(x.LearningRate)
		if !f(fd_Params_learning_rate, value) {
			return
		}
	}
	if x.MaxGradientThreshold != "" {
		value := protoreflect.ValueOfString(x.MaxGradientThreshold)
		if !f(fd_Params_max_gradient_threshold, value) {
			return
		}
	}
	if x.MinStakeFraction != "" {
		value := protoreflect.ValueOfString(x.MinStakeFraction)
		if !f(fd_Params_min_stake_fraction, value) {
			return
		}
	}
	if x.MaxUnfulfilledWorkerRequests != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MaxUnfulfilledWorkerRequests)
		if !f(fd_Params_max_unfulfilled_worker_requests, value) {
			return
		}
	}
	if x.MaxUnfulfilledReputerRequests != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MaxUnfulfilledReputerRequests)
		if !f(fd_Params_max_unfulfilled_reputer_requests, value) {
			return
		}
	}
	if x.TopicRewardStakeImportance != "" {
		value := protoreflect.ValueOfString(x.TopicRewardStakeImportance)
		if !f(fd_Params_topic_reward_stake_importance, value) {
			return
		}
	}
	if x.TopicRewardFeeRevenueImportance != "" {
		value := protoreflect.ValueOfString(x.TopicRewardFeeRevenueImportance)
		if !f(fd_Params_topic_reward_fee_revenue_importance, value) {
			return
		}
	}
	if x.TopicRewardAlpha != "" {
		value := protoreflect.ValueOfString(x.TopicRewardAlpha)
		if !f(fd_Params_topic_reward_alpha, value) {
			return
		}
	}
	if x.TaskRewardAlpha != "" {
		value := protoreflect.ValueOfString(x.TaskRewardAlpha)
		if !f(fd_Params_task_reward_alpha, value) {
			return
		}
	}
	if x.ValidatorsVsAlloraPercentReward != "" {
		value := protoreflect.ValueOfString(x.ValidatorsVsAlloraPercentReward)
		if !f(fd_Params_validators_vs_allora_percent_reward, value) {
			return
		}
	}
	if x.MaxSamplesToScaleScores != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MaxSamplesToScaleScores)
		if !f(fd_Params_max_samples_to_scale_scores, value) {
			return
		}
	}
	if x.MaxTopInferersToReward != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MaxTopInferersToReward)
		if !f(fd_Params_max_top_inferers_to_reward, value) {
			return
		}
	}
	if x.MaxTopForecastersToReward != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MaxTopForecastersToReward)
		if !f(fd_Params_max_top_forecasters_to_reward, value) {
			return
		}
	}
	if x.MaxTopReputersToReward != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MaxTopReputersToReward)
		if !f(fd_Params_max_top_reputers_to_reward, value) {
			return
		}
	}
	if x.CreateTopicFee != "" {
		value := protoreflect.ValueOfString(x.CreateTopicFee)
		if !f(fd_Params_create_topic_fee, value) {
			return
		}
	}
	if x.GradientDescentMaxIters != uint64(0) {
		value := protoreflect.ValueOfUint64(x.GradientDescentMaxIters)
		if !f(fd_Params_gradient_descent_max_iters, value) {
			return
		}
	}
	if x.RegistrationFee != "" {
		value := protoreflect.ValueOfString(x.RegistrationFee)
		if !f(fd_Params_registration_fee, value) {
			return
		}
	}
	if x.DefaultPageLimit != uint64(0) {
		value := protoreflect.ValueOfUint64(x.DefaultPageLimit)
		if !f(fd_Params_default_page_limit, value) {
			return
		}
	}
	if x.MaxPageLimit != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MaxPageLimit)
		if !f(fd_Params_max_page_limit, value) {
			return
		}
	}
	if x.MinEpochLengthRecordLimit != int64(0) {
		value := protoreflect.ValueOfInt64(x.MinEpochLengthRecordLimit)
		if !f(fd_Params_min_epoch_length_record_limit, value) {
			return
		}
	}
	if x.BlocksPerMonth != uint64(0) {
		value := protoreflect.ValueOfUint64(x.BlocksPerMonth)
		if !f(fd_Params_blocks_per_month, value) {
			return
		}
	}
	if x.PRewardInference != "" {
		value := protoreflect.ValueOfString(x.PRewardInference)
		if !f(fd_Params_p_reward_inference, value) {
			return
		}
	}
	if x.PRewardForecast != "" {
		value := protoreflect.ValueOfString(x.PRewardForecast)
		if !f(fd_Params_p_reward_forecast, value) {
			return
		}
	}
	if x.PRewardReputer != "" {
		value := protoreflect.ValueOfString(x.PRewardReputer)
		if !f(fd_Params_p_reward_reputer, value) {
			return
		}
	}
	if x.CRewardInference != "" {
		value := protoreflect.ValueOfString(x.CRewardInference)
		if !f(fd_Params_c_reward_inference, value) {
			return
		}
	}
	if x.CRewardForecast != "" {
		value := protoreflect.ValueOfString(x.CRewardForecast)
		if !f(fd_Params_c_reward_forecast, value) {
			return
		}
	}
	if x.CNorm != "" {
		value := protoreflect.ValueOfString(x.CNorm)
		if !f(fd_Params_c_norm, value) {
			return
		}
	}
	if x.EpsilonReputer != "" {
		value := protoreflect.ValueOfString(x.EpsilonReputer)
		if !f(fd_Params_epsilon_reputer, value) {
			return
		}
	}
	if x.HalfMaxProcessStakeRemovalsEndBlock != uint64(0) {
		value := protoreflect.ValueOfUint64(x.HalfMaxProcessStakeRemovalsEndBlock)
		if !f(fd_Params_half_max_process_stake_removals_end_block, value) {
			return
		}
	}
	if x.EpsilonSafeDiv != "" {
		value := protoreflect.ValueOfString(x.EpsilonSafeDiv)
		if !f(fd_Params_epsilon_safe_div, value) {
			return
		}
	}
	if x.DataSendingFee != "" {
		value := protoreflect.ValueOfString(x.DataSendingFee)
		if !f(fd_Params_data_sending_fee, value) {
			return
		}
	}
	if x.MaxElementsPerForecast != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MaxElementsPerForecast)
		if !f(fd_Params_max_elements_per_forecast, value) {
			return
		}
	}
	if x.MaxActiveTopicsPerBlock != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MaxActiveTopicsPerBlock)
		if !f(fd_Params_max_active_topics_per_block, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Params) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "emissions.v3.Params.version":
		return x.Version != ""
	case "emissions.v3.Params.max_serialized_msg_length":
		return x.MaxSerializedMsgLength != int64(0)
	case "emissions.v3.Params.min_topic_weight":
		return x.MinTopicWeight != ""
	case "emissions.v3.Params.required_minimum_stake":
		return x.RequiredMinimumStake != ""
	case "emissions.v3.Params.remove_stake_delay_window":
		return x.RemoveStakeDelayWindow != int64(0)
	case "emissions.v3.Params.min_epoch_length":
		return x.MinEpochLength != int64(0)
	case "emissions.v3.Params.beta_entropy":
		return x.BetaEntropy != ""
	case "emissions.v3.Params.learning_rate":
		return x.LearningRate != ""
	case "emissions.v3.Params.max_gradient_threshold":
		return x.MaxGradientThreshold != ""
	case "emissions.v3.Params.min_stake_fraction":
		return x.MinStakeFraction != ""
	case "emissions.v3.Params.max_unfulfilled_worker_requests":
		return x.MaxUnfulfilledWorkerRequests != uint64(0)
	case "emissions.v3.Params.max_unfulfilled_reputer_requests":
		return x.MaxUnfulfilledReputerRequests != uint64(0)
	case "emissions.v3.Params.topic_reward_stake_importance":
		return x.TopicRewardStakeImportance != ""
	case "emissions.v3.Params.topic_reward_fee_revenue_importance":
		return x.TopicRewardFeeRevenueImportance != ""
	case "emissions.v3.Params.topic_reward_alpha":
		return x.TopicRewardAlpha != ""
	case "emissions.v3.Params.task_reward_alpha":
		return x.TaskRewardAlpha != ""
	case "emissions.v3.Params.validators_vs_allora_percent_reward":
		return x.ValidatorsVsAlloraPercentReward != ""
	case "emissions.v3.Params.max_samples_to_scale_scores":
		return x.MaxSamplesToScaleScores != uint64(0)
	case "emissions.v3.Params.max_top_inferers_to_reward":
		return x.MaxTopInferersToReward != uint64(0)
	case "emissions.v3.Params.max_top_forecasters_to_reward":
		return x.MaxTopForecastersToReward != uint64(0)
	case "emissions.v3.Params.max_top_reputers_to_reward":
		return x.MaxTopReputersToReward != uint64(0)
	case "emissions.v3.Params.create_topic_fee":
		return x.CreateTopicFee != ""
	case "emissions.v3.Params.gradient_descent_max_iters":
		return x.GradientDescentMaxIters != uint64(0)
	case "emissions.v3.Params.registration_fee":
		return x.RegistrationFee != ""
	case "emissions.v3.Params.default_page_limit":
		return x.DefaultPageLimit != uint64(0)
	case "emissions.v3.Params.max_page_limit":
		return x.MaxPageLimit != uint64(0)
	case "emissions.v3.Params.min_epoch_length_record_limit":
		return x.MinEpochLengthRecordLimit != int64(0)
	case "emissions.v3.Params.blocks_per_month":
		return x.BlocksPerMonth != uint64(0)
	case "emissions.v3.Params.p_reward_inference":
		return x.PRewardInference != ""
	case "emissions.v3.Params.p_reward_forecast":
		return x.PRewardForecast != ""
	case "emissions.v3.Params.p_reward_reputer":
		return x.PRewardReputer != ""
	case "emissions.v3.Params.c_reward_inference":
		return x.CRewardInference != ""
	case "emissions.v3.Params.c_reward_forecast":
		return x.CRewardForecast != ""
	case "emissions.v3.Params.c_norm":
		return x.CNorm != ""
	case "emissions.v3.Params.epsilon_reputer":
		return x.EpsilonReputer != ""
	case "emissions.v3.Params.half_max_process_stake_removals_end_block":
		return x.HalfMaxProcessStakeRemovalsEndBlock != uint64(0)
	case "emissions.v3.Params.epsilon_safe_div":
		return x.EpsilonSafeDiv != ""
	case "emissions.v3.Params.data_sending_fee":
		return x.DataSendingFee != ""
	case "emissions.v3.Params.max_elements_per_forecast":
		return x.MaxElementsPerForecast != uint64(0)
	case "emissions.v3.Params.max_active_topics_per_block":
		return x.MaxActiveTopicsPerBlock != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: emissions.v3.Params"))
		}
		panic(fmt.Errorf("message emissions.v3.Params does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "emissions.v3.Params.version":
		x.Version = ""
	case "emissions.v3.Params.max_serialized_msg_length":
		x.MaxSerializedMsgLength = int64(0)
	case "emissions.v3.Params.min_topic_weight":
		x.MinTopicWeight = ""
	case "emissions.v3.Params.required_minimum_stake":
		x.RequiredMinimumStake = ""
	case "emissions.v3.Params.remove_stake_delay_window":
		x.RemoveStakeDelayWindow = int64(0)
	case "emissions.v3.Params.min_epoch_length":
		x.MinEpochLength = int64(0)
	case "emissions.v3.Params.beta_entropy":
		x.BetaEntropy = ""
	case "emissions.v3.Params.learning_rate":
		x.LearningRate = ""
	case "emissions.v3.Params.max_gradient_threshold":
		x.MaxGradientThreshold = ""
	case "emissions.v3.Params.min_stake_fraction":
		x.MinStakeFraction = ""
	case "emissions.v3.Params.max_unfulfilled_worker_requests":
		x.MaxUnfulfilledWorkerRequests = uint64(0)
	case "emissions.v3.Params.max_unfulfilled_reputer_requests":
		x.MaxUnfulfilledReputerRequests = uint64(0)
	case "emissions.v3.Params.topic_reward_stake_importance":
		x.TopicRewardStakeImportance = ""
	case "emissions.v3.Params.topic_reward_fee_revenue_importance":
		x.TopicRewardFeeRevenueImportance = ""
	case "emissions.v3.Params.topic_reward_alpha":
		x.TopicRewardAlpha = ""
	case "emissions.v3.Params.task_reward_alpha":
		x.TaskRewardAlpha = ""
	case "emissions.v3.Params.validators_vs_allora_percent_reward":
		x.ValidatorsVsAlloraPercentReward = ""
	case "emissions.v3.Params.max_samples_to_scale_scores":
		x.MaxSamplesToScaleScores = uint64(0)
	case "emissions.v3.Params.max_top_inferers_to_reward":
		x.MaxTopInferersToReward = uint64(0)
	case "emissions.v3.Params.max_top_forecasters_to_reward":
		x.MaxTopForecastersToReward = uint64(0)
	case "emissions.v3.Params.max_top_reputers_to_reward":
		x.MaxTopReputersToReward = uint64(0)
	case "emissions.v3.Params.create_topic_fee":
		x.CreateTopicFee = ""
	case "emissions.v3.Params.gradient_descent_max_iters":
		x.GradientDescentMaxIters = uint64(0)
	case "emissions.v3.Params.registration_fee":
		x.RegistrationFee = ""
	case "emissions.v3.Params.default_page_limit":
		x.DefaultPageLimit = uint64(0)
	case "emissions.v3.Params.max_page_limit":
		x.MaxPageLimit = uint64(0)
	case "emissions.v3.Params.min_epoch_length_record_limit":
		x.MinEpochLengthRecordLimit = int64(0)
	case "emissions.v3.Params.blocks_per_month":
		x.BlocksPerMonth = uint64(0)
	case "emissions.v3.Params.p_reward_inference":
		x.PRewardInference = ""
	case "emissions.v3.Params.p_reward_forecast":
		x.PRewardForecast = ""
	case "emissions.v3.Params.p_reward_reputer":
		x.PRewardReputer = ""
	case "emissions.v3.Params.c_reward_inference":
		x.CRewardInference = ""
	case "emissions.v3.Params.c_reward_forecast":
		x.CRewardForecast = ""
	case "emissions.v3.Params.c_norm":
		x.CNorm = ""
	case "emissions.v3.Params.epsilon_reputer":
		x.EpsilonReputer = ""
	case "emissions.v3.Params.half_max_process_stake_removals_end_block":
		x.HalfMaxProcessStakeRemovalsEndBlock = uint64(0)
	case "emissions.v3.Params.epsilon_safe_div":
		x.EpsilonSafeDiv = ""
	case "emissions.v3.Params.data_sending_fee":
		x.DataSendingFee = ""
	case "emissions.v3.Params.max_elements_per_forecast":
		x.MaxElementsPerForecast = uint64(0)
	case "emissions.v3.Params.max_active_topics_per_block":
		x.MaxActiveTopicsPerBlock = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: emissions.v3.Params"))
		}
		panic(fmt.Errorf("message emissions.v3.Params does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Params) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "emissions.v3.Params.version":
		value := x.Version
		return protoreflect.ValueOfString(value)
	case "emissions.v3.Params.max_serialized_msg_length":
		value := x.MaxSerializedMsgLength
		return protoreflect.ValueOfInt64(value)
	case "emissions.v3.Params.min_topic_weight":
		value := x.MinTopicWeight
		return protoreflect.ValueOfString(value)
	case "emissions.v3.Params.required_minimum_stake":
		value := x.RequiredMinimumStake
		return protoreflect.ValueOfString(value)
	case "emissions.v3.Params.remove_stake_delay_window":
		value := x.RemoveStakeDelayWindow
		return protoreflect.ValueOfInt64(value)
	case "emissions.v3.Params.min_epoch_length":
		value := x.MinEpochLength
		return protoreflect.ValueOfInt64(value)
	case "emissions.v3.Params.beta_entropy":
		value := x.BetaEntropy
		return protoreflect.ValueOfString(value)
	case "emissions.v3.Params.learning_rate":
		value := x.LearningRate
		return protoreflect.ValueOfString(value)
	case "emissions.v3.Params.max_gradient_threshold":
		value := x.MaxGradientThreshold
		return protoreflect.ValueOfString(value)
	case "emissions.v3.Params.min_stake_fraction":
		value := x.MinStakeFraction
		return protoreflect.ValueOfString(value)
	case "emissions.v3.Params.max_unfulfilled_worker_requests":
		value := x.MaxUnfulfilledWorkerRequests
		return protoreflect.ValueOfUint64(value)
	case "emissions.v3.Params.max_unfulfilled_reputer_requests":
		value := x.MaxUnfulfilledReputerRequests
		return protoreflect.ValueOfUint64(value)
	case "emissions.v3.Params.topic_reward_stake_importance":
		value := x.TopicRewardStakeImportance
		return protoreflect.ValueOfString(value)
	case "emissions.v3.Params.topic_reward_fee_revenue_importance":
		value := x.TopicRewardFeeRevenueImportance
		return protoreflect.ValueOfString(value)
	case "emissions.v3.Params.topic_reward_alpha":
		value := x.TopicRewardAlpha
		return protoreflect.ValueOfString(value)
	case "emissions.v3.Params.task_reward_alpha":
		value := x.TaskRewardAlpha
		return protoreflect.ValueOfString(value)
	case "emissions.v3.Params.validators_vs_allora_percent_reward":
		value := x.ValidatorsVsAlloraPercentReward
		return protoreflect.ValueOfString(value)
	case "emissions.v3.Params.max_samples_to_scale_scores":
		value := x.MaxSamplesToScaleScores
		return protoreflect.ValueOfUint64(value)
	case "emissions.v3.Params.max_top_inferers_to_reward":
		value := x.MaxTopInferersToReward
		return protoreflect.ValueOfUint64(value)
	case "emissions.v3.Params.max_top_forecasters_to_reward":
		value := x.MaxTopForecastersToReward
		return protoreflect.ValueOfUint64(value)
	case "emissions.v3.Params.max_top_reputers_to_reward":
		value := x.MaxTopReputersToReward
		return protoreflect.ValueOfUint64(value)
	case "emissions.v3.Params.create_topic_fee":
		value := x.CreateTopicFee
		return protoreflect.ValueOfString(value)
	case "emissions.v3.Params.gradient_descent_max_iters":
		value := x.GradientDescentMaxIters
		return protoreflect.ValueOfUint64(value)
	case "emissions.v3.Params.registration_fee":
		value := x.RegistrationFee
		return protoreflect.ValueOfString(value)
	case "emissions.v3.Params.default_page_limit":
		value := x.DefaultPageLimit
		return protoreflect.ValueOfUint64(value)
	case "emissions.v3.Params.max_page_limit":
		value := x.MaxPageLimit
		return protoreflect.ValueOfUint64(value)
	case "emissions.v3.Params.min_epoch_length_record_limit":
		value := x.MinEpochLengthRecordLimit
		return protoreflect.ValueOfInt64(value)
	case "emissions.v3.Params.blocks_per_month":
		value := x.BlocksPerMonth
		return protoreflect.ValueOfUint64(value)
	case "emissions.v3.Params.p_reward_inference":
		value := x.PRewardInference
		return protoreflect.ValueOfString(value)
	case "emissions.v3.Params.p_reward_forecast":
		value := x.PRewardForecast
		return protoreflect.ValueOfString(value)
	case "emissions.v3.Params.p_reward_reputer":
		value := x.PRewardReputer
		return protoreflect.ValueOfString(value)
	case "emissions.v3.Params.c_reward_inference":
		value := x.CRewardInference
		return protoreflect.ValueOfString(value)
	case "emissions.v3.Params.c_reward_forecast":
		value := x.CRewardForecast
		return protoreflect.ValueOfString(value)
	case "emissions.v3.Params.c_norm":
		value := x.CNorm
		return protoreflect.ValueOfString(value)
	case "emissions.v3.Params.epsilon_reputer":
		value := x.EpsilonReputer
		return protoreflect.ValueOfString(value)
	case "emissions.v3.Params.half_max_process_stake_removals_end_block":
		value := x.HalfMaxProcessStakeRemovalsEndBlock
		return protoreflect.ValueOfUint64(value)
	case "emissions.v3.Params.epsilon_safe_div":
		value := x.EpsilonSafeDiv
		return protoreflect.ValueOfString(value)
	case "emissions.v3.Params.data_sending_fee":
		value := x.DataSendingFee
		return protoreflect.ValueOfString(value)
	case "emissions.v3.Params.max_elements_per_forecast":
		value := x.MaxElementsPerForecast
		return protoreflect.ValueOfUint64(value)
	case "emissions.v3.Params.max_active_topics_per_block":
		value := x.MaxActiveTopicsPerBlock
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: emissions.v3.Params"))
		}
		panic(fmt.Errorf("message emissions.v3.Params does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "emissions.v3.Params.version":
		x.Version = value.Interface().(string)
	case "emissions.v3.Params.max_serialized_msg_length":
		x.MaxSerializedMsgLength = value.Int()
	case "emissions.v3.Params.min_topic_weight":
		x.MinTopicWeight = value.Interface().(string)
	case "emissions.v3.Params.required_minimum_stake":
		x.RequiredMinimumStake = value.Interface().(string)
	case "emissions.v3.Params.remove_stake_delay_window":
		x.RemoveStakeDelayWindow = value.Int()
	case "emissions.v3.Params.min_epoch_length":
		x.MinEpochLength = value.Int()
	case "emissions.v3.Params.beta_entropy":
		x.BetaEntropy = value.Interface().(string)
	case "emissions.v3.Params.learning_rate":
		x.LearningRate = value.Interface().(string)
	case "emissions.v3.Params.max_gradient_threshold":
		x.MaxGradientThreshold = value.Interface().(string)
	case "emissions.v3.Params.min_stake_fraction":
		x.MinStakeFraction = value.Interface().(string)
	case "emissions.v3.Params.max_unfulfilled_worker_requests":
		x.MaxUnfulfilledWorkerRequests = value.Uint()
	case "emissions.v3.Params.max_unfulfilled_reputer_requests":
		x.MaxUnfulfilledReputerRequests = value.Uint()
	case "emissions.v3.Params.topic_reward_stake_importance":
		x.TopicRewardStakeImportance = value.Interface().(string)
	case "emissions.v3.Params.topic_reward_fee_revenue_importance":
		x.TopicRewardFeeRevenueImportance = value.Interface().(string)
	case "emissions.v3.Params.topic_reward_alpha":
		x.TopicRewardAlpha = value.Interface().(string)
	case "emissions.v3.Params.task_reward_alpha":
		x.TaskRewardAlpha = value.Interface().(string)
	case "emissions.v3.Params.validators_vs_allora_percent_reward":
		x.ValidatorsVsAlloraPercentReward = value.Interface().(string)
	case "emissions.v3.Params.max_samples_to_scale_scores":
		x.MaxSamplesToScaleScores = value.Uint()
	case "emissions.v3.Params.max_top_inferers_to_reward":
		x.MaxTopInferersToReward = value.Uint()
	case "emissions.v3.Params.max_top_forecasters_to_reward":
		x.MaxTopForecastersToReward = value.Uint()
	case "emissions.v3.Params.max_top_reputers_to_reward":
		x.MaxTopReputersToReward = value.Uint()
	case "emissions.v3.Params.create_topic_fee":
		x.CreateTopicFee = value.Interface().(string)
	case "emissions.v3.Params.gradient_descent_max_iters":
		x.GradientDescentMaxIters = value.Uint()
	case "emissions.v3.Params.registration_fee":
		x.RegistrationFee = value.Interface().(string)
	case "emissions.v3.Params.default_page_limit":
		x.DefaultPageLimit = value.Uint()
	case "emissions.v3.Params.max_page_limit":
		x.MaxPageLimit = value.Uint()
	case "emissions.v3.Params.min_epoch_length_record_limit":
		x.MinEpochLengthRecordLimit = value.Int()
	case "emissions.v3.Params.blocks_per_month":
		x.BlocksPerMonth = value.Uint()
	case "emissions.v3.Params.p_reward_inference":
		x.PRewardInference = value.Interface().(string)
	case "emissions.v3.Params.p_reward_forecast":
		x.PRewardForecast = value.Interface().(string)
	case "emissions.v3.Params.p_reward_reputer":
		x.PRewardReputer = value.Interface().(string)
	case "emissions.v3.Params.c_reward_inference":
		x.CRewardInference = value.Interface().(string)
	case "emissions.v3.Params.c_reward_forecast":
		x.CRewardForecast = value.Interface().(string)
	case "emissions.v3.Params.c_norm":
		x.CNorm = value.Interface().(string)
	case "emissions.v3.Params.epsilon_reputer":
		x.EpsilonReputer = value.Interface().(string)
	case "emissions.v3.Params.half_max_process_stake_removals_end_block":
		x.HalfMaxProcessStakeRemovalsEndBlock = value.Uint()
	case "emissions.v3.Params.epsilon_safe_div":
		x.EpsilonSafeDiv = value.Interface().(string)
	case "emissions.v3.Params.data_sending_fee":
		x.DataSendingFee = value.Interface().(string)
	case "emissions.v3.Params.max_elements_per_forecast":
		x.MaxElementsPerForecast = value.Uint()
	case "emissions.v3.Params.max_active_topics_per_block":
		x.MaxActiveTopicsPerBlock = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: emissions.v3.Params"))
		}
		panic(fmt.Errorf("message emissions.v3.Params does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "emissions.v3.Params.version":
		panic(fmt.Errorf("field version of message emissions.v3.Params is not mutable"))
	case "emissions.v3.Params.max_serialized_msg_length":
		panic(fmt.Errorf("field max_serialized_msg_length of message emissions.v3.Params is not mutable"))
	case "emissions.v3.Params.min_topic_weight":
		panic(fmt.Errorf("field min_topic_weight of message emissions.v3.Params is not mutable"))
	case "emissions.v3.Params.required_minimum_stake":
		panic(fmt.Errorf("field required_minimum_stake of message emissions.v3.Params is not mutable"))
	case "emissions.v3.Params.remove_stake_delay_window":
		panic(fmt.Errorf("field remove_stake_delay_window of message emissions.v3.Params is not mutable"))
	case "emissions.v3.Params.min_epoch_length":
		panic(fmt.Errorf("field min_epoch_length of message emissions.v3.Params is not mutable"))
	case "emissions.v3.Params.beta_entropy":
		panic(fmt.Errorf("field beta_entropy of message emissions.v3.Params is not mutable"))
	case "emissions.v3.Params.learning_rate":
		panic(fmt.Errorf("field learning_rate of message emissions.v3.Params is not mutable"))
	case "emissions.v3.Params.max_gradient_threshold":
		panic(fmt.Errorf("field max_gradient_threshold of message emissions.v3.Params is not mutable"))
	case "emissions.v3.Params.min_stake_fraction":
		panic(fmt.Errorf("field min_stake_fraction of message emissions.v3.Params is not mutable"))
	case "emissions.v3.Params.max_unfulfilled_worker_requests":
		panic(fmt.Errorf("field max_unfulfilled_worker_requests of message emissions.v3.Params is not mutable"))
	case "emissions.v3.Params.max_unfulfilled_reputer_requests":
		panic(fmt.Errorf("field max_unfulfilled_reputer_requests of message emissions.v3.Params is not mutable"))
	case "emissions.v3.Params.topic_reward_stake_importance":
		panic(fmt.Errorf("field topic_reward_stake_importance of message emissions.v3.Params is not mutable"))
	case "emissions.v3.Params.topic_reward_fee_revenue_importance":
		panic(fmt.Errorf("field topic_reward_fee_revenue_importance of message emissions.v3.Params is not mutable"))
	case "emissions.v3.Params.topic_reward_alpha":
		panic(fmt.Errorf("field topic_reward_alpha of message emissions.v3.Params is not mutable"))
	case "emissions.v3.Params.task_reward_alpha":
		panic(fmt.Errorf("field task_reward_alpha of message emissions.v3.Params is not mutable"))
	case "emissions.v3.Params.validators_vs_allora_percent_reward":
		panic(fmt.Errorf("field validators_vs_allora_percent_reward of message emissions.v3.Params is not mutable"))
	case "emissions.v3.Params.max_samples_to_scale_scores":
		panic(fmt.Errorf("field max_samples_to_scale_scores of message emissions.v3.Params is not mutable"))
	case "emissions.v3.Params.max_top_inferers_to_reward":
		panic(fmt.Errorf("field max_top_inferers_to_reward of message emissions.v3.Params is not mutable"))
	case "emissions.v3.Params.max_top_forecasters_to_reward":
		panic(fmt.Errorf("field max_top_forecasters_to_reward of message emissions.v3.Params is not mutable"))
	case "emissions.v3.Params.max_top_reputers_to_reward":
		panic(fmt.Errorf("field max_top_reputers_to_reward of message emissions.v3.Params is not mutable"))
	case "emissions.v3.Params.create_topic_fee":
		panic(fmt.Errorf("field create_topic_fee of message emissions.v3.Params is not mutable"))
	case "emissions.v3.Params.gradient_descent_max_iters":
		panic(fmt.Errorf("field gradient_descent_max_iters of message emissions.v3.Params is not mutable"))
	case "emissions.v3.Params.registration_fee":
		panic(fmt.Errorf("field registration_fee of message emissions.v3.Params is not mutable"))
	case "emissions.v3.Params.default_page_limit":
		panic(fmt.Errorf("field default_page_limit of message emissions.v3.Params is not mutable"))
	case "emissions.v3.Params.max_page_limit":
		panic(fmt.Errorf("field max_page_limit of message emissions.v3.Params is not mutable"))
	case "emissions.v3.Params.min_epoch_length_record_limit":
		panic(fmt.Errorf("field min_epoch_length_record_limit of message emissions.v3.Params is not mutable"))
	case "emissions.v3.Params.blocks_per_month":
		panic(fmt.Errorf("field blocks_per_month of message emissions.v3.Params is not mutable"))
	case "emissions.v3.Params.p_reward_inference":
		panic(fmt.Errorf("field p_reward_inference of message emissions.v3.Params is not mutable"))
	case "emissions.v3.Params.p_reward_forecast":
		panic(fmt.Errorf("field p_reward_forecast of message emissions.v3.Params is not mutable"))
	case "emissions.v3.Params.p_reward_reputer":
		panic(fmt.Errorf("field p_reward_reputer of message emissions.v3.Params is not mutable"))
	case "emissions.v3.Params.c_reward_inference":
		panic(fmt.Errorf("field c_reward_inference of message emissions.v3.Params is not mutable"))
	case "emissions.v3.Params.c_reward_forecast":
		panic(fmt.Errorf("field c_reward_forecast of message emissions.v3.Params is not mutable"))
	case "emissions.v3.Params.c_norm":
		panic(fmt.Errorf("field c_norm of message emissions.v3.Params is not mutable"))
	case "emissions.v3.Params.epsilon_reputer":
		panic(fmt.Errorf("field epsilon_reputer of message emissions.v3.Params is not mutable"))
	case "emissions.v3.Params.half_max_process_stake_removals_end_block":
		panic(fmt.Errorf("field half_max_process_stake_removals_end_block of message emissions.v3.Params is not mutable"))
	case "emissions.v3.Params.epsilon_safe_div":
		panic(fmt.Errorf("field epsilon_safe_div of message emissions.v3.Params is not mutable"))
	case "emissions.v3.Params.data_sending_fee":
		panic(fmt.Errorf("field data_sending_fee of message emissions.v3.Params is not mutable"))
	case "emissions.v3.Params.max_elements_per_forecast":
		panic(fmt.Errorf("field max_elements_per_forecast of message emissions.v3.Params is not mutable"))
	case "emissions.v3.Params.max_active_topics_per_block":
		panic(fmt.Errorf("field max_active_topics_per_block of message emissions.v3.Params is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: emissions.v3.Params"))
		}
		panic(fmt.Errorf("message emissions.v3.Params does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Params) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "emissions.v3.Params.version":
		return protoreflect.ValueOfString("")
	case "emissions.v3.Params.max_serialized_msg_length":
		return protoreflect.ValueOfInt64(int64(0))
	case "emissions.v3.Params.min_topic_weight":
		return protoreflect.ValueOfString("")
	case "emissions.v3.Params.required_minimum_stake":
		return protoreflect.ValueOfString("")
	case "emissions.v3.Params.remove_stake_delay_window":
		return protoreflect.ValueOfInt64(int64(0))
	case "emissions.v3.Params.min_epoch_length":
		return protoreflect.ValueOfInt64(int64(0))
	case "emissions.v3.Params.beta_entropy":
		return protoreflect.ValueOfString("")
	case "emissions.v3.Params.learning_rate":
		return protoreflect.ValueOfString("")
	case "emissions.v3.Params.max_gradient_threshold":
		return protoreflect.ValueOfString("")
	case "emissions.v3.Params.min_stake_fraction":
		return protoreflect.ValueOfString("")
	case "emissions.v3.Params.max_unfulfilled_worker_requests":
		return protoreflect.ValueOfUint64(uint64(0))
	case "emissions.v3.Params.max_unfulfilled_reputer_requests":
		return protoreflect.ValueOfUint64(uint64(0))
	case "emissions.v3.Params.topic_reward_stake_importance":
		return protoreflect.ValueOfString("")
	case "emissions.v3.Params.topic_reward_fee_revenue_importance":
		return protoreflect.ValueOfString("")
	case "emissions.v3.Params.topic_reward_alpha":
		return protoreflect.ValueOfString("")
	case "emissions.v3.Params.task_reward_alpha":
		return protoreflect.ValueOfString("")
	case "emissions.v3.Params.validators_vs_allora_percent_reward":
		return protoreflect.ValueOfString("")
	case "emissions.v3.Params.max_samples_to_scale_scores":
		return protoreflect.ValueOfUint64(uint64(0))
	case "emissions.v3.Params.max_top_inferers_to_reward":
		return protoreflect.ValueOfUint64(uint64(0))
	case "emissions.v3.Params.max_top_forecasters_to_reward":
		return protoreflect.ValueOfUint64(uint64(0))
	case "emissions.v3.Params.max_top_reputers_to_reward":
		return protoreflect.ValueOfUint64(uint64(0))
	case "emissions.v3.Params.create_topic_fee":
		return protoreflect.ValueOfString("")
	case "emissions.v3.Params.gradient_descent_max_iters":
		return protoreflect.ValueOfUint64(uint64(0))
	case "emissions.v3.Params.registration_fee":
		return protoreflect.ValueOfString("")
	case "emissions.v3.Params.default_page_limit":
		return protoreflect.ValueOfUint64(uint64(0))
	case "emissions.v3.Params.max_page_limit":
		return protoreflect.ValueOfUint64(uint64(0))
	case "emissions.v3.Params.min_epoch_length_record_limit":
		return protoreflect.ValueOfInt64(int64(0))
	case "emissions.v3.Params.blocks_per_month":
		return protoreflect.ValueOfUint64(uint64(0))
	case "emissions.v3.Params.p_reward_inference":
		return protoreflect.ValueOfString("")
	case "emissions.v3.Params.p_reward_forecast":
		return protoreflect.ValueOfString("")
	case "emissions.v3.Params.p_reward_reputer":
		return protoreflect.ValueOfString("")
	case "emissions.v3.Params.c_reward_inference":
		return protoreflect.ValueOfString("")
	case "emissions.v3.Params.c_reward_forecast":
		return protoreflect.ValueOfString("")
	case "emissions.v3.Params.c_norm":
		return protoreflect.ValueOfString("")
	case "emissions.v3.Params.epsilon_reputer":
		return protoreflect.ValueOfString("")
	case "emissions.v3.Params.half_max_process_stake_removals_end_block":
		return protoreflect.ValueOfUint64(uint64(0))
	case "emissions.v3.Params.epsilon_safe_div":
		return protoreflect.ValueOfString("")
	case "emissions.v3.Params.data_sending_fee":
		return protoreflect.ValueOfString("")
	case "emissions.v3.Params.max_elements_per_forecast":
		return protoreflect.ValueOfUint64(uint64(0))
	case "emissions.v3.Params.max_active_topics_per_block":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: emissions.v3.Params"))
		}
		panic(fmt.Errorf("message emissions.v3.Params does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Params) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in emissions.v3.Params", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Params) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Params) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Params) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Version)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.MaxSerializedMsgLength != 0 {
			n += 1 + runtime.Sov(uint64(x.MaxSerializedMsgLength))
		}
		l = len(x.MinTopicWeight)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.RequiredMinimumStake)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.RemoveStakeDelayWindow != 0 {
			n += 1 + runtime.Sov(uint64(x.RemoveStakeDelayWindow))
		}
		if x.MinEpochLength != 0 {
			n += 1 + runtime.Sov(uint64(x.MinEpochLength))
		}
		l = len(x.BetaEntropy)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.LearningRate)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.MaxGradientThreshold)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.MinStakeFraction)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.MaxUnfulfilledWorkerRequests != 0 {
			n += 1 + runtime.Sov(uint64(x.MaxUnfulfilledWorkerRequests))
		}
		if x.MaxUnfulfilledReputerRequests != 0 {
			n += 1 + runtime.Sov(uint64(x.MaxUnfulfilledReputerRequests))
		}
		l = len(x.TopicRewardStakeImportance)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TopicRewardFeeRevenueImportance)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TopicRewardAlpha)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TaskRewardAlpha)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ValidatorsVsAlloraPercentReward)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.MaxSamplesToScaleScores != 0 {
			n += 2 + runtime.Sov(uint64(x.MaxSamplesToScaleScores))
		}
		if x.MaxTopInferersToReward != 0 {
			n += 2 + runtime.Sov(uint64(x.MaxTopInferersToReward))
		}
		if x.MaxTopForecastersToReward != 0 {
			n += 2 + runtime.Sov(uint64(x.MaxTopForecastersToReward))
		}
		if x.MaxTopReputersToReward != 0 {
			n += 2 + runtime.Sov(uint64(x.MaxTopReputersToReward))
		}
		l = len(x.CreateTopicFee)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.GradientDescentMaxIters != 0 {
			n += 2 + runtime.Sov(uint64(x.GradientDescentMaxIters))
		}
		l = len(x.RegistrationFee)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.DefaultPageLimit != 0 {
			n += 2 + runtime.Sov(uint64(x.DefaultPageLimit))
		}
		if x.MaxPageLimit != 0 {
			n += 2 + runtime.Sov(uint64(x.MaxPageLimit))
		}
		if x.MinEpochLengthRecordLimit != 0 {
			n += 2 + runtime.Sov(uint64(x.MinEpochLengthRecordLimit))
		}
		if x.BlocksPerMonth != 0 {
			n += 2 + runtime.Sov(uint64(x.BlocksPerMonth))
		}
		l = len(x.PRewardInference)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.PRewardForecast)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.PRewardReputer)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.CRewardInference)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.CRewardForecast)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.CNorm)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.EpsilonReputer)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.HalfMaxProcessStakeRemovalsEndBlock != 0 {
			n += 2 + runtime.Sov(uint64(x.HalfMaxProcessStakeRemovalsEndBlock))
		}
		l = len(x.EpsilonSafeDiv)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.DataSendingFee)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.MaxElementsPerForecast != 0 {
			n += 2 + runtime.Sov(uint64(x.MaxElementsPerForecast))
		}
		if x.MaxActiveTopicsPerBlock != 0 {
			n += 2 + runtime.Sov(uint64(x.MaxActiveTopicsPerBlock))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.MaxActiveTopicsPerBlock != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxActiveTopicsPerBlock))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xf0
		}
		if x.MaxElementsPerForecast != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxElementsPerForecast))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xe8
		}
		if len(x.DataSendingFee) > 0 {
			i -= len(x.DataSendingFee)
			copy(dAtA[i:], x.DataSendingFee)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DataSendingFee)))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xe2
		}
		if len(x.EpsilonSafeDiv) > 0 {
			i -= len(x.EpsilonSafeDiv)
			copy(dAtA[i:], x.EpsilonSafeDiv)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.EpsilonSafeDiv)))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xda
		}
		if x.HalfMaxProcessStakeRemovalsEndBlock != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.HalfMaxProcessStakeRemovalsEndBlock))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xd0
		}
		if len(x.EpsilonReputer) > 0 {
			i -= len(x.EpsilonReputer)
			copy(dAtA[i:], x.EpsilonReputer)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.EpsilonReputer)))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xc2
		}
		if len(x.CNorm) > 0 {
			i -= len(x.CNorm)
			copy(dAtA[i:], x.CNorm)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CNorm)))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xb2
		}
		if len(x.CRewardForecast) > 0 {
			i -= len(x.CRewardForecast)
			copy(dAtA[i:], x.CRewardForecast)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CRewardForecast)))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xaa
		}
		if len(x.CRewardInference) > 0 {
			i -= len(x.CRewardInference)
			copy(dAtA[i:], x.CRewardInference)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CRewardInference)))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xa2
		}
		if len(x.PRewardReputer) > 0 {
			i -= len(x.PRewardReputer)
			copy(dAtA[i:], x.PRewardReputer)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PRewardReputer)))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x9a
		}
		if len(x.PRewardForecast) > 0 {
			i -= len(x.PRewardForecast)
			copy(dAtA[i:], x.PRewardForecast)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PRewardForecast)))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x92
		}
		if len(x.PRewardInference) > 0 {
			i -= len(x.PRewardInference)
			copy(dAtA[i:], x.PRewardInference)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PRewardInference)))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x8a
		}
		if x.BlocksPerMonth != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BlocksPerMonth))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x80
		}
		if x.MinEpochLengthRecordLimit != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MinEpochLengthRecordLimit))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xf8
		}
		if x.MaxPageLimit != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxPageLimit))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xf0
		}
		if x.DefaultPageLimit != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.DefaultPageLimit))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xe8
		}
		if len(x.RegistrationFee) > 0 {
			i -= len(x.RegistrationFee)
			copy(dAtA[i:], x.RegistrationFee)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RegistrationFee)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xe2
		}
		if x.GradientDescentMaxIters != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.GradientDescentMaxIters))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc8
		}
		if len(x.CreateTopicFee) > 0 {
			i -= len(x.CreateTopicFee)
			copy(dAtA[i:], x.CreateTopicFee)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CreateTopicFee)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc2
		}
		if x.MaxTopReputersToReward != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxTopReputersToReward))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb8
		}
		if x.MaxTopForecastersToReward != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxTopForecastersToReward))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb0
		}
		if x.MaxTopInferersToReward != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxTopInferersToReward))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa8
		}
		if x.MaxSamplesToScaleScores != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxSamplesToScaleScores))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa0
		}
		if len(x.ValidatorsVsAlloraPercentReward) > 0 {
			i -= len(x.ValidatorsVsAlloraPercentReward)
			copy(dAtA[i:], x.ValidatorsVsAlloraPercentReward)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ValidatorsVsAlloraPercentReward)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
		if len(x.TaskRewardAlpha) > 0 {
			i -= len(x.TaskRewardAlpha)
			copy(dAtA[i:], x.TaskRewardAlpha)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TaskRewardAlpha)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
		if len(x.TopicRewardAlpha) > 0 {
			i -= len(x.TopicRewardAlpha)
			copy(dAtA[i:], x.TopicRewardAlpha)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TopicRewardAlpha)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
		if len(x.TopicRewardFeeRevenueImportance) > 0 {
			i -= len(x.TopicRewardFeeRevenueImportance)
			copy(dAtA[i:], x.TopicRewardFeeRevenueImportance)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TopicRewardFeeRevenueImportance)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
		if len(x.TopicRewardStakeImportance) > 0 {
			i -= len(x.TopicRewardStakeImportance)
			copy(dAtA[i:], x.TopicRewardStakeImportance)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TopicRewardStakeImportance)))
			i--
			dAtA[i] = 0x7a
		}
		if x.MaxUnfulfilledReputerRequests != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxUnfulfilledReputerRequests))
			i--
			dAtA[i] = 0x70
		}
		if x.MaxUnfulfilledWorkerRequests != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxUnfulfilledWorkerRequests))
			i--
			dAtA[i] = 0x68
		}
		if len(x.MinStakeFraction) > 0 {
			i -= len(x.MinStakeFraction)
			copy(dAtA[i:], x.MinStakeFraction)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MinStakeFraction)))
			i--
			dAtA[i] = 0x5a
		}
		if len(x.MaxGradientThreshold) > 0 {
			i -= len(x.MaxGradientThreshold)
			copy(dAtA[i:], x.MaxGradientThreshold)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MaxGradientThreshold)))
			i--
			dAtA[i] = 0x52
		}
		if len(x.LearningRate) > 0 {
			i -= len(x.LearningRate)
			copy(dAtA[i:], x.LearningRate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.LearningRate)))
			i--
			dAtA[i] = 0x4a
		}
		if len(x.BetaEntropy) > 0 {
			i -= len(x.BetaEntropy)
			copy(dAtA[i:], x.BetaEntropy)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.BetaEntropy)))
			i--
			dAtA[i] = 0x42
		}
		if x.MinEpochLength != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MinEpochLength))
			i--
			dAtA[i] = 0x38
		}
		if x.RemoveStakeDelayWindow != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.RemoveStakeDelayWindow))
			i--
			dAtA[i] = 0x30
		}
		if len(x.RequiredMinimumStake) > 0 {
			i -= len(x.RequiredMinimumStake)
			copy(dAtA[i:], x.RequiredMinimumStake)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RequiredMinimumStake)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.MinTopicWeight) > 0 {
			i -= len(x.MinTopicWeight)
			copy(dAtA[i:], x.MinTopicWeight)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MinTopicWeight)))
			i--
			dAtA[i] = 0x1a
		}
		if x.MaxSerializedMsgLength != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxSerializedMsgLength))
			i--
			dAtA[i] = 0x10
		}
		if len(x.Version) > 0 {
			i -= len(x.Version)
			copy(dAtA[i:], x.Version)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Version)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Params: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Version = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxSerializedMsgLength", wireType)
				}
				x.MaxSerializedMsgLength = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxSerializedMsgLength |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinTopicWeight", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MinTopicWeight = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RequiredMinimumStake", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RequiredMinimumStake = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RemoveStakeDelayWindow", wireType)
				}
				x.RemoveStakeDelayWindow = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.RemoveStakeDelayWindow |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinEpochLength", wireType)
				}
				x.MinEpochLength = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MinEpochLength |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BetaEntropy", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BetaEntropy = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LearningRate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.LearningRate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxGradientThreshold", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MaxGradientThreshold = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinStakeFraction", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MinStakeFraction = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 13:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxUnfulfilledWorkerRequests", wireType)
				}
				x.MaxUnfulfilledWorkerRequests = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxUnfulfilledWorkerRequests |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 14:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxUnfulfilledReputerRequests", wireType)
				}
				x.MaxUnfulfilledReputerRequests = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxUnfulfilledReputerRequests |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 15:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TopicRewardStakeImportance", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TopicRewardStakeImportance = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 16:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TopicRewardFeeRevenueImportance", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TopicRewardFeeRevenueImportance = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 17:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TopicRewardAlpha", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TopicRewardAlpha = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 18:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TaskRewardAlpha", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TaskRewardAlpha = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 19:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidatorsVsAlloraPercentReward", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ValidatorsVsAlloraPercentReward = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 20:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxSamplesToScaleScores", wireType)
				}
				x.MaxSamplesToScaleScores = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxSamplesToScaleScores |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 21:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxTopInferersToReward", wireType)
				}
				x.MaxTopInferersToReward = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxTopInferersToReward |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 22:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxTopForecastersToReward", wireType)
				}
				x.MaxTopForecastersToReward = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxTopForecastersToReward |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 23:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxTopReputersToReward", wireType)
				}
				x.MaxTopReputersToReward = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxTopReputersToReward |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 24:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CreateTopicFee", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CreateTopicFee = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 25:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field GradientDescentMaxIters", wireType)
				}
				x.GradientDescentMaxIters = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.GradientDescentMaxIters |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 28:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RegistrationFee", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RegistrationFee = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 29:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DefaultPageLimit", wireType)
				}
				x.DefaultPageLimit = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.DefaultPageLimit |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 30:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxPageLimit", wireType)
				}
				x.MaxPageLimit = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxPageLimit |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 31:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinEpochLengthRecordLimit", wireType)
				}
				x.MinEpochLengthRecordLimit = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MinEpochLengthRecordLimit |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 32:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BlocksPerMonth", wireType)
				}
				x.BlocksPerMonth = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BlocksPerMonth |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 33:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PRewardInference", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PRewardInference = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 34:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PRewardForecast", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PRewardForecast = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 35:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PRewardReputer", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PRewardReputer = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 36:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CRewardInference", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CRewardInference = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 37:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CRewardForecast", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CRewardForecast = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 38:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CNorm", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CNorm = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 40:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EpsilonReputer", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EpsilonReputer = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 42:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field HalfMaxProcessStakeRemovalsEndBlock", wireType)
				}
				x.HalfMaxProcessStakeRemovalsEndBlock = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.HalfMaxProcessStakeRemovalsEndBlock |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 43:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EpsilonSafeDiv", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EpsilonSafeDiv = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 44:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DataSendingFee", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DataSendingFee = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 45:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxElementsPerForecast", wireType)
				}
				x.MaxElementsPerForecast = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxElementsPerForecast |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 46:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxActiveTopicsPerBlock", wireType)
				}
				x.MaxActiveTopicsPerBlock = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxActiveTopicsPerBlock |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: emissions/v3/params.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Params defines the parameters of the module.
type Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"` // version of the protocol should be in lockstep with
	// github release tag version
	MaxSerializedMsgLength int64  `protobuf:"varint,2,opt,name=max_serialized_msg_length,json=maxSerializedMsgLength,proto3" json:"max_serialized_msg_length,omitempty"` // max length of input data for msg and query server calls
	MinTopicWeight         string `protobuf:"bytes,3,opt,name=min_topic_weight,json=minTopicWeight,proto3" json:"min_topic_weight,omitempty"`                            // total unmet demand for a topic < this => don't run inference
	// solicatation or weight-adjustment
	RequiredMinimumStake   string `protobuf:"bytes,5,opt,name=required_minimum_stake,json=requiredMinimumStake,proto3" json:"required_minimum_stake,omitempty"`          // minimum amount of tokens to send to stake as a reputer or worker
	RemoveStakeDelayWindow int64  `protobuf:"varint,6,opt,name=remove_stake_delay_window,json=removeStakeDelayWindow,proto3" json:"remove_stake_delay_window,omitempty"` // how long to wait (blocks) before allowed to remove stake
	MinEpochLength         int64  `protobuf:"varint,7,opt,name=min_epoch_length,json=minEpochLength,proto3" json:"min_epoch_length,omitempty"`                           // fastest allowable topic epoch and cadence of a
	// repeating inference request
	BetaEntropy          string `protobuf:"bytes,8,opt,name=beta_entropy,json=betaEntropy,proto3" json:"beta_entropy,omitempty"`                               // controls resilience of reward payouts against copycat workers
	LearningRate         string `protobuf:"bytes,9,opt,name=learning_rate,json=learningRate,proto3" json:"learning_rate,omitempty"`                            // speed of gradient descent
	MaxGradientThreshold string `protobuf:"bytes,10,opt,name=max_gradient_threshold,json=maxGradientThreshold,proto3" json:"max_gradient_threshold,omitempty"` // gradient descent stops when gradient falls below this
	MinStakeFraction     string `protobuf:"bytes,11,opt,name=min_stake_fraction,json=minStakeFraction,proto3" json:"min_stake_fraction,omitempty"`             // minimum fraction of stake to listen to when setting consensus listening
	// coefficients
	MaxUnfulfilledWorkerRequests  uint64 `protobuf:"varint,13,opt,name=max_unfulfilled_worker_requests,json=maxUnfulfilledWorkerRequests,proto3" json:"max_unfulfilled_worker_requests,omitempty"`    // max num worker request nonces to keep track of per topic
	MaxUnfulfilledReputerRequests uint64 `protobuf:"varint,14,opt,name=max_unfulfilled_reputer_requests,json=maxUnfulfilledReputerRequests,proto3" json:"max_unfulfilled_reputer_requests,omitempty"` // max num reputer request nonces to keep track of per topic
	TopicRewardStakeImportance    string `protobuf:"bytes,15,opt,name=topic_reward_stake_importance,json=topicRewardStakeImportance,proto3" json:"topic_reward_stake_importance,omitempty"`           // The exponent μ represents the importance of stake in the reward of a
	// topic and has a fiducial value of 0.5
	TopicRewardFeeRevenueImportance string `protobuf:"bytes,16,opt,name=topic_reward_fee_revenue_importance,json=topicRewardFeeRevenueImportance,proto3" json:"topic_reward_fee_revenue_importance,omitempty"` // The exponent ν represents the importance of fee revenue in the reward of
	// a topic and has a fiducial value of 0.5
	TopicRewardAlpha string `protobuf:"bytes,17,opt,name=topic_reward_alpha,json=topicRewardAlpha,proto3" json:"topic_reward_alpha,omitempty"` // global exponential moving average parameter. Fiducial value of 0.9375 on
	// a monthly timescale, 0.5 for weekly updates
	TaskRewardAlpha string `protobuf:"bytes,18,opt,name=task_reward_alpha,json=taskRewardAlpha,proto3" json:"task_reward_alpha,omitempty"` // global exponential moving average parameter. Fiducial value of 0.1 used
	// to calculate ~U_ij, ~V_ik, ~W_im
	ValidatorsVsAlloraPercentReward string `protobuf:"bytes,19,opt,name=validators_vs_allora_percent_reward,json=validatorsVsAlloraPercentReward,proto3" json:"validators_vs_allora_percent_reward,omitempty"` // percent of total supply rewarded to cosmos network validators, rest goes
	// to allora reputers workers etc
	MaxSamplesToScaleScores   uint64 `protobuf:"varint,20,opt,name=max_samples_to_scale_scores,json=maxSamplesToScaleScores,proto3" json:"max_samples_to_scale_scores,omitempty"`       // number of scores to use for standard deviation calculation
	MaxTopInferersToReward    uint64 `protobuf:"varint,21,opt,name=max_top_inferers_to_reward,json=maxTopInferersToReward,proto3" json:"max_top_inferers_to_reward,omitempty"`          // max number of top inferers by score to reward
	MaxTopForecastersToReward uint64 `protobuf:"varint,22,opt,name=max_top_forecasters_to_reward,json=maxTopForecastersToReward,proto3" json:"max_top_forecasters_to_reward,omitempty"` // max number of top forecasters by score to reward
	MaxTopReputersToReward    uint64 `protobuf:"varint,23,opt,name=max_top_reputers_to_reward,json=maxTopReputersToReward,proto3" json:"max_top_reputers_to_reward,omitempty"`          // max number of top reputers by score to reward
	CreateTopicFee            string `protobuf:"bytes,24,opt,name=create_topic_fee,json=createTopicFee,proto3" json:"create_topic_fee,omitempty"`                                       // topic registration fee
	GradientDescentMaxIters   uint64 `protobuf:"varint,25,opt,name=gradient_descent_max_iters,json=gradientDescentMaxIters,proto3" json:"gradient_descent_max_iters,omitempty"`         // max number of gradient descent iterations
	RegistrationFee           string `protobuf:"bytes,28,opt,name=registration_fee,json=registrationFee,proto3" json:"registration_fee,omitempty"`                                      // registration fee for reputer or worker
	DefaultPageLimit          uint64 `protobuf:"varint,29,opt,name=default_page_limit,json=defaultPageLimit,proto3" json:"default_page_limit,omitempty"`                                // default limit for pagination
	MaxPageLimit              uint64 `protobuf:"varint,30,opt,name=max_page_limit,json=maxPageLimit,proto3" json:"max_page_limit,omitempty"`                                            // max limit for pagination
	// min number of epochs to keep network losses, reputer losses, inferences,
	// forecasts
	MinEpochLengthRecordLimit int64 `protobuf:"varint,31,opt,name=min_epoch_length_record_limit,json=minEpochLengthRecordLimit,proto3" json:"min_epoch_length_record_limit,omitempty"`
	// block emission rate in number of blocks expected per month
	BlocksPerMonth   uint64 `protobuf:"varint,32,opt,name=blocks_per_month,json=blocksPerMonth,proto3" json:"blocks_per_month,omitempty"`
	PRewardInference string `protobuf:"bytes,33,opt,name=p_reward_inference,json=pRewardInference,proto3" json:"p_reward_inference,omitempty"`
	PRewardForecast  string `protobuf:"bytes,34,opt,name=p_reward_forecast,json=pRewardForecast,proto3" json:"p_reward_forecast,omitempty"`
	PRewardReputer   string `protobuf:"bytes,35,opt,name=p_reward_reputer,json=pRewardReputer,proto3" json:"p_reward_reputer,omitempty"`
	CRewardInference string `protobuf:"bytes,36,opt,name=c_reward_inference,json=cRewardInference,proto3" json:"c_reward_inference,omitempty"`
	CRewardForecast  string `protobuf:"bytes,37,opt,name=c_reward_forecast,json=cRewardForecast,proto3" json:"c_reward_forecast,omitempty"`
	CNorm            string `protobuf:"bytes,38,opt,name=c_norm,json=cNorm,proto3" json:"c_norm,omitempty"`
	EpsilonReputer   string `protobuf:"bytes,40,opt,name=epsilon_reputer,json=epsilonReputer,proto3" json:"epsilon_reputer,omitempty"` // a small tolerance quantity used to cap reputer scores at infinitesimally
	// close proximities
	HalfMaxProcessStakeRemovalsEndBlock uint64 `protobuf:"varint,42,opt,name=half_max_process_stake_removals_end_block,json=halfMaxProcessStakeRemovalsEndBlock,proto3" json:"half_max_process_stake_removals_end_block,omitempty"` // max amount of stake removals to process in an ABCI end block.
	// Applied twice once for stakeRemovals and once for
	// DelegateStakeRemovals, so actual max is this number times two
	EpsilonSafeDiv string `protobuf:"bytes,43,opt,name=epsilon_safe_div,json=epsilonSafeDiv,proto3" json:"epsilon_safe_div,omitempty"`
	// / a small tolerance quantity used to cap division by zero
	DataSendingFee string `protobuf:"bytes,44,opt,name=data_sending_fee,json=dataSendingFee,proto3" json:"data_sending_fee,omitempty"`
	// payload sending fee for reputer or worker
	MaxElementsPerForecast  uint64 `protobuf:"varint,45,opt,name=max_elements_per_forecast,json=maxElementsPerForecast,proto3" json:"max_elements_per_forecast,omitempty"`      // max number of top forecasters by score to reward
	MaxActiveTopicsPerBlock uint64 `protobuf:"varint,46,opt,name=max_active_topics_per_block,json=maxActiveTopicsPerBlock,proto3" json:"max_active_topics_per_block,omitempty"` // max number of active topics per block
}

func (x *Params) Reset() {
	*x = Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_emissions_v3_params_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params) ProtoMessage() {}

// Deprecated: Use Params.ProtoReflect.Descriptor instead.
func (*Params) Descriptor() ([]byte, []int) {
	return file_emissions_v3_params_proto_rawDescGZIP(), []int{0}
}

func (x *Params) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Params) GetMaxSerializedMsgLength() int64 {
	if x != nil {
		return x.MaxSerializedMsgLength
	}
	return 0
}

func (x *Params) GetMinTopicWeight() string {
	if x != nil {
		return x.MinTopicWeight
	}
	return ""
}

func (x *Params) GetRequiredMinimumStake() string {
	if x != nil {
		return x.RequiredMinimumStake
	}
	return ""
}

func (x *Params) GetRemoveStakeDelayWindow() int64 {
	if x != nil {
		return x.RemoveStakeDelayWindow
	}
	return 0
}

func (x *Params) GetMinEpochLength() int64 {
	if x != nil {
		return x.MinEpochLength
	}
	return 0
}

func (x *Params) GetBetaEntropy() string {
	if x != nil {
		return x.BetaEntropy
	}
	return ""
}

func (x *Params) GetLearningRate() string {
	if x != nil {
		return x.LearningRate
	}
	return ""
}

func (x *Params) GetMaxGradientThreshold() string {
	if x != nil {
		return x.MaxGradientThreshold
	}
	return ""
}

func (x *Params) GetMinStakeFraction() string {
	if x != nil {
		return x.MinStakeFraction
	}
	return ""
}

func (x *Params) GetMaxUnfulfilledWorkerRequests() uint64 {
	if x != nil {
		return x.MaxUnfulfilledWorkerRequests
	}
	return 0
}

func (x *Params) GetMaxUnfulfilledReputerRequests() uint64 {
	if x != nil {
		return x.MaxUnfulfilledReputerRequests
	}
	return 0
}

func (x *Params) GetTopicRewardStakeImportance() string {
	if x != nil {
		return x.TopicRewardStakeImportance
	}
	return ""
}

func (x *Params) GetTopicRewardFeeRevenueImportance() string {
	if x != nil {
		return x.TopicRewardFeeRevenueImportance
	}
	return ""
}

func (x *Params) GetTopicRewardAlpha() string {
	if x != nil {
		return x.TopicRewardAlpha
	}
	return ""
}

func (x *Params) GetTaskRewardAlpha() string {
	if x != nil {
		return x.TaskRewardAlpha
	}
	return ""
}

func (x *Params) GetValidatorsVsAlloraPercentReward() string {
	if x != nil {
		return x.ValidatorsVsAlloraPercentReward
	}
	return ""
}

func (x *Params) GetMaxSamplesToScaleScores() uint64 {
	if x != nil {
		return x.MaxSamplesToScaleScores
	}
	return 0
}

func (x *Params) GetMaxTopInferersToReward() uint64 {
	if x != nil {
		return x.MaxTopInferersToReward
	}
	return 0
}

func (x *Params) GetMaxTopForecastersToReward() uint64 {
	if x != nil {
		return x.MaxTopForecastersToReward
	}
	return 0
}

func (x *Params) GetMaxTopReputersToReward() uint64 {
	if x != nil {
		return x.MaxTopReputersToReward
	}
	return 0
}

func (x *Params) GetCreateTopicFee() string {
	if x != nil {
		return x.CreateTopicFee
	}
	return ""
}

func (x *Params) GetGradientDescentMaxIters() uint64 {
	if x != nil {
		return x.GradientDescentMaxIters
	}
	return 0
}

func (x *Params) GetRegistrationFee() string {
	if x != nil {
		return x.RegistrationFee
	}
	return ""
}

func (x *Params) GetDefaultPageLimit() uint64 {
	if x != nil {
		return x.DefaultPageLimit
	}
	return 0
}

func (x *Params) GetMaxPageLimit() uint64 {
	if x != nil {
		return x.MaxPageLimit
	}
	return 0
}

func (x *Params) GetMinEpochLengthRecordLimit() int64 {
	if x != nil {
		return x.MinEpochLengthRecordLimit
	}
	return 0
}

func (x *Params) GetBlocksPerMonth() uint64 {
	if x != nil {
		return x.BlocksPerMonth
	}
	return 0
}

func (x *Params) GetPRewardInference() string {
	if x != nil {
		return x.PRewardInference
	}
	return ""
}

func (x *Params) GetPRewardForecast() string {
	if x != nil {
		return x.PRewardForecast
	}
	return ""
}

func (x *Params) GetPRewardReputer() string {
	if x != nil {
		return x.PRewardReputer
	}
	return ""
}

func (x *Params) GetCRewardInference() string {
	if x != nil {
		return x.CRewardInference
	}
	return ""
}

func (x *Params) GetCRewardForecast() string {
	if x != nil {
		return x.CRewardForecast
	}
	return ""
}

func (x *Params) GetCNorm() string {
	if x != nil {
		return x.CNorm
	}
	return ""
}

func (x *Params) GetEpsilonReputer() string {
	if x != nil {
		return x.EpsilonReputer
	}
	return ""
}

func (x *Params) GetHalfMaxProcessStakeRemovalsEndBlock() uint64 {
	if x != nil {
		return x.HalfMaxProcessStakeRemovalsEndBlock
	}
	return 0
}

func (x *Params) GetEpsilonSafeDiv() string {
	if x != nil {
		return x.EpsilonSafeDiv
	}
	return ""
}

func (x *Params) GetDataSendingFee() string {
	if x != nil {
		return x.DataSendingFee
	}
	return ""
}

func (x *Params) GetMaxElementsPerForecast() uint64 {
	if x != nil {
		return x.MaxElementsPerForecast
	}
	return 0
}

func (x *Params) GetMaxActiveTopicsPerBlock() uint64 {
	if x != nil {
		return x.MaxActiveTopicsPerBlock
	}
	return 0
}

var File_emissions_v3_params_proto protoreflect.FileDescriptor

var file_emissions_v3_params_proto_rawDesc = []byte{
	0x0a, 0x19, 0x65, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x65, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x33, 0x1a, 0x11, 0x61, 0x6d, 0x69, 0x6e, 0x6f,
	0x2f, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaa, 0x1b,
	0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x61, 0x0a,
	0x10, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f,
	0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x6c, 0x6f,
	0x72, 0x61, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x72,
	0x61, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x44, 0x65, 0x63,
	0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x66, 0x0a, 0x16, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2,
	0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0xa8, 0xe7, 0xb0,
	0x2a, 0x01, 0x52, 0x14, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x77,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d,
	0x69, 0x6e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x5a, 0x0a,
	0x0c, 0x62, 0x65, 0x74, 0x61, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x37, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x2f, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x72, 0x61, 0x2d, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x72, 0x61, 0x2d, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x0b, 0x62, 0x65,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79, 0x12, 0x5c, 0x0a, 0x0d, 0x6c, 0x65, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x37, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x72, 0x61, 0x2d, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x72, 0x61, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x6d, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x67,
	0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f,
	0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x6c, 0x6f,
	0x72, 0x61, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x72,
	0x61, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x44, 0x65, 0x63,
	0x52, 0x14, 0x6d, 0x61, 0x78, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x65, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x37, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x2f, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x72, 0x61, 0x2d, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x72, 0x61, 0x2d, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x10, 0x6d, 0x69, 0x6e,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a,
	0x1f, 0x6d, 0x61, 0x78, 0x5f, 0x75, 0x6e, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1c, 0x6d, 0x61, 0x78, 0x55, 0x6e, 0x66, 0x75, 0x6c,
	0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x12, 0x47, 0x0a, 0x20, 0x6d, 0x61, 0x78, 0x5f, 0x75, 0x6e, 0x66, 0x75,
	0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x75, 0x74, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1d,
	0x6d, 0x61, 0x78, 0x55, 0x6e, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x52, 0x65,
	0x70, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x7a, 0x0a,
	0x1d, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x2f, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x72, 0x61, 0x2d,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x72, 0x61, 0x2d, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x1a, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x23, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f,
	0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x6c, 0x6f,
	0x72, 0x61, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x72,
	0x61, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x44, 0x65, 0x63,
	0x52, 0x1f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x46, 0x65, 0x65,
	0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x65, 0x0a, 0x12, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0xc8,
	0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x72, 0x61, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x72, 0x61, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x61,
	0x74, 0x68, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x10, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x12, 0x63, 0x0a, 0x11, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x37, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x2f, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x72, 0x61, 0x2d, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x72, 0x61, 0x2d, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x0f, 0x74, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x12, 0x85, 0x01,
	0x0a, 0x23, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x76, 0x73, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x72, 0x61, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0xc8, 0xde, 0x1f,
	0x00, 0xda, 0xde, 0x1f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x61, 0x6c, 0x6c, 0x6f, 0x72, 0x61, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x61,
	0x6c, 0x6c, 0x6f, 0x72, 0x61, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x68,
	0x2e, 0x44, 0x65, 0x63, 0x52, 0x1f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x56, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x72, 0x61, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x3c, 0x0a, 0x1b, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x6d, 0x61, 0x78, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x1a, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x69,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x54, 0x6f, 0x70, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12,
	0x40, 0x0a, 0x1d, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x63,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x6d, 0x61, 0x78, 0x54, 0x6f, 0x70, 0x46, 0x6f,
	0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x12, 0x3a, 0x0a, 0x1a, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x70,
	0x75, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x54, 0x6f, 0x70, 0x52, 0x65, 0x70,
	0x75, 0x74, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x5a, 0x0a,
	0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x66, 0x65,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f,
	0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61,
	0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x46, 0x65, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x67, 0x72, 0x61,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x67,
	0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x61,
	0x78, 0x49, 0x74, 0x65, 0x72, 0x73, 0x12, 0x5b, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2,
	0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0xa8, 0xe7, 0xb0,
	0x2a, 0x01, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x65, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x50, 0x61,
	0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x40, 0x0a, 0x1d, 0x6d, 0x69, 0x6e, 0x5f, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19,
	0x6d, 0x69, 0x6e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x12, 0x65, 0x0a, 0x12, 0x70, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x37, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x72, 0x61, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x72, 0x61, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f,
	0x6d, 0x61, 0x74, 0x68, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x10, 0x70, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x11, 0x70, 0x5f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x2f, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x72, 0x61,
	0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x72, 0x61, 0x2d,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x0f,
	0x70, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x12,
	0x61, 0x0a, 0x10, 0x70, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x75,
	0x74, 0x65, 0x72, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0xc8, 0xde, 0x1f, 0x00, 0xda,
	0xde, 0x1f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c,
	0x6c, 0x6f, 0x72, 0x61, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x61, 0x6c, 0x6c,
	0x6f, 0x72, 0x61, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x44,
	0x65, 0x63, 0x52, 0x0e, 0x70, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x70, 0x75, 0x74,
	0x65, 0x72, 0x12, 0x65, 0x0a, 0x12, 0x63, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37,
	0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x72, 0x61, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x72, 0x61, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d,
	0x61, 0x74, 0x68, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x10, 0x63, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x11, 0x63, 0x5f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x2f, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x72, 0x61, 0x2d,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x72, 0x61, 0x2d, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x0f, 0x63,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x12, 0x4e,
	0x0a, 0x06, 0x63, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37,
	0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x72, 0x61, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x72, 0x61, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d,
	0x61, 0x74, 0x68, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x05, 0x63, 0x4e, 0x6f, 0x72, 0x6d, 0x12, 0x60,
	0x0a, 0x0f, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x75, 0x74, 0x65,
	0x72, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f,
	0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x6c, 0x6f,
	0x72, 0x61, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x72,
	0x61, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x44, 0x65, 0x63,
	0x52, 0x0e, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x75, 0x74, 0x65, 0x72,
	0x12, 0x56, 0x0a, 0x29, 0x68, 0x61, 0x6c, 0x66, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x61, 0x6c, 0x73, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x23, 0x68, 0x61, 0x6c, 0x66, 0x4d, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x73,
	0x45, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x61, 0x0a, 0x10, 0x65, 0x70, 0x73, 0x69,
	0x6c, 0x6f, 0x6e, 0x5f, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x64, 0x69, 0x76, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x37, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x2f, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x72, 0x61, 0x2d, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x72, 0x61, 0x2d, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x0e, 0x65, 0x70, 0x73,
	0x69, 0x6c, 0x6f, 0x6e, 0x53, 0x61, 0x66, 0x65, 0x44, 0x69, 0x76, 0x12, 0x5a, 0x0a, 0x10, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65, 0x65, 0x18,
	0x2c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68,
	0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x5f, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x65,
	0x63, 0x61, 0x73, 0x74, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61,
	0x73, 0x74, 0x12, 0x3c, 0x0a, 0x1b, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x6d, 0x61, 0x78, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x50, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x1a, 0x10, 0x1b, 0x4a, 0x04, 0x08, 0x1b,
	0x10, 0x1c, 0x4a, 0x04, 0x08, 0x27, 0x10, 0x28, 0x4a, 0x04, 0x08, 0x29, 0x10, 0x2a, 0x52, 0x14,
	0x6d, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x1b, 0x6d, 0x69, 0x6e, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x52, 0x23, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x74,
	0x6f, 0x5f, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x5f,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x1c, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x66, 0x65,
	0x65, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x61, 0x79, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x52, 0x24, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x5f, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x75, 0x74, 0x65, 0x72, 0x42, 0xc1, 0x01, 0x0a, 0x10, 0x63,
	0x6f, 0x6d, 0x2e, 0x65, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x33, 0x42,
	0x0b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4f,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x72,
	0x61, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x72, 0x61,
	0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x78, 0x2f, 0x65, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x76, 0x33, 0x3b, 0x65, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x76, 0x33, 0xa2,
	0x02, 0x03, 0x45, 0x58, 0x58, 0xaa, 0x02, 0x0c, 0x45, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x56, 0x33, 0xca, 0x02, 0x0c, 0x45, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x5c, 0x56, 0x33, 0xe2, 0x02, 0x18, 0x45, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5c,
	0x56, 0x33, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x0d, 0x45, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x3a, 0x56, 0x33, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_emissions_v3_params_proto_rawDescOnce sync.Once
	file_emissions_v3_params_proto_rawDescData = file_emissions_v3_params_proto_rawDesc
)

func file_emissions_v3_params_proto_rawDescGZIP() []byte {
	file_emissions_v3_params_proto_rawDescOnce.Do(func() {
		file_emissions_v3_params_proto_rawDescData = protoimpl.X.CompressGZIP(file_emissions_v3_params_proto_rawDescData)
	})
	return file_emissions_v3_params_proto_rawDescData
}

var file_emissions_v3_params_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_emissions_v3_params_proto_goTypes = []interface{}{
	(*Params)(nil), // 0: emissions.v3.Params
}
var file_emissions_v3_params_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_emissions_v3_params_proto_init() }
func file_emissions_v3_params_proto_init() {
	if File_emissions_v3_params_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_emissions_v3_params_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_emissions_v3_params_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_emissions_v3_params_proto_goTypes,
		DependencyIndexes: file_emissions_v3_params_proto_depIdxs,
		MessageInfos:      file_emissions_v3_params_proto_msgTypes,
	}.Build()
	File_emissions_v3_params_proto = out.File
	file_emissions_v3_params_proto_rawDesc = nil
	file_emissions_v3_params_proto_goTypes = nil
	file_emissions_v3_params_proto_depIdxs = nil
}
