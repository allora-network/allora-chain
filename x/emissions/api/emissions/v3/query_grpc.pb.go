// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: emissions/v3/query.proto

package emissionsv3

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName                                      = "/emissions.v3.Query/Params"
	Query_GetNextTopicId_FullMethodName                              = "/emissions.v3.Query/GetNextTopicId"
	Query_GetTopic_FullMethodName                                    = "/emissions.v3.Query/GetTopic"
	Query_GetWorkerLatestInferenceByTopicId_FullMethodName           = "/emissions.v3.Query/GetWorkerLatestInferenceByTopicId"
	Query_GetInferencesAtBlock_FullMethodName                        = "/emissions.v3.Query/GetInferencesAtBlock"
	Query_GetLatestTopicInferences_FullMethodName                    = "/emissions.v3.Query/GetLatestTopicInferences"
	Query_GetForecastsAtBlock_FullMethodName                         = "/emissions.v3.Query/GetForecastsAtBlock"
	Query_GetNetworkLossBundleAtBlock_FullMethodName                 = "/emissions.v3.Query/GetNetworkLossBundleAtBlock"
	Query_GetTotalStake_FullMethodName                               = "/emissions.v3.Query/GetTotalStake"
	Query_GetReputerStakeInTopic_FullMethodName                      = "/emissions.v3.Query/GetReputerStakeInTopic"
	Query_GetMultiReputerStakeInTopic_FullMethodName                 = "/emissions.v3.Query/GetMultiReputerStakeInTopic"
	Query_GetStakeFromReputerInTopicInSelf_FullMethodName            = "/emissions.v3.Query/GetStakeFromReputerInTopicInSelf"
	Query_GetDelegateStakeInTopicInReputer_FullMethodName            = "/emissions.v3.Query/GetDelegateStakeInTopicInReputer"
	Query_GetStakeFromDelegatorInTopicInReputer_FullMethodName       = "/emissions.v3.Query/GetStakeFromDelegatorInTopicInReputer"
	Query_GetStakeFromDelegatorInTopic_FullMethodName                = "/emissions.v3.Query/GetStakeFromDelegatorInTopic"
	Query_GetTopicStake_FullMethodName                               = "/emissions.v3.Query/GetTopicStake"
	Query_GetStakeRemovalsUpUntilBlock_FullMethodName                = "/emissions.v3.Query/GetStakeRemovalsUpUntilBlock"
	Query_GetDelegateStakeRemovalsUpUntilBlock_FullMethodName        = "/emissions.v3.Query/GetDelegateStakeRemovalsUpUntilBlock"
	Query_GetStakeRemovalInfo_FullMethodName                         = "/emissions.v3.Query/GetStakeRemovalInfo"
	Query_GetDelegateStakeRemovalInfo_FullMethodName                 = "/emissions.v3.Query/GetDelegateStakeRemovalInfo"
	Query_GetWorkerNodeInfo_FullMethodName                           = "/emissions.v3.Query/GetWorkerNodeInfo"
	Query_GetReputerNodeInfo_FullMethodName                          = "/emissions.v3.Query/GetReputerNodeInfo"
	Query_IsWorkerRegisteredInTopicId_FullMethodName                 = "/emissions.v3.Query/IsWorkerRegisteredInTopicId"
	Query_IsReputerRegisteredInTopicId_FullMethodName                = "/emissions.v3.Query/IsReputerRegisteredInTopicId"
	Query_GetNetworkInferencesAtBlock_FullMethodName                 = "/emissions.v3.Query/GetNetworkInferencesAtBlock"
	Query_GetLatestNetworkInference_FullMethodName                   = "/emissions.v3.Query/GetLatestNetworkInference"
	Query_GetLatestAvailableNetworkInference_FullMethodName          = "/emissions.v3.Query/GetLatestAvailableNetworkInference"
	Query_IsWorkerNonceUnfulfilled_FullMethodName                    = "/emissions.v3.Query/IsWorkerNonceUnfulfilled"
	Query_IsReputerNonceUnfulfilled_FullMethodName                   = "/emissions.v3.Query/IsReputerNonceUnfulfilled"
	Query_GetUnfulfilledWorkerNonces_FullMethodName                  = "/emissions.v3.Query/GetUnfulfilledWorkerNonces"
	Query_GetUnfulfilledReputerNonces_FullMethodName                 = "/emissions.v3.Query/GetUnfulfilledReputerNonces"
	Query_GetInfererNetworkRegret_FullMethodName                     = "/emissions.v3.Query/GetInfererNetworkRegret"
	Query_GetForecasterNetworkRegret_FullMethodName                  = "/emissions.v3.Query/GetForecasterNetworkRegret"
	Query_GetOneInForecasterNetworkRegret_FullMethodName             = "/emissions.v3.Query/GetOneInForecasterNetworkRegret"
	Query_IsWhitelistAdmin_FullMethodName                            = "/emissions.v3.Query/IsWhitelistAdmin"
	Query_GetTopicLastWorkerCommitInfo_FullMethodName                = "/emissions.v3.Query/GetTopicLastWorkerCommitInfo"
	Query_GetTopicLastReputerCommitInfo_FullMethodName               = "/emissions.v3.Query/GetTopicLastReputerCommitInfo"
	Query_GetTopicRewardNonce_FullMethodName                         = "/emissions.v3.Query/GetTopicRewardNonce"
	Query_GetReputerLossBundlesAtBlock_FullMethodName                = "/emissions.v3.Query/GetReputerLossBundlesAtBlock"
	Query_GetStakeReputerAuthority_FullMethodName                    = "/emissions.v3.Query/GetStakeReputerAuthority"
	Query_GetDelegateStakePlacement_FullMethodName                   = "/emissions.v3.Query/GetDelegateStakePlacement"
	Query_GetDelegateStakeUponReputer_FullMethodName                 = "/emissions.v3.Query/GetDelegateStakeUponReputer"
	Query_GetDelegateRewardPerShare_FullMethodName                   = "/emissions.v3.Query/GetDelegateRewardPerShare"
	Query_GetStakeRemovalForReputerAndTopicId_FullMethodName         = "/emissions.v3.Query/GetStakeRemovalForReputerAndTopicId"
	Query_GetDelegateStakeRemoval_FullMethodName                     = "/emissions.v3.Query/GetDelegateStakeRemoval"
	Query_GetPreviousTopicWeight_FullMethodName                      = "/emissions.v3.Query/GetPreviousTopicWeight"
	Query_TopicExists_FullMethodName                                 = "/emissions.v3.Query/TopicExists"
	Query_IsTopicActive_FullMethodName                               = "/emissions.v3.Query/IsTopicActive"
	Query_GetTopicFeeRevenue_FullMethodName                          = "/emissions.v3.Query/GetTopicFeeRevenue"
	Query_GetInfererScoreEma_FullMethodName                          = "/emissions.v3.Query/GetInfererScoreEma"
	Query_GetForecasterScoreEma_FullMethodName                       = "/emissions.v3.Query/GetForecasterScoreEma"
	Query_GetReputerScoreEma_FullMethodName                          = "/emissions.v3.Query/GetReputerScoreEma"
	Query_GetInferenceScoresUntilBlock_FullMethodName                = "/emissions.v3.Query/GetInferenceScoresUntilBlock"
	Query_GetPreviousTopicQuantileForecasterScoreEma_FullMethodName  = "/emissions.v3.Query/GetPreviousTopicQuantileForecasterScoreEma"
	Query_GetPreviousTopicQuantileInfererScoreEma_FullMethodName     = "/emissions.v3.Query/GetPreviousTopicQuantileInfererScoreEma"
	Query_GetPreviousTopicQuantileReputerScoreEma_FullMethodName     = "/emissions.v3.Query/GetPreviousTopicQuantileReputerScoreEma"
	Query_GetWorkerInferenceScoresAtBlock_FullMethodName             = "/emissions.v3.Query/GetWorkerInferenceScoresAtBlock"
	Query_GetCurrentLowestInfererScore_FullMethodName                = "/emissions.v3.Query/GetCurrentLowestInfererScore"
	Query_GetForecastScoresUntilBlock_FullMethodName                 = "/emissions.v3.Query/GetForecastScoresUntilBlock"
	Query_GetWorkerForecastScoresAtBlock_FullMethodName              = "/emissions.v3.Query/GetWorkerForecastScoresAtBlock"
	Query_GetCurrentLowestForecasterScore_FullMethodName             = "/emissions.v3.Query/GetCurrentLowestForecasterScore"
	Query_GetReputersScoresAtBlock_FullMethodName                    = "/emissions.v3.Query/GetReputersScoresAtBlock"
	Query_GetCurrentLowestReputerScore_FullMethodName                = "/emissions.v3.Query/GetCurrentLowestReputerScore"
	Query_GetListeningCoefficient_FullMethodName                     = "/emissions.v3.Query/GetListeningCoefficient"
	Query_GetPreviousReputerRewardFraction_FullMethodName            = "/emissions.v3.Query/GetPreviousReputerRewardFraction"
	Query_GetPreviousInferenceRewardFraction_FullMethodName          = "/emissions.v3.Query/GetPreviousInferenceRewardFraction"
	Query_GetPreviousForecastRewardFraction_FullMethodName           = "/emissions.v3.Query/GetPreviousForecastRewardFraction"
	Query_GetPreviousPercentageRewardToStakedReputers_FullMethodName = "/emissions.v3.Query/GetPreviousPercentageRewardToStakedReputers"
	Query_GetTotalRewardToDistribute_FullMethodName                  = "/emissions.v3.Query/GetTotalRewardToDistribute"
	Query_GetNaiveInfererNetworkRegret_FullMethodName                = "/emissions.v3.Query/GetNaiveInfererNetworkRegret"
	Query_GetOneOutInfererInfererNetworkRegret_FullMethodName        = "/emissions.v3.Query/GetOneOutInfererInfererNetworkRegret"
	Query_GetOneOutInfererForecasterNetworkRegret_FullMethodName     = "/emissions.v3.Query/GetOneOutInfererForecasterNetworkRegret"
	Query_GetOneOutForecasterInfererNetworkRegret_FullMethodName     = "/emissions.v3.Query/GetOneOutForecasterInfererNetworkRegret"
	Query_GetOneOutForecasterForecasterNetworkRegret_FullMethodName  = "/emissions.v3.Query/GetOneOutForecasterForecasterNetworkRegret"
	Query_GetActiveTopicsAtBlock_FullMethodName                      = "/emissions.v3.Query/GetActiveTopicsAtBlock"
	Query_GetNextChurningBlockByTopicId_FullMethodName               = "/emissions.v3.Query/GetNextChurningBlockByTopicId"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Params returns the module parameters.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	GetNextTopicId(ctx context.Context, in *QueryNextTopicIdRequest, opts ...grpc.CallOption) (*QueryNextTopicIdResponse, error)
	GetTopic(ctx context.Context, in *QueryTopicRequest, opts ...grpc.CallOption) (*QueryTopicResponse, error)
	GetWorkerLatestInferenceByTopicId(ctx context.Context, in *QueryWorkerLatestInferenceRequest, opts ...grpc.CallOption) (*QueryWorkerLatestInferenceResponse, error)
	GetInferencesAtBlock(ctx context.Context, in *QueryInferencesAtBlockRequest, opts ...grpc.CallOption) (*QueryInferencesAtBlockResponse, error)
	GetLatestTopicInferences(ctx context.Context, in *QueryLatestTopicInferencesRequest, opts ...grpc.CallOption) (*QueryLatestTopicInferencesResponse, error)
	GetForecastsAtBlock(ctx context.Context, in *QueryForecastsAtBlockRequest, opts ...grpc.CallOption) (*QueryForecastsAtBlockResponse, error)
	GetNetworkLossBundleAtBlock(ctx context.Context, in *QueryNetworkLossBundleAtBlockRequest, opts ...grpc.CallOption) (*QueryNetworkLossBundleAtBlockResponse, error)
	GetTotalStake(ctx context.Context, in *QueryTotalStakeRequest, opts ...grpc.CallOption) (*QueryTotalStakeResponse, error)
	GetReputerStakeInTopic(ctx context.Context, in *QueryReputerStakeInTopicRequest, opts ...grpc.CallOption) (*QueryReputerStakeInTopicResponse, error)
	GetMultiReputerStakeInTopic(ctx context.Context, in *QueryMultiReputerStakeInTopicRequest, opts ...grpc.CallOption) (*QueryMultiReputerStakeInTopicResponse, error)
	GetStakeFromReputerInTopicInSelf(ctx context.Context, in *QueryStakeFromReputerInTopicInSelfRequest, opts ...grpc.CallOption) (*QueryStakeFromReputerInTopicInSelfResponse, error)
	GetDelegateStakeInTopicInReputer(ctx context.Context, in *QueryDelegateStakeInTopicInReputerRequest, opts ...grpc.CallOption) (*QueryDelegateStakeInTopicInReputerResponse, error)
	GetStakeFromDelegatorInTopicInReputer(ctx context.Context, in *QueryStakeFromDelegatorInTopicInReputerRequest, opts ...grpc.CallOption) (*QueryStakeFromDelegatorInTopicInReputerResponse, error)
	GetStakeFromDelegatorInTopic(ctx context.Context, in *QueryStakeFromDelegatorInTopicRequest, opts ...grpc.CallOption) (*QueryStakeFromDelegatorInTopicResponse, error)
	GetTopicStake(ctx context.Context, in *QueryTopicStakeRequest, opts ...grpc.CallOption) (*QueryTopicStakeResponse, error)
	GetStakeRemovalsUpUntilBlock(ctx context.Context, in *QueryStakeRemovalsUpUntilBlockRequest, opts ...grpc.CallOption) (*QueryStakeRemovalsUpUntilBlockResponse, error)
	GetDelegateStakeRemovalsUpUntilBlock(ctx context.Context, in *QueryDelegateStakeRemovalsUpUntilBlockRequest, opts ...grpc.CallOption) (*QueryDelegateStakeRemovalsUpUntilBlockResponse, error)
	GetStakeRemovalInfo(ctx context.Context, in *QueryStakeRemovalInfoRequest, opts ...grpc.CallOption) (*QueryStakeRemovalInfoResponse, error)
	GetDelegateStakeRemovalInfo(ctx context.Context, in *QueryDelegateStakeRemovalInfoRequest, opts ...grpc.CallOption) (*QueryDelegateStakeRemovalInfoResponse, error)
	GetWorkerNodeInfo(ctx context.Context, in *QueryWorkerNodeInfoRequest, opts ...grpc.CallOption) (*QueryWorkerNodeInfoResponse, error)
	GetReputerNodeInfo(ctx context.Context, in *QueryReputerNodeInfoRequest, opts ...grpc.CallOption) (*QueryReputerNodeInfoResponse, error)
	IsWorkerRegisteredInTopicId(ctx context.Context, in *QueryIsWorkerRegisteredInTopicIdRequest, opts ...grpc.CallOption) (*QueryIsWorkerRegisteredInTopicIdResponse, error)
	IsReputerRegisteredInTopicId(ctx context.Context, in *QueryIsReputerRegisteredInTopicIdRequest, opts ...grpc.CallOption) (*QueryIsReputerRegisteredInTopicIdResponse, error)
	GetNetworkInferencesAtBlock(ctx context.Context, in *QueryNetworkInferencesAtBlockRequest, opts ...grpc.CallOption) (*QueryNetworkInferencesAtBlockResponse, error)
	GetLatestNetworkInference(ctx context.Context, in *QueryLatestNetworkInferencesRequest, opts ...grpc.CallOption) (*QueryLatestNetworkInferencesResponse, error)
	GetLatestAvailableNetworkInference(ctx context.Context, in *QueryLatestAvailableNetworkInferencesRequest, opts ...grpc.CallOption) (*QueryLatestAvailableNetworkInferencesResponse, error)
	IsWorkerNonceUnfulfilled(ctx context.Context, in *QueryIsWorkerNonceUnfulfilledRequest, opts ...grpc.CallOption) (*QueryIsWorkerNonceUnfulfilledResponse, error)
	IsReputerNonceUnfulfilled(ctx context.Context, in *QueryIsReputerNonceUnfulfilledRequest, opts ...grpc.CallOption) (*QueryIsReputerNonceUnfulfilledResponse, error)
	GetUnfulfilledWorkerNonces(ctx context.Context, in *QueryUnfulfilledWorkerNoncesRequest, opts ...grpc.CallOption) (*QueryUnfulfilledWorkerNoncesResponse, error)
	GetUnfulfilledReputerNonces(ctx context.Context, in *QueryUnfulfilledReputerNoncesRequest, opts ...grpc.CallOption) (*QueryUnfulfilledReputerNoncesResponse, error)
	GetInfererNetworkRegret(ctx context.Context, in *QueryInfererNetworkRegretRequest, opts ...grpc.CallOption) (*QueryInfererNetworkRegretResponse, error)
	GetForecasterNetworkRegret(ctx context.Context, in *QueryForecasterNetworkRegretRequest, opts ...grpc.CallOption) (*QueryForecasterNetworkRegretResponse, error)
	GetOneInForecasterNetworkRegret(ctx context.Context, in *QueryOneInForecasterNetworkRegretRequest, opts ...grpc.CallOption) (*QueryOneInForecasterNetworkRegretResponse, error)
	IsWhitelistAdmin(ctx context.Context, in *QueryIsWhitelistAdminRequest, opts ...grpc.CallOption) (*QueryIsWhitelistAdminResponse, error)
	GetTopicLastWorkerCommitInfo(ctx context.Context, in *QueryTopicLastWorkerCommitInfoRequest, opts ...grpc.CallOption) (*QueryTopicLastWorkerCommitInfoResponse, error)
	GetTopicLastReputerCommitInfo(ctx context.Context, in *QueryTopicLastReputerCommitInfoRequest, opts ...grpc.CallOption) (*QueryTopicLastReputerCommitInfoResponse, error)
	GetTopicRewardNonce(ctx context.Context, in *QueryTopicRewardNonceRequest, opts ...grpc.CallOption) (*QueryTopicRewardNonceResponse, error)
	GetReputerLossBundlesAtBlock(ctx context.Context, in *QueryReputerLossBundlesAtBlockRequest, opts ...grpc.CallOption) (*QueryReputerLossBundlesAtBlockResponse, error)
	GetStakeReputerAuthority(ctx context.Context, in *QueryStakeReputerAuthorityRequest, opts ...grpc.CallOption) (*QueryStakeReputerAuthorityResponse, error)
	GetDelegateStakePlacement(ctx context.Context, in *QueryDelegateStakePlacementRequest, opts ...grpc.CallOption) (*QueryDelegateStakePlacementResponse, error)
	GetDelegateStakeUponReputer(ctx context.Context, in *QueryDelegateStakeUponReputerRequest, opts ...grpc.CallOption) (*QueryDelegateStakeUponReputerResponse, error)
	GetDelegateRewardPerShare(ctx context.Context, in *QueryDelegateRewardPerShareRequest, opts ...grpc.CallOption) (*QueryDelegateRewardPerShareResponse, error)
	GetStakeRemovalForReputerAndTopicId(ctx context.Context, in *QueryStakeRemovalForReputerAndTopicIdRequest, opts ...grpc.CallOption) (*QueryStakeRemovalForReputerAndTopicIdResponse, error)
	GetDelegateStakeRemoval(ctx context.Context, in *QueryDelegateStakeRemovalRequest, opts ...grpc.CallOption) (*QueryDelegateStakeRemovalResponse, error)
	GetPreviousTopicWeight(ctx context.Context, in *QueryPreviousTopicWeightRequest, opts ...grpc.CallOption) (*QueryPreviousTopicWeightResponse, error)
	TopicExists(ctx context.Context, in *QueryTopicExistsRequest, opts ...grpc.CallOption) (*QueryTopicExistsResponse, error)
	IsTopicActive(ctx context.Context, in *QueryIsTopicActiveRequest, opts ...grpc.CallOption) (*QueryIsTopicActiveResponse, error)
	GetTopicFeeRevenue(ctx context.Context, in *QueryTopicFeeRevenueRequest, opts ...grpc.CallOption) (*QueryTopicFeeRevenueResponse, error)
	GetInfererScoreEma(ctx context.Context, in *QueryGetInfererScoreEmaRequest, opts ...grpc.CallOption) (*QueryGetInfererScoreEmaResponse, error)
	GetForecasterScoreEma(ctx context.Context, in *QueryGetForecasterScoreEmaRequest, opts ...grpc.CallOption) (*QueryGetForecasterScoreEmaResponse, error)
	GetReputerScoreEma(ctx context.Context, in *QueryGetReputerScoreEmaRequest, opts ...grpc.CallOption) (*QueryGetReputerScoreEmaResponse, error)
	GetInferenceScoresUntilBlock(ctx context.Context, in *QueryInferenceScoresUntilBlockRequest, opts ...grpc.CallOption) (*QueryInferenceScoresUntilBlockResponse, error)
	GetPreviousTopicQuantileForecasterScoreEma(ctx context.Context, in *QueryGetPreviousTopicQuantileForecasterScoreEmaRequest, opts ...grpc.CallOption) (*QueryGetPreviousTopicQuantileForecasterScoreEmaResponse, error)
	GetPreviousTopicQuantileInfererScoreEma(ctx context.Context, in *QueryGetPreviousTopicQuantileInfererScoreEmaRequest, opts ...grpc.CallOption) (*QueryGetPreviousTopicQuantileInfererScoreEmaResponse, error)
	GetPreviousTopicQuantileReputerScoreEma(ctx context.Context, in *QueryGetPreviousTopicQuantileReputerScoreEmaRequest, opts ...grpc.CallOption) (*QueryGetPreviousTopicQuantileReputerScoreEmaResponse, error)
	GetWorkerInferenceScoresAtBlock(ctx context.Context, in *QueryWorkerInferenceScoresAtBlockRequest, opts ...grpc.CallOption) (*QueryWorkerInferenceScoresAtBlockResponse, error)
	GetCurrentLowestInfererScore(ctx context.Context, in *QueryCurrentLowestInfererScoreRequest, opts ...grpc.CallOption) (*QueryCurrentLowestInfererScoreResponse, error)
	GetForecastScoresUntilBlock(ctx context.Context, in *QueryForecastScoresUntilBlockRequest, opts ...grpc.CallOption) (*QueryForecastScoresUntilBlockResponse, error)
	GetWorkerForecastScoresAtBlock(ctx context.Context, in *QueryWorkerForecastScoresAtBlockRequest, opts ...grpc.CallOption) (*QueryWorkerForecastScoresAtBlockResponse, error)
	GetCurrentLowestForecasterScore(ctx context.Context, in *QueryCurrentLowestForecasterScoreRequest, opts ...grpc.CallOption) (*QueryCurrentLowestForecasterScoreResponse, error)
	GetReputersScoresAtBlock(ctx context.Context, in *QueryReputersScoresAtBlockRequest, opts ...grpc.CallOption) (*QueryReputersScoresAtBlockResponse, error)
	GetCurrentLowestReputerScore(ctx context.Context, in *QueryCurrentLowestReputerScoreRequest, opts ...grpc.CallOption) (*QueryCurrentLowestReputerScoreResponse, error)
	GetListeningCoefficient(ctx context.Context, in *QueryListeningCoefficientRequest, opts ...grpc.CallOption) (*QueryListeningCoefficientResponse, error)
	GetPreviousReputerRewardFraction(ctx context.Context, in *QueryPreviousReputerRewardFractionRequest, opts ...grpc.CallOption) (*QueryPreviousReputerRewardFractionResponse, error)
	GetPreviousInferenceRewardFraction(ctx context.Context, in *QueryPreviousInferenceRewardFractionRequest, opts ...grpc.CallOption) (*QueryPreviousInferenceRewardFractionResponse, error)
	GetPreviousForecastRewardFraction(ctx context.Context, in *QueryPreviousForecastRewardFractionRequest, opts ...grpc.CallOption) (*QueryPreviousForecastRewardFractionResponse, error)
	GetPreviousPercentageRewardToStakedReputers(ctx context.Context, in *QueryPreviousPercentageRewardToStakedReputersRequest, opts ...grpc.CallOption) (*QueryPreviousPercentageRewardToStakedReputersResponse, error)
	GetTotalRewardToDistribute(ctx context.Context, in *QueryTotalRewardToDistributeRequest, opts ...grpc.CallOption) (*QueryTotalRewardToDistributeResponse, error)
	GetNaiveInfererNetworkRegret(ctx context.Context, in *QueryNaiveInfererNetworkRegretRequest, opts ...grpc.CallOption) (*QueryNaiveInfererNetworkRegretResponse, error)
	GetOneOutInfererInfererNetworkRegret(ctx context.Context, in *QueryOneOutInfererInfererNetworkRegretRequest, opts ...grpc.CallOption) (*QueryOneOutInfererInfererNetworkRegretResponse, error)
	GetOneOutInfererForecasterNetworkRegret(ctx context.Context, in *QueryOneOutInfererForecasterNetworkRegretRequest, opts ...grpc.CallOption) (*QueryOneOutInfererForecasterNetworkRegretResponse, error)
	GetOneOutForecasterInfererNetworkRegret(ctx context.Context, in *QueryOneOutForecasterInfererNetworkRegretRequest, opts ...grpc.CallOption) (*QueryOneOutForecasterInfererNetworkRegretResponse, error)
	GetOneOutForecasterForecasterNetworkRegret(ctx context.Context, in *QueryOneOutForecasterForecasterNetworkRegretRequest, opts ...grpc.CallOption) (*QueryOneOutForecasterForecasterNetworkRegretResponse, error)
	GetActiveTopicsAtBlock(ctx context.Context, in *QueryActiveTopicsAtBlockRequest, opts ...grpc.CallOption) (*QueryActiveTopicsAtBlockResponse, error)
	GetNextChurningBlockByTopicId(ctx context.Context, in *QueryNextChurningBlockByTopicIdRequest, opts ...grpc.CallOption) (*QueryNextChurningBlockByTopicIdResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetNextTopicId(ctx context.Context, in *QueryNextTopicIdRequest, opts ...grpc.CallOption) (*QueryNextTopicIdResponse, error) {
	out := new(QueryNextTopicIdResponse)
	err := c.cc.Invoke(ctx, Query_GetNextTopicId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTopic(ctx context.Context, in *QueryTopicRequest, opts ...grpc.CallOption) (*QueryTopicResponse, error) {
	out := new(QueryTopicResponse)
	err := c.cc.Invoke(ctx, Query_GetTopic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetWorkerLatestInferenceByTopicId(ctx context.Context, in *QueryWorkerLatestInferenceRequest, opts ...grpc.CallOption) (*QueryWorkerLatestInferenceResponse, error) {
	out := new(QueryWorkerLatestInferenceResponse)
	err := c.cc.Invoke(ctx, Query_GetWorkerLatestInferenceByTopicId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetInferencesAtBlock(ctx context.Context, in *QueryInferencesAtBlockRequest, opts ...grpc.CallOption) (*QueryInferencesAtBlockResponse, error) {
	out := new(QueryInferencesAtBlockResponse)
	err := c.cc.Invoke(ctx, Query_GetInferencesAtBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLatestTopicInferences(ctx context.Context, in *QueryLatestTopicInferencesRequest, opts ...grpc.CallOption) (*QueryLatestTopicInferencesResponse, error) {
	out := new(QueryLatestTopicInferencesResponse)
	err := c.cc.Invoke(ctx, Query_GetLatestTopicInferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetForecastsAtBlock(ctx context.Context, in *QueryForecastsAtBlockRequest, opts ...grpc.CallOption) (*QueryForecastsAtBlockResponse, error) {
	out := new(QueryForecastsAtBlockResponse)
	err := c.cc.Invoke(ctx, Query_GetForecastsAtBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetNetworkLossBundleAtBlock(ctx context.Context, in *QueryNetworkLossBundleAtBlockRequest, opts ...grpc.CallOption) (*QueryNetworkLossBundleAtBlockResponse, error) {
	out := new(QueryNetworkLossBundleAtBlockResponse)
	err := c.cc.Invoke(ctx, Query_GetNetworkLossBundleAtBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTotalStake(ctx context.Context, in *QueryTotalStakeRequest, opts ...grpc.CallOption) (*QueryTotalStakeResponse, error) {
	out := new(QueryTotalStakeResponse)
	err := c.cc.Invoke(ctx, Query_GetTotalStake_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetReputerStakeInTopic(ctx context.Context, in *QueryReputerStakeInTopicRequest, opts ...grpc.CallOption) (*QueryReputerStakeInTopicResponse, error) {
	out := new(QueryReputerStakeInTopicResponse)
	err := c.cc.Invoke(ctx, Query_GetReputerStakeInTopic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetMultiReputerStakeInTopic(ctx context.Context, in *QueryMultiReputerStakeInTopicRequest, opts ...grpc.CallOption) (*QueryMultiReputerStakeInTopicResponse, error) {
	out := new(QueryMultiReputerStakeInTopicResponse)
	err := c.cc.Invoke(ctx, Query_GetMultiReputerStakeInTopic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetStakeFromReputerInTopicInSelf(ctx context.Context, in *QueryStakeFromReputerInTopicInSelfRequest, opts ...grpc.CallOption) (*QueryStakeFromReputerInTopicInSelfResponse, error) {
	out := new(QueryStakeFromReputerInTopicInSelfResponse)
	err := c.cc.Invoke(ctx, Query_GetStakeFromReputerInTopicInSelf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDelegateStakeInTopicInReputer(ctx context.Context, in *QueryDelegateStakeInTopicInReputerRequest, opts ...grpc.CallOption) (*QueryDelegateStakeInTopicInReputerResponse, error) {
	out := new(QueryDelegateStakeInTopicInReputerResponse)
	err := c.cc.Invoke(ctx, Query_GetDelegateStakeInTopicInReputer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetStakeFromDelegatorInTopicInReputer(ctx context.Context, in *QueryStakeFromDelegatorInTopicInReputerRequest, opts ...grpc.CallOption) (*QueryStakeFromDelegatorInTopicInReputerResponse, error) {
	out := new(QueryStakeFromDelegatorInTopicInReputerResponse)
	err := c.cc.Invoke(ctx, Query_GetStakeFromDelegatorInTopicInReputer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetStakeFromDelegatorInTopic(ctx context.Context, in *QueryStakeFromDelegatorInTopicRequest, opts ...grpc.CallOption) (*QueryStakeFromDelegatorInTopicResponse, error) {
	out := new(QueryStakeFromDelegatorInTopicResponse)
	err := c.cc.Invoke(ctx, Query_GetStakeFromDelegatorInTopic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTopicStake(ctx context.Context, in *QueryTopicStakeRequest, opts ...grpc.CallOption) (*QueryTopicStakeResponse, error) {
	out := new(QueryTopicStakeResponse)
	err := c.cc.Invoke(ctx, Query_GetTopicStake_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetStakeRemovalsUpUntilBlock(ctx context.Context, in *QueryStakeRemovalsUpUntilBlockRequest, opts ...grpc.CallOption) (*QueryStakeRemovalsUpUntilBlockResponse, error) {
	out := new(QueryStakeRemovalsUpUntilBlockResponse)
	err := c.cc.Invoke(ctx, Query_GetStakeRemovalsUpUntilBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDelegateStakeRemovalsUpUntilBlock(ctx context.Context, in *QueryDelegateStakeRemovalsUpUntilBlockRequest, opts ...grpc.CallOption) (*QueryDelegateStakeRemovalsUpUntilBlockResponse, error) {
	out := new(QueryDelegateStakeRemovalsUpUntilBlockResponse)
	err := c.cc.Invoke(ctx, Query_GetDelegateStakeRemovalsUpUntilBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetStakeRemovalInfo(ctx context.Context, in *QueryStakeRemovalInfoRequest, opts ...grpc.CallOption) (*QueryStakeRemovalInfoResponse, error) {
	out := new(QueryStakeRemovalInfoResponse)
	err := c.cc.Invoke(ctx, Query_GetStakeRemovalInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDelegateStakeRemovalInfo(ctx context.Context, in *QueryDelegateStakeRemovalInfoRequest, opts ...grpc.CallOption) (*QueryDelegateStakeRemovalInfoResponse, error) {
	out := new(QueryDelegateStakeRemovalInfoResponse)
	err := c.cc.Invoke(ctx, Query_GetDelegateStakeRemovalInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetWorkerNodeInfo(ctx context.Context, in *QueryWorkerNodeInfoRequest, opts ...grpc.CallOption) (*QueryWorkerNodeInfoResponse, error) {
	out := new(QueryWorkerNodeInfoResponse)
	err := c.cc.Invoke(ctx, Query_GetWorkerNodeInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetReputerNodeInfo(ctx context.Context, in *QueryReputerNodeInfoRequest, opts ...grpc.CallOption) (*QueryReputerNodeInfoResponse, error) {
	out := new(QueryReputerNodeInfoResponse)
	err := c.cc.Invoke(ctx, Query_GetReputerNodeInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IsWorkerRegisteredInTopicId(ctx context.Context, in *QueryIsWorkerRegisteredInTopicIdRequest, opts ...grpc.CallOption) (*QueryIsWorkerRegisteredInTopicIdResponse, error) {
	out := new(QueryIsWorkerRegisteredInTopicIdResponse)
	err := c.cc.Invoke(ctx, Query_IsWorkerRegisteredInTopicId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IsReputerRegisteredInTopicId(ctx context.Context, in *QueryIsReputerRegisteredInTopicIdRequest, opts ...grpc.CallOption) (*QueryIsReputerRegisteredInTopicIdResponse, error) {
	out := new(QueryIsReputerRegisteredInTopicIdResponse)
	err := c.cc.Invoke(ctx, Query_IsReputerRegisteredInTopicId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetNetworkInferencesAtBlock(ctx context.Context, in *QueryNetworkInferencesAtBlockRequest, opts ...grpc.CallOption) (*QueryNetworkInferencesAtBlockResponse, error) {
	out := new(QueryNetworkInferencesAtBlockResponse)
	err := c.cc.Invoke(ctx, Query_GetNetworkInferencesAtBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLatestNetworkInference(ctx context.Context, in *QueryLatestNetworkInferencesRequest, opts ...grpc.CallOption) (*QueryLatestNetworkInferencesResponse, error) {
	out := new(QueryLatestNetworkInferencesResponse)
	err := c.cc.Invoke(ctx, Query_GetLatestNetworkInference_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLatestAvailableNetworkInference(ctx context.Context, in *QueryLatestAvailableNetworkInferencesRequest, opts ...grpc.CallOption) (*QueryLatestAvailableNetworkInferencesResponse, error) {
	out := new(QueryLatestAvailableNetworkInferencesResponse)
	err := c.cc.Invoke(ctx, Query_GetLatestAvailableNetworkInference_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IsWorkerNonceUnfulfilled(ctx context.Context, in *QueryIsWorkerNonceUnfulfilledRequest, opts ...grpc.CallOption) (*QueryIsWorkerNonceUnfulfilledResponse, error) {
	out := new(QueryIsWorkerNonceUnfulfilledResponse)
	err := c.cc.Invoke(ctx, Query_IsWorkerNonceUnfulfilled_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IsReputerNonceUnfulfilled(ctx context.Context, in *QueryIsReputerNonceUnfulfilledRequest, opts ...grpc.CallOption) (*QueryIsReputerNonceUnfulfilledResponse, error) {
	out := new(QueryIsReputerNonceUnfulfilledResponse)
	err := c.cc.Invoke(ctx, Query_IsReputerNonceUnfulfilled_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetUnfulfilledWorkerNonces(ctx context.Context, in *QueryUnfulfilledWorkerNoncesRequest, opts ...grpc.CallOption) (*QueryUnfulfilledWorkerNoncesResponse, error) {
	out := new(QueryUnfulfilledWorkerNoncesResponse)
	err := c.cc.Invoke(ctx, Query_GetUnfulfilledWorkerNonces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetUnfulfilledReputerNonces(ctx context.Context, in *QueryUnfulfilledReputerNoncesRequest, opts ...grpc.CallOption) (*QueryUnfulfilledReputerNoncesResponse, error) {
	out := new(QueryUnfulfilledReputerNoncesResponse)
	err := c.cc.Invoke(ctx, Query_GetUnfulfilledReputerNonces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetInfererNetworkRegret(ctx context.Context, in *QueryInfererNetworkRegretRequest, opts ...grpc.CallOption) (*QueryInfererNetworkRegretResponse, error) {
	out := new(QueryInfererNetworkRegretResponse)
	err := c.cc.Invoke(ctx, Query_GetInfererNetworkRegret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetForecasterNetworkRegret(ctx context.Context, in *QueryForecasterNetworkRegretRequest, opts ...grpc.CallOption) (*QueryForecasterNetworkRegretResponse, error) {
	out := new(QueryForecasterNetworkRegretResponse)
	err := c.cc.Invoke(ctx, Query_GetForecasterNetworkRegret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetOneInForecasterNetworkRegret(ctx context.Context, in *QueryOneInForecasterNetworkRegretRequest, opts ...grpc.CallOption) (*QueryOneInForecasterNetworkRegretResponse, error) {
	out := new(QueryOneInForecasterNetworkRegretResponse)
	err := c.cc.Invoke(ctx, Query_GetOneInForecasterNetworkRegret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IsWhitelistAdmin(ctx context.Context, in *QueryIsWhitelistAdminRequest, opts ...grpc.CallOption) (*QueryIsWhitelistAdminResponse, error) {
	out := new(QueryIsWhitelistAdminResponse)
	err := c.cc.Invoke(ctx, Query_IsWhitelistAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTopicLastWorkerCommitInfo(ctx context.Context, in *QueryTopicLastWorkerCommitInfoRequest, opts ...grpc.CallOption) (*QueryTopicLastWorkerCommitInfoResponse, error) {
	out := new(QueryTopicLastWorkerCommitInfoResponse)
	err := c.cc.Invoke(ctx, Query_GetTopicLastWorkerCommitInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTopicLastReputerCommitInfo(ctx context.Context, in *QueryTopicLastReputerCommitInfoRequest, opts ...grpc.CallOption) (*QueryTopicLastReputerCommitInfoResponse, error) {
	out := new(QueryTopicLastReputerCommitInfoResponse)
	err := c.cc.Invoke(ctx, Query_GetTopicLastReputerCommitInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTopicRewardNonce(ctx context.Context, in *QueryTopicRewardNonceRequest, opts ...grpc.CallOption) (*QueryTopicRewardNonceResponse, error) {
	out := new(QueryTopicRewardNonceResponse)
	err := c.cc.Invoke(ctx, Query_GetTopicRewardNonce_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetReputerLossBundlesAtBlock(ctx context.Context, in *QueryReputerLossBundlesAtBlockRequest, opts ...grpc.CallOption) (*QueryReputerLossBundlesAtBlockResponse, error) {
	out := new(QueryReputerLossBundlesAtBlockResponse)
	err := c.cc.Invoke(ctx, Query_GetReputerLossBundlesAtBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetStakeReputerAuthority(ctx context.Context, in *QueryStakeReputerAuthorityRequest, opts ...grpc.CallOption) (*QueryStakeReputerAuthorityResponse, error) {
	out := new(QueryStakeReputerAuthorityResponse)
	err := c.cc.Invoke(ctx, Query_GetStakeReputerAuthority_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDelegateStakePlacement(ctx context.Context, in *QueryDelegateStakePlacementRequest, opts ...grpc.CallOption) (*QueryDelegateStakePlacementResponse, error) {
	out := new(QueryDelegateStakePlacementResponse)
	err := c.cc.Invoke(ctx, Query_GetDelegateStakePlacement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDelegateStakeUponReputer(ctx context.Context, in *QueryDelegateStakeUponReputerRequest, opts ...grpc.CallOption) (*QueryDelegateStakeUponReputerResponse, error) {
	out := new(QueryDelegateStakeUponReputerResponse)
	err := c.cc.Invoke(ctx, Query_GetDelegateStakeUponReputer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDelegateRewardPerShare(ctx context.Context, in *QueryDelegateRewardPerShareRequest, opts ...grpc.CallOption) (*QueryDelegateRewardPerShareResponse, error) {
	out := new(QueryDelegateRewardPerShareResponse)
	err := c.cc.Invoke(ctx, Query_GetDelegateRewardPerShare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetStakeRemovalForReputerAndTopicId(ctx context.Context, in *QueryStakeRemovalForReputerAndTopicIdRequest, opts ...grpc.CallOption) (*QueryStakeRemovalForReputerAndTopicIdResponse, error) {
	out := new(QueryStakeRemovalForReputerAndTopicIdResponse)
	err := c.cc.Invoke(ctx, Query_GetStakeRemovalForReputerAndTopicId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDelegateStakeRemoval(ctx context.Context, in *QueryDelegateStakeRemovalRequest, opts ...grpc.CallOption) (*QueryDelegateStakeRemovalResponse, error) {
	out := new(QueryDelegateStakeRemovalResponse)
	err := c.cc.Invoke(ctx, Query_GetDelegateStakeRemoval_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPreviousTopicWeight(ctx context.Context, in *QueryPreviousTopicWeightRequest, opts ...grpc.CallOption) (*QueryPreviousTopicWeightResponse, error) {
	out := new(QueryPreviousTopicWeightResponse)
	err := c.cc.Invoke(ctx, Query_GetPreviousTopicWeight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TopicExists(ctx context.Context, in *QueryTopicExistsRequest, opts ...grpc.CallOption) (*QueryTopicExistsResponse, error) {
	out := new(QueryTopicExistsResponse)
	err := c.cc.Invoke(ctx, Query_TopicExists_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IsTopicActive(ctx context.Context, in *QueryIsTopicActiveRequest, opts ...grpc.CallOption) (*QueryIsTopicActiveResponse, error) {
	out := new(QueryIsTopicActiveResponse)
	err := c.cc.Invoke(ctx, Query_IsTopicActive_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTopicFeeRevenue(ctx context.Context, in *QueryTopicFeeRevenueRequest, opts ...grpc.CallOption) (*QueryTopicFeeRevenueResponse, error) {
	out := new(QueryTopicFeeRevenueResponse)
	err := c.cc.Invoke(ctx, Query_GetTopicFeeRevenue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetInfererScoreEma(ctx context.Context, in *QueryGetInfererScoreEmaRequest, opts ...grpc.CallOption) (*QueryGetInfererScoreEmaResponse, error) {
	out := new(QueryGetInfererScoreEmaResponse)
	err := c.cc.Invoke(ctx, Query_GetInfererScoreEma_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetForecasterScoreEma(ctx context.Context, in *QueryGetForecasterScoreEmaRequest, opts ...grpc.CallOption) (*QueryGetForecasterScoreEmaResponse, error) {
	out := new(QueryGetForecasterScoreEmaResponse)
	err := c.cc.Invoke(ctx, Query_GetForecasterScoreEma_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetReputerScoreEma(ctx context.Context, in *QueryGetReputerScoreEmaRequest, opts ...grpc.CallOption) (*QueryGetReputerScoreEmaResponse, error) {
	out := new(QueryGetReputerScoreEmaResponse)
	err := c.cc.Invoke(ctx, Query_GetReputerScoreEma_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetInferenceScoresUntilBlock(ctx context.Context, in *QueryInferenceScoresUntilBlockRequest, opts ...grpc.CallOption) (*QueryInferenceScoresUntilBlockResponse, error) {
	out := new(QueryInferenceScoresUntilBlockResponse)
	err := c.cc.Invoke(ctx, Query_GetInferenceScoresUntilBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPreviousTopicQuantileForecasterScoreEma(ctx context.Context, in *QueryGetPreviousTopicQuantileForecasterScoreEmaRequest, opts ...grpc.CallOption) (*QueryGetPreviousTopicQuantileForecasterScoreEmaResponse, error) {
	out := new(QueryGetPreviousTopicQuantileForecasterScoreEmaResponse)
	err := c.cc.Invoke(ctx, Query_GetPreviousTopicQuantileForecasterScoreEma_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPreviousTopicQuantileInfererScoreEma(ctx context.Context, in *QueryGetPreviousTopicQuantileInfererScoreEmaRequest, opts ...grpc.CallOption) (*QueryGetPreviousTopicQuantileInfererScoreEmaResponse, error) {
	out := new(QueryGetPreviousTopicQuantileInfererScoreEmaResponse)
	err := c.cc.Invoke(ctx, Query_GetPreviousTopicQuantileInfererScoreEma_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPreviousTopicQuantileReputerScoreEma(ctx context.Context, in *QueryGetPreviousTopicQuantileReputerScoreEmaRequest, opts ...grpc.CallOption) (*QueryGetPreviousTopicQuantileReputerScoreEmaResponse, error) {
	out := new(QueryGetPreviousTopicQuantileReputerScoreEmaResponse)
	err := c.cc.Invoke(ctx, Query_GetPreviousTopicQuantileReputerScoreEma_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetWorkerInferenceScoresAtBlock(ctx context.Context, in *QueryWorkerInferenceScoresAtBlockRequest, opts ...grpc.CallOption) (*QueryWorkerInferenceScoresAtBlockResponse, error) {
	out := new(QueryWorkerInferenceScoresAtBlockResponse)
	err := c.cc.Invoke(ctx, Query_GetWorkerInferenceScoresAtBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCurrentLowestInfererScore(ctx context.Context, in *QueryCurrentLowestInfererScoreRequest, opts ...grpc.CallOption) (*QueryCurrentLowestInfererScoreResponse, error) {
	out := new(QueryCurrentLowestInfererScoreResponse)
	err := c.cc.Invoke(ctx, Query_GetCurrentLowestInfererScore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetForecastScoresUntilBlock(ctx context.Context, in *QueryForecastScoresUntilBlockRequest, opts ...grpc.CallOption) (*QueryForecastScoresUntilBlockResponse, error) {
	out := new(QueryForecastScoresUntilBlockResponse)
	err := c.cc.Invoke(ctx, Query_GetForecastScoresUntilBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetWorkerForecastScoresAtBlock(ctx context.Context, in *QueryWorkerForecastScoresAtBlockRequest, opts ...grpc.CallOption) (*QueryWorkerForecastScoresAtBlockResponse, error) {
	out := new(QueryWorkerForecastScoresAtBlockResponse)
	err := c.cc.Invoke(ctx, Query_GetWorkerForecastScoresAtBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCurrentLowestForecasterScore(ctx context.Context, in *QueryCurrentLowestForecasterScoreRequest, opts ...grpc.CallOption) (*QueryCurrentLowestForecasterScoreResponse, error) {
	out := new(QueryCurrentLowestForecasterScoreResponse)
	err := c.cc.Invoke(ctx, Query_GetCurrentLowestForecasterScore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetReputersScoresAtBlock(ctx context.Context, in *QueryReputersScoresAtBlockRequest, opts ...grpc.CallOption) (*QueryReputersScoresAtBlockResponse, error) {
	out := new(QueryReputersScoresAtBlockResponse)
	err := c.cc.Invoke(ctx, Query_GetReputersScoresAtBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCurrentLowestReputerScore(ctx context.Context, in *QueryCurrentLowestReputerScoreRequest, opts ...grpc.CallOption) (*QueryCurrentLowestReputerScoreResponse, error) {
	out := new(QueryCurrentLowestReputerScoreResponse)
	err := c.cc.Invoke(ctx, Query_GetCurrentLowestReputerScore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetListeningCoefficient(ctx context.Context, in *QueryListeningCoefficientRequest, opts ...grpc.CallOption) (*QueryListeningCoefficientResponse, error) {
	out := new(QueryListeningCoefficientResponse)
	err := c.cc.Invoke(ctx, Query_GetListeningCoefficient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPreviousReputerRewardFraction(ctx context.Context, in *QueryPreviousReputerRewardFractionRequest, opts ...grpc.CallOption) (*QueryPreviousReputerRewardFractionResponse, error) {
	out := new(QueryPreviousReputerRewardFractionResponse)
	err := c.cc.Invoke(ctx, Query_GetPreviousReputerRewardFraction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPreviousInferenceRewardFraction(ctx context.Context, in *QueryPreviousInferenceRewardFractionRequest, opts ...grpc.CallOption) (*QueryPreviousInferenceRewardFractionResponse, error) {
	out := new(QueryPreviousInferenceRewardFractionResponse)
	err := c.cc.Invoke(ctx, Query_GetPreviousInferenceRewardFraction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPreviousForecastRewardFraction(ctx context.Context, in *QueryPreviousForecastRewardFractionRequest, opts ...grpc.CallOption) (*QueryPreviousForecastRewardFractionResponse, error) {
	out := new(QueryPreviousForecastRewardFractionResponse)
	err := c.cc.Invoke(ctx, Query_GetPreviousForecastRewardFraction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPreviousPercentageRewardToStakedReputers(ctx context.Context, in *QueryPreviousPercentageRewardToStakedReputersRequest, opts ...grpc.CallOption) (*QueryPreviousPercentageRewardToStakedReputersResponse, error) {
	out := new(QueryPreviousPercentageRewardToStakedReputersResponse)
	err := c.cc.Invoke(ctx, Query_GetPreviousPercentageRewardToStakedReputers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTotalRewardToDistribute(ctx context.Context, in *QueryTotalRewardToDistributeRequest, opts ...grpc.CallOption) (*QueryTotalRewardToDistributeResponse, error) {
	out := new(QueryTotalRewardToDistributeResponse)
	err := c.cc.Invoke(ctx, Query_GetTotalRewardToDistribute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetNaiveInfererNetworkRegret(ctx context.Context, in *QueryNaiveInfererNetworkRegretRequest, opts ...grpc.CallOption) (*QueryNaiveInfererNetworkRegretResponse, error) {
	out := new(QueryNaiveInfererNetworkRegretResponse)
	err := c.cc.Invoke(ctx, Query_GetNaiveInfererNetworkRegret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetOneOutInfererInfererNetworkRegret(ctx context.Context, in *QueryOneOutInfererInfererNetworkRegretRequest, opts ...grpc.CallOption) (*QueryOneOutInfererInfererNetworkRegretResponse, error) {
	out := new(QueryOneOutInfererInfererNetworkRegretResponse)
	err := c.cc.Invoke(ctx, Query_GetOneOutInfererInfererNetworkRegret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetOneOutInfererForecasterNetworkRegret(ctx context.Context, in *QueryOneOutInfererForecasterNetworkRegretRequest, opts ...grpc.CallOption) (*QueryOneOutInfererForecasterNetworkRegretResponse, error) {
	out := new(QueryOneOutInfererForecasterNetworkRegretResponse)
	err := c.cc.Invoke(ctx, Query_GetOneOutInfererForecasterNetworkRegret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetOneOutForecasterInfererNetworkRegret(ctx context.Context, in *QueryOneOutForecasterInfererNetworkRegretRequest, opts ...grpc.CallOption) (*QueryOneOutForecasterInfererNetworkRegretResponse, error) {
	out := new(QueryOneOutForecasterInfererNetworkRegretResponse)
	err := c.cc.Invoke(ctx, Query_GetOneOutForecasterInfererNetworkRegret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetOneOutForecasterForecasterNetworkRegret(ctx context.Context, in *QueryOneOutForecasterForecasterNetworkRegretRequest, opts ...grpc.CallOption) (*QueryOneOutForecasterForecasterNetworkRegretResponse, error) {
	out := new(QueryOneOutForecasterForecasterNetworkRegretResponse)
	err := c.cc.Invoke(ctx, Query_GetOneOutForecasterForecasterNetworkRegret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetActiveTopicsAtBlock(ctx context.Context, in *QueryActiveTopicsAtBlockRequest, opts ...grpc.CallOption) (*QueryActiveTopicsAtBlockResponse, error) {
	out := new(QueryActiveTopicsAtBlockResponse)
	err := c.cc.Invoke(ctx, Query_GetActiveTopicsAtBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetNextChurningBlockByTopicId(ctx context.Context, in *QueryNextChurningBlockByTopicIdRequest, opts ...grpc.CallOption) (*QueryNextChurningBlockByTopicIdResponse, error) {
	out := new(QueryNextChurningBlockByTopicIdResponse)
	err := c.cc.Invoke(ctx, Query_GetNextChurningBlockByTopicId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Params returns the module parameters.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	GetNextTopicId(context.Context, *QueryNextTopicIdRequest) (*QueryNextTopicIdResponse, error)
	GetTopic(context.Context, *QueryTopicRequest) (*QueryTopicResponse, error)
	GetWorkerLatestInferenceByTopicId(context.Context, *QueryWorkerLatestInferenceRequest) (*QueryWorkerLatestInferenceResponse, error)
	GetInferencesAtBlock(context.Context, *QueryInferencesAtBlockRequest) (*QueryInferencesAtBlockResponse, error)
	GetLatestTopicInferences(context.Context, *QueryLatestTopicInferencesRequest) (*QueryLatestTopicInferencesResponse, error)
	GetForecastsAtBlock(context.Context, *QueryForecastsAtBlockRequest) (*QueryForecastsAtBlockResponse, error)
	GetNetworkLossBundleAtBlock(context.Context, *QueryNetworkLossBundleAtBlockRequest) (*QueryNetworkLossBundleAtBlockResponse, error)
	GetTotalStake(context.Context, *QueryTotalStakeRequest) (*QueryTotalStakeResponse, error)
	GetReputerStakeInTopic(context.Context, *QueryReputerStakeInTopicRequest) (*QueryReputerStakeInTopicResponse, error)
	GetMultiReputerStakeInTopic(context.Context, *QueryMultiReputerStakeInTopicRequest) (*QueryMultiReputerStakeInTopicResponse, error)
	GetStakeFromReputerInTopicInSelf(context.Context, *QueryStakeFromReputerInTopicInSelfRequest) (*QueryStakeFromReputerInTopicInSelfResponse, error)
	GetDelegateStakeInTopicInReputer(context.Context, *QueryDelegateStakeInTopicInReputerRequest) (*QueryDelegateStakeInTopicInReputerResponse, error)
	GetStakeFromDelegatorInTopicInReputer(context.Context, *QueryStakeFromDelegatorInTopicInReputerRequest) (*QueryStakeFromDelegatorInTopicInReputerResponse, error)
	GetStakeFromDelegatorInTopic(context.Context, *QueryStakeFromDelegatorInTopicRequest) (*QueryStakeFromDelegatorInTopicResponse, error)
	GetTopicStake(context.Context, *QueryTopicStakeRequest) (*QueryTopicStakeResponse, error)
	GetStakeRemovalsUpUntilBlock(context.Context, *QueryStakeRemovalsUpUntilBlockRequest) (*QueryStakeRemovalsUpUntilBlockResponse, error)
	GetDelegateStakeRemovalsUpUntilBlock(context.Context, *QueryDelegateStakeRemovalsUpUntilBlockRequest) (*QueryDelegateStakeRemovalsUpUntilBlockResponse, error)
	GetStakeRemovalInfo(context.Context, *QueryStakeRemovalInfoRequest) (*QueryStakeRemovalInfoResponse, error)
	GetDelegateStakeRemovalInfo(context.Context, *QueryDelegateStakeRemovalInfoRequest) (*QueryDelegateStakeRemovalInfoResponse, error)
	GetWorkerNodeInfo(context.Context, *QueryWorkerNodeInfoRequest) (*QueryWorkerNodeInfoResponse, error)
	GetReputerNodeInfo(context.Context, *QueryReputerNodeInfoRequest) (*QueryReputerNodeInfoResponse, error)
	IsWorkerRegisteredInTopicId(context.Context, *QueryIsWorkerRegisteredInTopicIdRequest) (*QueryIsWorkerRegisteredInTopicIdResponse, error)
	IsReputerRegisteredInTopicId(context.Context, *QueryIsReputerRegisteredInTopicIdRequest) (*QueryIsReputerRegisteredInTopicIdResponse, error)
	GetNetworkInferencesAtBlock(context.Context, *QueryNetworkInferencesAtBlockRequest) (*QueryNetworkInferencesAtBlockResponse, error)
	GetLatestNetworkInference(context.Context, *QueryLatestNetworkInferencesRequest) (*QueryLatestNetworkInferencesResponse, error)
	GetLatestAvailableNetworkInference(context.Context, *QueryLatestAvailableNetworkInferencesRequest) (*QueryLatestAvailableNetworkInferencesResponse, error)
	IsWorkerNonceUnfulfilled(context.Context, *QueryIsWorkerNonceUnfulfilledRequest) (*QueryIsWorkerNonceUnfulfilledResponse, error)
	IsReputerNonceUnfulfilled(context.Context, *QueryIsReputerNonceUnfulfilledRequest) (*QueryIsReputerNonceUnfulfilledResponse, error)
	GetUnfulfilledWorkerNonces(context.Context, *QueryUnfulfilledWorkerNoncesRequest) (*QueryUnfulfilledWorkerNoncesResponse, error)
	GetUnfulfilledReputerNonces(context.Context, *QueryUnfulfilledReputerNoncesRequest) (*QueryUnfulfilledReputerNoncesResponse, error)
	GetInfererNetworkRegret(context.Context, *QueryInfererNetworkRegretRequest) (*QueryInfererNetworkRegretResponse, error)
	GetForecasterNetworkRegret(context.Context, *QueryForecasterNetworkRegretRequest) (*QueryForecasterNetworkRegretResponse, error)
	GetOneInForecasterNetworkRegret(context.Context, *QueryOneInForecasterNetworkRegretRequest) (*QueryOneInForecasterNetworkRegretResponse, error)
	IsWhitelistAdmin(context.Context, *QueryIsWhitelistAdminRequest) (*QueryIsWhitelistAdminResponse, error)
	GetTopicLastWorkerCommitInfo(context.Context, *QueryTopicLastWorkerCommitInfoRequest) (*QueryTopicLastWorkerCommitInfoResponse, error)
	GetTopicLastReputerCommitInfo(context.Context, *QueryTopicLastReputerCommitInfoRequest) (*QueryTopicLastReputerCommitInfoResponse, error)
	GetTopicRewardNonce(context.Context, *QueryTopicRewardNonceRequest) (*QueryTopicRewardNonceResponse, error)
	GetReputerLossBundlesAtBlock(context.Context, *QueryReputerLossBundlesAtBlockRequest) (*QueryReputerLossBundlesAtBlockResponse, error)
	GetStakeReputerAuthority(context.Context, *QueryStakeReputerAuthorityRequest) (*QueryStakeReputerAuthorityResponse, error)
	GetDelegateStakePlacement(context.Context, *QueryDelegateStakePlacementRequest) (*QueryDelegateStakePlacementResponse, error)
	GetDelegateStakeUponReputer(context.Context, *QueryDelegateStakeUponReputerRequest) (*QueryDelegateStakeUponReputerResponse, error)
	GetDelegateRewardPerShare(context.Context, *QueryDelegateRewardPerShareRequest) (*QueryDelegateRewardPerShareResponse, error)
	GetStakeRemovalForReputerAndTopicId(context.Context, *QueryStakeRemovalForReputerAndTopicIdRequest) (*QueryStakeRemovalForReputerAndTopicIdResponse, error)
	GetDelegateStakeRemoval(context.Context, *QueryDelegateStakeRemovalRequest) (*QueryDelegateStakeRemovalResponse, error)
	GetPreviousTopicWeight(context.Context, *QueryPreviousTopicWeightRequest) (*QueryPreviousTopicWeightResponse, error)
	TopicExists(context.Context, *QueryTopicExistsRequest) (*QueryTopicExistsResponse, error)
	IsTopicActive(context.Context, *QueryIsTopicActiveRequest) (*QueryIsTopicActiveResponse, error)
	GetTopicFeeRevenue(context.Context, *QueryTopicFeeRevenueRequest) (*QueryTopicFeeRevenueResponse, error)
	GetInfererScoreEma(context.Context, *QueryGetInfererScoreEmaRequest) (*QueryGetInfererScoreEmaResponse, error)
	GetForecasterScoreEma(context.Context, *QueryGetForecasterScoreEmaRequest) (*QueryGetForecasterScoreEmaResponse, error)
	GetReputerScoreEma(context.Context, *QueryGetReputerScoreEmaRequest) (*QueryGetReputerScoreEmaResponse, error)
	GetInferenceScoresUntilBlock(context.Context, *QueryInferenceScoresUntilBlockRequest) (*QueryInferenceScoresUntilBlockResponse, error)
	GetPreviousTopicQuantileForecasterScoreEma(context.Context, *QueryGetPreviousTopicQuantileForecasterScoreEmaRequest) (*QueryGetPreviousTopicQuantileForecasterScoreEmaResponse, error)
	GetPreviousTopicQuantileInfererScoreEma(context.Context, *QueryGetPreviousTopicQuantileInfererScoreEmaRequest) (*QueryGetPreviousTopicQuantileInfererScoreEmaResponse, error)
	GetPreviousTopicQuantileReputerScoreEma(context.Context, *QueryGetPreviousTopicQuantileReputerScoreEmaRequest) (*QueryGetPreviousTopicQuantileReputerScoreEmaResponse, error)
	GetWorkerInferenceScoresAtBlock(context.Context, *QueryWorkerInferenceScoresAtBlockRequest) (*QueryWorkerInferenceScoresAtBlockResponse, error)
	GetCurrentLowestInfererScore(context.Context, *QueryCurrentLowestInfererScoreRequest) (*QueryCurrentLowestInfererScoreResponse, error)
	GetForecastScoresUntilBlock(context.Context, *QueryForecastScoresUntilBlockRequest) (*QueryForecastScoresUntilBlockResponse, error)
	GetWorkerForecastScoresAtBlock(context.Context, *QueryWorkerForecastScoresAtBlockRequest) (*QueryWorkerForecastScoresAtBlockResponse, error)
	GetCurrentLowestForecasterScore(context.Context, *QueryCurrentLowestForecasterScoreRequest) (*QueryCurrentLowestForecasterScoreResponse, error)
	GetReputersScoresAtBlock(context.Context, *QueryReputersScoresAtBlockRequest) (*QueryReputersScoresAtBlockResponse, error)
	GetCurrentLowestReputerScore(context.Context, *QueryCurrentLowestReputerScoreRequest) (*QueryCurrentLowestReputerScoreResponse, error)
	GetListeningCoefficient(context.Context, *QueryListeningCoefficientRequest) (*QueryListeningCoefficientResponse, error)
	GetPreviousReputerRewardFraction(context.Context, *QueryPreviousReputerRewardFractionRequest) (*QueryPreviousReputerRewardFractionResponse, error)
	GetPreviousInferenceRewardFraction(context.Context, *QueryPreviousInferenceRewardFractionRequest) (*QueryPreviousInferenceRewardFractionResponse, error)
	GetPreviousForecastRewardFraction(context.Context, *QueryPreviousForecastRewardFractionRequest) (*QueryPreviousForecastRewardFractionResponse, error)
	GetPreviousPercentageRewardToStakedReputers(context.Context, *QueryPreviousPercentageRewardToStakedReputersRequest) (*QueryPreviousPercentageRewardToStakedReputersResponse, error)
	GetTotalRewardToDistribute(context.Context, *QueryTotalRewardToDistributeRequest) (*QueryTotalRewardToDistributeResponse, error)
	GetNaiveInfererNetworkRegret(context.Context, *QueryNaiveInfererNetworkRegretRequest) (*QueryNaiveInfererNetworkRegretResponse, error)
	GetOneOutInfererInfererNetworkRegret(context.Context, *QueryOneOutInfererInfererNetworkRegretRequest) (*QueryOneOutInfererInfererNetworkRegretResponse, error)
	GetOneOutInfererForecasterNetworkRegret(context.Context, *QueryOneOutInfererForecasterNetworkRegretRequest) (*QueryOneOutInfererForecasterNetworkRegretResponse, error)
	GetOneOutForecasterInfererNetworkRegret(context.Context, *QueryOneOutForecasterInfererNetworkRegretRequest) (*QueryOneOutForecasterInfererNetworkRegretResponse, error)
	GetOneOutForecasterForecasterNetworkRegret(context.Context, *QueryOneOutForecasterForecasterNetworkRegretRequest) (*QueryOneOutForecasterForecasterNetworkRegretResponse, error)
	GetActiveTopicsAtBlock(context.Context, *QueryActiveTopicsAtBlockRequest) (*QueryActiveTopicsAtBlockResponse, error)
	GetNextChurningBlockByTopicId(context.Context, *QueryNextChurningBlockByTopicIdRequest) (*QueryNextChurningBlockByTopicIdResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) GetNextTopicId(context.Context, *QueryNextTopicIdRequest) (*QueryNextTopicIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextTopicId not implemented")
}
func (UnimplementedQueryServer) GetTopic(context.Context, *QueryTopicRequest) (*QueryTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopic not implemented")
}
func (UnimplementedQueryServer) GetWorkerLatestInferenceByTopicId(context.Context, *QueryWorkerLatestInferenceRequest) (*QueryWorkerLatestInferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerLatestInferenceByTopicId not implemented")
}
func (UnimplementedQueryServer) GetInferencesAtBlock(context.Context, *QueryInferencesAtBlockRequest) (*QueryInferencesAtBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInferencesAtBlock not implemented")
}
func (UnimplementedQueryServer) GetLatestTopicInferences(context.Context, *QueryLatestTopicInferencesRequest) (*QueryLatestTopicInferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestTopicInferences not implemented")
}
func (UnimplementedQueryServer) GetForecastsAtBlock(context.Context, *QueryForecastsAtBlockRequest) (*QueryForecastsAtBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForecastsAtBlock not implemented")
}
func (UnimplementedQueryServer) GetNetworkLossBundleAtBlock(context.Context, *QueryNetworkLossBundleAtBlockRequest) (*QueryNetworkLossBundleAtBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkLossBundleAtBlock not implemented")
}
func (UnimplementedQueryServer) GetTotalStake(context.Context, *QueryTotalStakeRequest) (*QueryTotalStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalStake not implemented")
}
func (UnimplementedQueryServer) GetReputerStakeInTopic(context.Context, *QueryReputerStakeInTopicRequest) (*QueryReputerStakeInTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReputerStakeInTopic not implemented")
}
func (UnimplementedQueryServer) GetMultiReputerStakeInTopic(context.Context, *QueryMultiReputerStakeInTopicRequest) (*QueryMultiReputerStakeInTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMultiReputerStakeInTopic not implemented")
}
func (UnimplementedQueryServer) GetStakeFromReputerInTopicInSelf(context.Context, *QueryStakeFromReputerInTopicInSelfRequest) (*QueryStakeFromReputerInTopicInSelfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakeFromReputerInTopicInSelf not implemented")
}
func (UnimplementedQueryServer) GetDelegateStakeInTopicInReputer(context.Context, *QueryDelegateStakeInTopicInReputerRequest) (*QueryDelegateStakeInTopicInReputerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegateStakeInTopicInReputer not implemented")
}
func (UnimplementedQueryServer) GetStakeFromDelegatorInTopicInReputer(context.Context, *QueryStakeFromDelegatorInTopicInReputerRequest) (*QueryStakeFromDelegatorInTopicInReputerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakeFromDelegatorInTopicInReputer not implemented")
}
func (UnimplementedQueryServer) GetStakeFromDelegatorInTopic(context.Context, *QueryStakeFromDelegatorInTopicRequest) (*QueryStakeFromDelegatorInTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakeFromDelegatorInTopic not implemented")
}
func (UnimplementedQueryServer) GetTopicStake(context.Context, *QueryTopicStakeRequest) (*QueryTopicStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicStake not implemented")
}
func (UnimplementedQueryServer) GetStakeRemovalsUpUntilBlock(context.Context, *QueryStakeRemovalsUpUntilBlockRequest) (*QueryStakeRemovalsUpUntilBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakeRemovalsUpUntilBlock not implemented")
}
func (UnimplementedQueryServer) GetDelegateStakeRemovalsUpUntilBlock(context.Context, *QueryDelegateStakeRemovalsUpUntilBlockRequest) (*QueryDelegateStakeRemovalsUpUntilBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegateStakeRemovalsUpUntilBlock not implemented")
}
func (UnimplementedQueryServer) GetStakeRemovalInfo(context.Context, *QueryStakeRemovalInfoRequest) (*QueryStakeRemovalInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakeRemovalInfo not implemented")
}
func (UnimplementedQueryServer) GetDelegateStakeRemovalInfo(context.Context, *QueryDelegateStakeRemovalInfoRequest) (*QueryDelegateStakeRemovalInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegateStakeRemovalInfo not implemented")
}
func (UnimplementedQueryServer) GetWorkerNodeInfo(context.Context, *QueryWorkerNodeInfoRequest) (*QueryWorkerNodeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerNodeInfo not implemented")
}
func (UnimplementedQueryServer) GetReputerNodeInfo(context.Context, *QueryReputerNodeInfoRequest) (*QueryReputerNodeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReputerNodeInfo not implemented")
}
func (UnimplementedQueryServer) IsWorkerRegisteredInTopicId(context.Context, *QueryIsWorkerRegisteredInTopicIdRequest) (*QueryIsWorkerRegisteredInTopicIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsWorkerRegisteredInTopicId not implemented")
}
func (UnimplementedQueryServer) IsReputerRegisteredInTopicId(context.Context, *QueryIsReputerRegisteredInTopicIdRequest) (*QueryIsReputerRegisteredInTopicIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsReputerRegisteredInTopicId not implemented")
}
func (UnimplementedQueryServer) GetNetworkInferencesAtBlock(context.Context, *QueryNetworkInferencesAtBlockRequest) (*QueryNetworkInferencesAtBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkInferencesAtBlock not implemented")
}
func (UnimplementedQueryServer) GetLatestNetworkInference(context.Context, *QueryLatestNetworkInferencesRequest) (*QueryLatestNetworkInferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestNetworkInference not implemented")
}
func (UnimplementedQueryServer) GetLatestAvailableNetworkInference(context.Context, *QueryLatestAvailableNetworkInferencesRequest) (*QueryLatestAvailableNetworkInferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestAvailableNetworkInference not implemented")
}
func (UnimplementedQueryServer) IsWorkerNonceUnfulfilled(context.Context, *QueryIsWorkerNonceUnfulfilledRequest) (*QueryIsWorkerNonceUnfulfilledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsWorkerNonceUnfulfilled not implemented")
}
func (UnimplementedQueryServer) IsReputerNonceUnfulfilled(context.Context, *QueryIsReputerNonceUnfulfilledRequest) (*QueryIsReputerNonceUnfulfilledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsReputerNonceUnfulfilled not implemented")
}
func (UnimplementedQueryServer) GetUnfulfilledWorkerNonces(context.Context, *QueryUnfulfilledWorkerNoncesRequest) (*QueryUnfulfilledWorkerNoncesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnfulfilledWorkerNonces not implemented")
}
func (UnimplementedQueryServer) GetUnfulfilledReputerNonces(context.Context, *QueryUnfulfilledReputerNoncesRequest) (*QueryUnfulfilledReputerNoncesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnfulfilledReputerNonces not implemented")
}
func (UnimplementedQueryServer) GetInfererNetworkRegret(context.Context, *QueryInfererNetworkRegretRequest) (*QueryInfererNetworkRegretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfererNetworkRegret not implemented")
}
func (UnimplementedQueryServer) GetForecasterNetworkRegret(context.Context, *QueryForecasterNetworkRegretRequest) (*QueryForecasterNetworkRegretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForecasterNetworkRegret not implemented")
}
func (UnimplementedQueryServer) GetOneInForecasterNetworkRegret(context.Context, *QueryOneInForecasterNetworkRegretRequest) (*QueryOneInForecasterNetworkRegretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneInForecasterNetworkRegret not implemented")
}
func (UnimplementedQueryServer) IsWhitelistAdmin(context.Context, *QueryIsWhitelistAdminRequest) (*QueryIsWhitelistAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsWhitelistAdmin not implemented")
}
func (UnimplementedQueryServer) GetTopicLastWorkerCommitInfo(context.Context, *QueryTopicLastWorkerCommitInfoRequest) (*QueryTopicLastWorkerCommitInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicLastWorkerCommitInfo not implemented")
}
func (UnimplementedQueryServer) GetTopicLastReputerCommitInfo(context.Context, *QueryTopicLastReputerCommitInfoRequest) (*QueryTopicLastReputerCommitInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicLastReputerCommitInfo not implemented")
}
func (UnimplementedQueryServer) GetTopicRewardNonce(context.Context, *QueryTopicRewardNonceRequest) (*QueryTopicRewardNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicRewardNonce not implemented")
}
func (UnimplementedQueryServer) GetReputerLossBundlesAtBlock(context.Context, *QueryReputerLossBundlesAtBlockRequest) (*QueryReputerLossBundlesAtBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReputerLossBundlesAtBlock not implemented")
}
func (UnimplementedQueryServer) GetStakeReputerAuthority(context.Context, *QueryStakeReputerAuthorityRequest) (*QueryStakeReputerAuthorityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakeReputerAuthority not implemented")
}
func (UnimplementedQueryServer) GetDelegateStakePlacement(context.Context, *QueryDelegateStakePlacementRequest) (*QueryDelegateStakePlacementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegateStakePlacement not implemented")
}
func (UnimplementedQueryServer) GetDelegateStakeUponReputer(context.Context, *QueryDelegateStakeUponReputerRequest) (*QueryDelegateStakeUponReputerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegateStakeUponReputer not implemented")
}
func (UnimplementedQueryServer) GetDelegateRewardPerShare(context.Context, *QueryDelegateRewardPerShareRequest) (*QueryDelegateRewardPerShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegateRewardPerShare not implemented")
}
func (UnimplementedQueryServer) GetStakeRemovalForReputerAndTopicId(context.Context, *QueryStakeRemovalForReputerAndTopicIdRequest) (*QueryStakeRemovalForReputerAndTopicIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakeRemovalForReputerAndTopicId not implemented")
}
func (UnimplementedQueryServer) GetDelegateStakeRemoval(context.Context, *QueryDelegateStakeRemovalRequest) (*QueryDelegateStakeRemovalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegateStakeRemoval not implemented")
}
func (UnimplementedQueryServer) GetPreviousTopicWeight(context.Context, *QueryPreviousTopicWeightRequest) (*QueryPreviousTopicWeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreviousTopicWeight not implemented")
}
func (UnimplementedQueryServer) TopicExists(context.Context, *QueryTopicExistsRequest) (*QueryTopicExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopicExists not implemented")
}
func (UnimplementedQueryServer) IsTopicActive(context.Context, *QueryIsTopicActiveRequest) (*QueryIsTopicActiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsTopicActive not implemented")
}
func (UnimplementedQueryServer) GetTopicFeeRevenue(context.Context, *QueryTopicFeeRevenueRequest) (*QueryTopicFeeRevenueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicFeeRevenue not implemented")
}
func (UnimplementedQueryServer) GetInfererScoreEma(context.Context, *QueryGetInfererScoreEmaRequest) (*QueryGetInfererScoreEmaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfererScoreEma not implemented")
}
func (UnimplementedQueryServer) GetForecasterScoreEma(context.Context, *QueryGetForecasterScoreEmaRequest) (*QueryGetForecasterScoreEmaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForecasterScoreEma not implemented")
}
func (UnimplementedQueryServer) GetReputerScoreEma(context.Context, *QueryGetReputerScoreEmaRequest) (*QueryGetReputerScoreEmaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReputerScoreEma not implemented")
}
func (UnimplementedQueryServer) GetInferenceScoresUntilBlock(context.Context, *QueryInferenceScoresUntilBlockRequest) (*QueryInferenceScoresUntilBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInferenceScoresUntilBlock not implemented")
}
func (UnimplementedQueryServer) GetPreviousTopicQuantileForecasterScoreEma(context.Context, *QueryGetPreviousTopicQuantileForecasterScoreEmaRequest) (*QueryGetPreviousTopicQuantileForecasterScoreEmaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreviousTopicQuantileForecasterScoreEma not implemented")
}
func (UnimplementedQueryServer) GetPreviousTopicQuantileInfererScoreEma(context.Context, *QueryGetPreviousTopicQuantileInfererScoreEmaRequest) (*QueryGetPreviousTopicQuantileInfererScoreEmaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreviousTopicQuantileInfererScoreEma not implemented")
}
func (UnimplementedQueryServer) GetPreviousTopicQuantileReputerScoreEma(context.Context, *QueryGetPreviousTopicQuantileReputerScoreEmaRequest) (*QueryGetPreviousTopicQuantileReputerScoreEmaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreviousTopicQuantileReputerScoreEma not implemented")
}
func (UnimplementedQueryServer) GetWorkerInferenceScoresAtBlock(context.Context, *QueryWorkerInferenceScoresAtBlockRequest) (*QueryWorkerInferenceScoresAtBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerInferenceScoresAtBlock not implemented")
}
func (UnimplementedQueryServer) GetCurrentLowestInfererScore(context.Context, *QueryCurrentLowestInfererScoreRequest) (*QueryCurrentLowestInfererScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentLowestInfererScore not implemented")
}
func (UnimplementedQueryServer) GetForecastScoresUntilBlock(context.Context, *QueryForecastScoresUntilBlockRequest) (*QueryForecastScoresUntilBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForecastScoresUntilBlock not implemented")
}
func (UnimplementedQueryServer) GetWorkerForecastScoresAtBlock(context.Context, *QueryWorkerForecastScoresAtBlockRequest) (*QueryWorkerForecastScoresAtBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerForecastScoresAtBlock not implemented")
}
func (UnimplementedQueryServer) GetCurrentLowestForecasterScore(context.Context, *QueryCurrentLowestForecasterScoreRequest) (*QueryCurrentLowestForecasterScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentLowestForecasterScore not implemented")
}
func (UnimplementedQueryServer) GetReputersScoresAtBlock(context.Context, *QueryReputersScoresAtBlockRequest) (*QueryReputersScoresAtBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReputersScoresAtBlock not implemented")
}
func (UnimplementedQueryServer) GetCurrentLowestReputerScore(context.Context, *QueryCurrentLowestReputerScoreRequest) (*QueryCurrentLowestReputerScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentLowestReputerScore not implemented")
}
func (UnimplementedQueryServer) GetListeningCoefficient(context.Context, *QueryListeningCoefficientRequest) (*QueryListeningCoefficientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListeningCoefficient not implemented")
}
func (UnimplementedQueryServer) GetPreviousReputerRewardFraction(context.Context, *QueryPreviousReputerRewardFractionRequest) (*QueryPreviousReputerRewardFractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreviousReputerRewardFraction not implemented")
}
func (UnimplementedQueryServer) GetPreviousInferenceRewardFraction(context.Context, *QueryPreviousInferenceRewardFractionRequest) (*QueryPreviousInferenceRewardFractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreviousInferenceRewardFraction not implemented")
}
func (UnimplementedQueryServer) GetPreviousForecastRewardFraction(context.Context, *QueryPreviousForecastRewardFractionRequest) (*QueryPreviousForecastRewardFractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreviousForecastRewardFraction not implemented")
}
func (UnimplementedQueryServer) GetPreviousPercentageRewardToStakedReputers(context.Context, *QueryPreviousPercentageRewardToStakedReputersRequest) (*QueryPreviousPercentageRewardToStakedReputersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreviousPercentageRewardToStakedReputers not implemented")
}
func (UnimplementedQueryServer) GetTotalRewardToDistribute(context.Context, *QueryTotalRewardToDistributeRequest) (*QueryTotalRewardToDistributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalRewardToDistribute not implemented")
}
func (UnimplementedQueryServer) GetNaiveInfererNetworkRegret(context.Context, *QueryNaiveInfererNetworkRegretRequest) (*QueryNaiveInfererNetworkRegretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNaiveInfererNetworkRegret not implemented")
}
func (UnimplementedQueryServer) GetOneOutInfererInfererNetworkRegret(context.Context, *QueryOneOutInfererInfererNetworkRegretRequest) (*QueryOneOutInfererInfererNetworkRegretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneOutInfererInfererNetworkRegret not implemented")
}
func (UnimplementedQueryServer) GetOneOutInfererForecasterNetworkRegret(context.Context, *QueryOneOutInfererForecasterNetworkRegretRequest) (*QueryOneOutInfererForecasterNetworkRegretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneOutInfererForecasterNetworkRegret not implemented")
}
func (UnimplementedQueryServer) GetOneOutForecasterInfererNetworkRegret(context.Context, *QueryOneOutForecasterInfererNetworkRegretRequest) (*QueryOneOutForecasterInfererNetworkRegretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneOutForecasterInfererNetworkRegret not implemented")
}
func (UnimplementedQueryServer) GetOneOutForecasterForecasterNetworkRegret(context.Context, *QueryOneOutForecasterForecasterNetworkRegretRequest) (*QueryOneOutForecasterForecasterNetworkRegretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneOutForecasterForecasterNetworkRegret not implemented")
}
func (UnimplementedQueryServer) GetActiveTopicsAtBlock(context.Context, *QueryActiveTopicsAtBlockRequest) (*QueryActiveTopicsAtBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveTopicsAtBlock not implemented")
}
func (UnimplementedQueryServer) GetNextChurningBlockByTopicId(context.Context, *QueryNextChurningBlockByTopicIdRequest) (*QueryNextChurningBlockByTopicIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextChurningBlockByTopicId not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetNextTopicId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNextTopicIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetNextTopicId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetNextTopicId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetNextTopicId(ctx, req.(*QueryNextTopicIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTopic(ctx, req.(*QueryTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetWorkerLatestInferenceByTopicId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWorkerLatestInferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetWorkerLatestInferenceByTopicId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetWorkerLatestInferenceByTopicId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetWorkerLatestInferenceByTopicId(ctx, req.(*QueryWorkerLatestInferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetInferencesAtBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInferencesAtBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetInferencesAtBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetInferencesAtBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetInferencesAtBlock(ctx, req.(*QueryInferencesAtBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLatestTopicInferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatestTopicInferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLatestTopicInferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetLatestTopicInferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLatestTopicInferences(ctx, req.(*QueryLatestTopicInferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetForecastsAtBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryForecastsAtBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetForecastsAtBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetForecastsAtBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetForecastsAtBlock(ctx, req.(*QueryForecastsAtBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetNetworkLossBundleAtBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNetworkLossBundleAtBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetNetworkLossBundleAtBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetNetworkLossBundleAtBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetNetworkLossBundleAtBlock(ctx, req.(*QueryNetworkLossBundleAtBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTotalStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalStakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTotalStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetTotalStake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTotalStake(ctx, req.(*QueryTotalStakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetReputerStakeInTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReputerStakeInTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetReputerStakeInTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetReputerStakeInTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetReputerStakeInTopic(ctx, req.(*QueryReputerStakeInTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetMultiReputerStakeInTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMultiReputerStakeInTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetMultiReputerStakeInTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetMultiReputerStakeInTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetMultiReputerStakeInTopic(ctx, req.(*QueryMultiReputerStakeInTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetStakeFromReputerInTopicInSelf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakeFromReputerInTopicInSelfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetStakeFromReputerInTopicInSelf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetStakeFromReputerInTopicInSelf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetStakeFromReputerInTopicInSelf(ctx, req.(*QueryStakeFromReputerInTopicInSelfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDelegateStakeInTopicInReputer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegateStakeInTopicInReputerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDelegateStakeInTopicInReputer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetDelegateStakeInTopicInReputer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDelegateStakeInTopicInReputer(ctx, req.(*QueryDelegateStakeInTopicInReputerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetStakeFromDelegatorInTopicInReputer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakeFromDelegatorInTopicInReputerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetStakeFromDelegatorInTopicInReputer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetStakeFromDelegatorInTopicInReputer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetStakeFromDelegatorInTopicInReputer(ctx, req.(*QueryStakeFromDelegatorInTopicInReputerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetStakeFromDelegatorInTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakeFromDelegatorInTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetStakeFromDelegatorInTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetStakeFromDelegatorInTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetStakeFromDelegatorInTopic(ctx, req.(*QueryStakeFromDelegatorInTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTopicStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTopicStakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTopicStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetTopicStake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTopicStake(ctx, req.(*QueryTopicStakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetStakeRemovalsUpUntilBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakeRemovalsUpUntilBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetStakeRemovalsUpUntilBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetStakeRemovalsUpUntilBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetStakeRemovalsUpUntilBlock(ctx, req.(*QueryStakeRemovalsUpUntilBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDelegateStakeRemovalsUpUntilBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegateStakeRemovalsUpUntilBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDelegateStakeRemovalsUpUntilBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetDelegateStakeRemovalsUpUntilBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDelegateStakeRemovalsUpUntilBlock(ctx, req.(*QueryDelegateStakeRemovalsUpUntilBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetStakeRemovalInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakeRemovalInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetStakeRemovalInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetStakeRemovalInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetStakeRemovalInfo(ctx, req.(*QueryStakeRemovalInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDelegateStakeRemovalInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegateStakeRemovalInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDelegateStakeRemovalInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetDelegateStakeRemovalInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDelegateStakeRemovalInfo(ctx, req.(*QueryDelegateStakeRemovalInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetWorkerNodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWorkerNodeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetWorkerNodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetWorkerNodeInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetWorkerNodeInfo(ctx, req.(*QueryWorkerNodeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetReputerNodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReputerNodeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetReputerNodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetReputerNodeInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetReputerNodeInfo(ctx, req.(*QueryReputerNodeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IsWorkerRegisteredInTopicId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIsWorkerRegisteredInTopicIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IsWorkerRegisteredInTopicId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_IsWorkerRegisteredInTopicId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IsWorkerRegisteredInTopicId(ctx, req.(*QueryIsWorkerRegisteredInTopicIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IsReputerRegisteredInTopicId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIsReputerRegisteredInTopicIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IsReputerRegisteredInTopicId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_IsReputerRegisteredInTopicId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IsReputerRegisteredInTopicId(ctx, req.(*QueryIsReputerRegisteredInTopicIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetNetworkInferencesAtBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNetworkInferencesAtBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetNetworkInferencesAtBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetNetworkInferencesAtBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetNetworkInferencesAtBlock(ctx, req.(*QueryNetworkInferencesAtBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLatestNetworkInference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatestNetworkInferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLatestNetworkInference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetLatestNetworkInference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLatestNetworkInference(ctx, req.(*QueryLatestNetworkInferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLatestAvailableNetworkInference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatestAvailableNetworkInferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLatestAvailableNetworkInference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetLatestAvailableNetworkInference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLatestAvailableNetworkInference(ctx, req.(*QueryLatestAvailableNetworkInferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IsWorkerNonceUnfulfilled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIsWorkerNonceUnfulfilledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IsWorkerNonceUnfulfilled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_IsWorkerNonceUnfulfilled_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IsWorkerNonceUnfulfilled(ctx, req.(*QueryIsWorkerNonceUnfulfilledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IsReputerNonceUnfulfilled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIsReputerNonceUnfulfilledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IsReputerNonceUnfulfilled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_IsReputerNonceUnfulfilled_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IsReputerNonceUnfulfilled(ctx, req.(*QueryIsReputerNonceUnfulfilledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetUnfulfilledWorkerNonces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUnfulfilledWorkerNoncesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetUnfulfilledWorkerNonces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetUnfulfilledWorkerNonces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetUnfulfilledWorkerNonces(ctx, req.(*QueryUnfulfilledWorkerNoncesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetUnfulfilledReputerNonces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUnfulfilledReputerNoncesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetUnfulfilledReputerNonces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetUnfulfilledReputerNonces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetUnfulfilledReputerNonces(ctx, req.(*QueryUnfulfilledReputerNoncesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetInfererNetworkRegret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInfererNetworkRegretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetInfererNetworkRegret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetInfererNetworkRegret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetInfererNetworkRegret(ctx, req.(*QueryInfererNetworkRegretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetForecasterNetworkRegret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryForecasterNetworkRegretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetForecasterNetworkRegret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetForecasterNetworkRegret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetForecasterNetworkRegret(ctx, req.(*QueryForecasterNetworkRegretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetOneInForecasterNetworkRegret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOneInForecasterNetworkRegretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetOneInForecasterNetworkRegret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetOneInForecasterNetworkRegret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetOneInForecasterNetworkRegret(ctx, req.(*QueryOneInForecasterNetworkRegretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IsWhitelistAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIsWhitelistAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IsWhitelistAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_IsWhitelistAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IsWhitelistAdmin(ctx, req.(*QueryIsWhitelistAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTopicLastWorkerCommitInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTopicLastWorkerCommitInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTopicLastWorkerCommitInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetTopicLastWorkerCommitInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTopicLastWorkerCommitInfo(ctx, req.(*QueryTopicLastWorkerCommitInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTopicLastReputerCommitInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTopicLastReputerCommitInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTopicLastReputerCommitInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetTopicLastReputerCommitInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTopicLastReputerCommitInfo(ctx, req.(*QueryTopicLastReputerCommitInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTopicRewardNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTopicRewardNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTopicRewardNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetTopicRewardNonce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTopicRewardNonce(ctx, req.(*QueryTopicRewardNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetReputerLossBundlesAtBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReputerLossBundlesAtBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetReputerLossBundlesAtBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetReputerLossBundlesAtBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetReputerLossBundlesAtBlock(ctx, req.(*QueryReputerLossBundlesAtBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetStakeReputerAuthority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakeReputerAuthorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetStakeReputerAuthority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetStakeReputerAuthority_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetStakeReputerAuthority(ctx, req.(*QueryStakeReputerAuthorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDelegateStakePlacement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegateStakePlacementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDelegateStakePlacement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetDelegateStakePlacement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDelegateStakePlacement(ctx, req.(*QueryDelegateStakePlacementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDelegateStakeUponReputer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegateStakeUponReputerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDelegateStakeUponReputer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetDelegateStakeUponReputer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDelegateStakeUponReputer(ctx, req.(*QueryDelegateStakeUponReputerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDelegateRewardPerShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegateRewardPerShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDelegateRewardPerShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetDelegateRewardPerShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDelegateRewardPerShare(ctx, req.(*QueryDelegateRewardPerShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetStakeRemovalForReputerAndTopicId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakeRemovalForReputerAndTopicIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetStakeRemovalForReputerAndTopicId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetStakeRemovalForReputerAndTopicId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetStakeRemovalForReputerAndTopicId(ctx, req.(*QueryStakeRemovalForReputerAndTopicIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDelegateStakeRemoval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegateStakeRemovalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDelegateStakeRemoval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetDelegateStakeRemoval_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDelegateStakeRemoval(ctx, req.(*QueryDelegateStakeRemovalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPreviousTopicWeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPreviousTopicWeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPreviousTopicWeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetPreviousTopicWeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPreviousTopicWeight(ctx, req.(*QueryPreviousTopicWeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TopicExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTopicExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TopicExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TopicExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TopicExists(ctx, req.(*QueryTopicExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IsTopicActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIsTopicActiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IsTopicActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_IsTopicActive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IsTopicActive(ctx, req.(*QueryIsTopicActiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTopicFeeRevenue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTopicFeeRevenueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTopicFeeRevenue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetTopicFeeRevenue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTopicFeeRevenue(ctx, req.(*QueryTopicFeeRevenueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetInfererScoreEma_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetInfererScoreEmaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetInfererScoreEma(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetInfererScoreEma_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetInfererScoreEma(ctx, req.(*QueryGetInfererScoreEmaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetForecasterScoreEma_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetForecasterScoreEmaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetForecasterScoreEma(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetForecasterScoreEma_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetForecasterScoreEma(ctx, req.(*QueryGetForecasterScoreEmaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetReputerScoreEma_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetReputerScoreEmaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetReputerScoreEma(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetReputerScoreEma_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetReputerScoreEma(ctx, req.(*QueryGetReputerScoreEmaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetInferenceScoresUntilBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInferenceScoresUntilBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetInferenceScoresUntilBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetInferenceScoresUntilBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetInferenceScoresUntilBlock(ctx, req.(*QueryInferenceScoresUntilBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPreviousTopicQuantileForecasterScoreEma_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPreviousTopicQuantileForecasterScoreEmaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPreviousTopicQuantileForecasterScoreEma(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetPreviousTopicQuantileForecasterScoreEma_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPreviousTopicQuantileForecasterScoreEma(ctx, req.(*QueryGetPreviousTopicQuantileForecasterScoreEmaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPreviousTopicQuantileInfererScoreEma_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPreviousTopicQuantileInfererScoreEmaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPreviousTopicQuantileInfererScoreEma(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetPreviousTopicQuantileInfererScoreEma_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPreviousTopicQuantileInfererScoreEma(ctx, req.(*QueryGetPreviousTopicQuantileInfererScoreEmaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPreviousTopicQuantileReputerScoreEma_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPreviousTopicQuantileReputerScoreEmaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPreviousTopicQuantileReputerScoreEma(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetPreviousTopicQuantileReputerScoreEma_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPreviousTopicQuantileReputerScoreEma(ctx, req.(*QueryGetPreviousTopicQuantileReputerScoreEmaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetWorkerInferenceScoresAtBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWorkerInferenceScoresAtBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetWorkerInferenceScoresAtBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetWorkerInferenceScoresAtBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetWorkerInferenceScoresAtBlock(ctx, req.(*QueryWorkerInferenceScoresAtBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCurrentLowestInfererScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCurrentLowestInfererScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCurrentLowestInfererScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetCurrentLowestInfererScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCurrentLowestInfererScore(ctx, req.(*QueryCurrentLowestInfererScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetForecastScoresUntilBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryForecastScoresUntilBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetForecastScoresUntilBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetForecastScoresUntilBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetForecastScoresUntilBlock(ctx, req.(*QueryForecastScoresUntilBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetWorkerForecastScoresAtBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWorkerForecastScoresAtBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetWorkerForecastScoresAtBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetWorkerForecastScoresAtBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetWorkerForecastScoresAtBlock(ctx, req.(*QueryWorkerForecastScoresAtBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCurrentLowestForecasterScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCurrentLowestForecasterScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCurrentLowestForecasterScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetCurrentLowestForecasterScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCurrentLowestForecasterScore(ctx, req.(*QueryCurrentLowestForecasterScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetReputersScoresAtBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReputersScoresAtBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetReputersScoresAtBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetReputersScoresAtBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetReputersScoresAtBlock(ctx, req.(*QueryReputersScoresAtBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCurrentLowestReputerScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCurrentLowestReputerScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCurrentLowestReputerScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetCurrentLowestReputerScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCurrentLowestReputerScore(ctx, req.(*QueryCurrentLowestReputerScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetListeningCoefficient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListeningCoefficientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetListeningCoefficient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetListeningCoefficient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetListeningCoefficient(ctx, req.(*QueryListeningCoefficientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPreviousReputerRewardFraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPreviousReputerRewardFractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPreviousReputerRewardFraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetPreviousReputerRewardFraction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPreviousReputerRewardFraction(ctx, req.(*QueryPreviousReputerRewardFractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPreviousInferenceRewardFraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPreviousInferenceRewardFractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPreviousInferenceRewardFraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetPreviousInferenceRewardFraction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPreviousInferenceRewardFraction(ctx, req.(*QueryPreviousInferenceRewardFractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPreviousForecastRewardFraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPreviousForecastRewardFractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPreviousForecastRewardFraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetPreviousForecastRewardFraction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPreviousForecastRewardFraction(ctx, req.(*QueryPreviousForecastRewardFractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPreviousPercentageRewardToStakedReputers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPreviousPercentageRewardToStakedReputersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPreviousPercentageRewardToStakedReputers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetPreviousPercentageRewardToStakedReputers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPreviousPercentageRewardToStakedReputers(ctx, req.(*QueryPreviousPercentageRewardToStakedReputersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTotalRewardToDistribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalRewardToDistributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTotalRewardToDistribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetTotalRewardToDistribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTotalRewardToDistribute(ctx, req.(*QueryTotalRewardToDistributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetNaiveInfererNetworkRegret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNaiveInfererNetworkRegretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetNaiveInfererNetworkRegret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetNaiveInfererNetworkRegret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetNaiveInfererNetworkRegret(ctx, req.(*QueryNaiveInfererNetworkRegretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetOneOutInfererInfererNetworkRegret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOneOutInfererInfererNetworkRegretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetOneOutInfererInfererNetworkRegret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetOneOutInfererInfererNetworkRegret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetOneOutInfererInfererNetworkRegret(ctx, req.(*QueryOneOutInfererInfererNetworkRegretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetOneOutInfererForecasterNetworkRegret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOneOutInfererForecasterNetworkRegretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetOneOutInfererForecasterNetworkRegret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetOneOutInfererForecasterNetworkRegret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetOneOutInfererForecasterNetworkRegret(ctx, req.(*QueryOneOutInfererForecasterNetworkRegretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetOneOutForecasterInfererNetworkRegret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOneOutForecasterInfererNetworkRegretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetOneOutForecasterInfererNetworkRegret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetOneOutForecasterInfererNetworkRegret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetOneOutForecasterInfererNetworkRegret(ctx, req.(*QueryOneOutForecasterInfererNetworkRegretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetOneOutForecasterForecasterNetworkRegret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOneOutForecasterForecasterNetworkRegretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetOneOutForecasterForecasterNetworkRegret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetOneOutForecasterForecasterNetworkRegret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetOneOutForecasterForecasterNetworkRegret(ctx, req.(*QueryOneOutForecasterForecasterNetworkRegretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetActiveTopicsAtBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryActiveTopicsAtBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetActiveTopicsAtBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetActiveTopicsAtBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetActiveTopicsAtBlock(ctx, req.(*QueryActiveTopicsAtBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetNextChurningBlockByTopicId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNextChurningBlockByTopicIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetNextChurningBlockByTopicId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetNextChurningBlockByTopicId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetNextChurningBlockByTopicId(ctx, req.(*QueryNextChurningBlockByTopicIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "emissions.v3.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "GetNextTopicId",
			Handler:    _Query_GetNextTopicId_Handler,
		},
		{
			MethodName: "GetTopic",
			Handler:    _Query_GetTopic_Handler,
		},
		{
			MethodName: "GetWorkerLatestInferenceByTopicId",
			Handler:    _Query_GetWorkerLatestInferenceByTopicId_Handler,
		},
		{
			MethodName: "GetInferencesAtBlock",
			Handler:    _Query_GetInferencesAtBlock_Handler,
		},
		{
			MethodName: "GetLatestTopicInferences",
			Handler:    _Query_GetLatestTopicInferences_Handler,
		},
		{
			MethodName: "GetForecastsAtBlock",
			Handler:    _Query_GetForecastsAtBlock_Handler,
		},
		{
			MethodName: "GetNetworkLossBundleAtBlock",
			Handler:    _Query_GetNetworkLossBundleAtBlock_Handler,
		},
		{
			MethodName: "GetTotalStake",
			Handler:    _Query_GetTotalStake_Handler,
		},
		{
			MethodName: "GetReputerStakeInTopic",
			Handler:    _Query_GetReputerStakeInTopic_Handler,
		},
		{
			MethodName: "GetMultiReputerStakeInTopic",
			Handler:    _Query_GetMultiReputerStakeInTopic_Handler,
		},
		{
			MethodName: "GetStakeFromReputerInTopicInSelf",
			Handler:    _Query_GetStakeFromReputerInTopicInSelf_Handler,
		},
		{
			MethodName: "GetDelegateStakeInTopicInReputer",
			Handler:    _Query_GetDelegateStakeInTopicInReputer_Handler,
		},
		{
			MethodName: "GetStakeFromDelegatorInTopicInReputer",
			Handler:    _Query_GetStakeFromDelegatorInTopicInReputer_Handler,
		},
		{
			MethodName: "GetStakeFromDelegatorInTopic",
			Handler:    _Query_GetStakeFromDelegatorInTopic_Handler,
		},
		{
			MethodName: "GetTopicStake",
			Handler:    _Query_GetTopicStake_Handler,
		},
		{
			MethodName: "GetStakeRemovalsUpUntilBlock",
			Handler:    _Query_GetStakeRemovalsUpUntilBlock_Handler,
		},
		{
			MethodName: "GetDelegateStakeRemovalsUpUntilBlock",
			Handler:    _Query_GetDelegateStakeRemovalsUpUntilBlock_Handler,
		},
		{
			MethodName: "GetStakeRemovalInfo",
			Handler:    _Query_GetStakeRemovalInfo_Handler,
		},
		{
			MethodName: "GetDelegateStakeRemovalInfo",
			Handler:    _Query_GetDelegateStakeRemovalInfo_Handler,
		},
		{
			MethodName: "GetWorkerNodeInfo",
			Handler:    _Query_GetWorkerNodeInfo_Handler,
		},
		{
			MethodName: "GetReputerNodeInfo",
			Handler:    _Query_GetReputerNodeInfo_Handler,
		},
		{
			MethodName: "IsWorkerRegisteredInTopicId",
			Handler:    _Query_IsWorkerRegisteredInTopicId_Handler,
		},
		{
			MethodName: "IsReputerRegisteredInTopicId",
			Handler:    _Query_IsReputerRegisteredInTopicId_Handler,
		},
		{
			MethodName: "GetNetworkInferencesAtBlock",
			Handler:    _Query_GetNetworkInferencesAtBlock_Handler,
		},
		{
			MethodName: "GetLatestNetworkInference",
			Handler:    _Query_GetLatestNetworkInference_Handler,
		},
		{
			MethodName: "GetLatestAvailableNetworkInference",
			Handler:    _Query_GetLatestAvailableNetworkInference_Handler,
		},
		{
			MethodName: "IsWorkerNonceUnfulfilled",
			Handler:    _Query_IsWorkerNonceUnfulfilled_Handler,
		},
		{
			MethodName: "IsReputerNonceUnfulfilled",
			Handler:    _Query_IsReputerNonceUnfulfilled_Handler,
		},
		{
			MethodName: "GetUnfulfilledWorkerNonces",
			Handler:    _Query_GetUnfulfilledWorkerNonces_Handler,
		},
		{
			MethodName: "GetUnfulfilledReputerNonces",
			Handler:    _Query_GetUnfulfilledReputerNonces_Handler,
		},
		{
			MethodName: "GetInfererNetworkRegret",
			Handler:    _Query_GetInfererNetworkRegret_Handler,
		},
		{
			MethodName: "GetForecasterNetworkRegret",
			Handler:    _Query_GetForecasterNetworkRegret_Handler,
		},
		{
			MethodName: "GetOneInForecasterNetworkRegret",
			Handler:    _Query_GetOneInForecasterNetworkRegret_Handler,
		},
		{
			MethodName: "IsWhitelistAdmin",
			Handler:    _Query_IsWhitelistAdmin_Handler,
		},
		{
			MethodName: "GetTopicLastWorkerCommitInfo",
			Handler:    _Query_GetTopicLastWorkerCommitInfo_Handler,
		},
		{
			MethodName: "GetTopicLastReputerCommitInfo",
			Handler:    _Query_GetTopicLastReputerCommitInfo_Handler,
		},
		{
			MethodName: "GetTopicRewardNonce",
			Handler:    _Query_GetTopicRewardNonce_Handler,
		},
		{
			MethodName: "GetReputerLossBundlesAtBlock",
			Handler:    _Query_GetReputerLossBundlesAtBlock_Handler,
		},
		{
			MethodName: "GetStakeReputerAuthority",
			Handler:    _Query_GetStakeReputerAuthority_Handler,
		},
		{
			MethodName: "GetDelegateStakePlacement",
			Handler:    _Query_GetDelegateStakePlacement_Handler,
		},
		{
			MethodName: "GetDelegateStakeUponReputer",
			Handler:    _Query_GetDelegateStakeUponReputer_Handler,
		},
		{
			MethodName: "GetDelegateRewardPerShare",
			Handler:    _Query_GetDelegateRewardPerShare_Handler,
		},
		{
			MethodName: "GetStakeRemovalForReputerAndTopicId",
			Handler:    _Query_GetStakeRemovalForReputerAndTopicId_Handler,
		},
		{
			MethodName: "GetDelegateStakeRemoval",
			Handler:    _Query_GetDelegateStakeRemoval_Handler,
		},
		{
			MethodName: "GetPreviousTopicWeight",
			Handler:    _Query_GetPreviousTopicWeight_Handler,
		},
		{
			MethodName: "TopicExists",
			Handler:    _Query_TopicExists_Handler,
		},
		{
			MethodName: "IsTopicActive",
			Handler:    _Query_IsTopicActive_Handler,
		},
		{
			MethodName: "GetTopicFeeRevenue",
			Handler:    _Query_GetTopicFeeRevenue_Handler,
		},
		{
			MethodName: "GetInfererScoreEma",
			Handler:    _Query_GetInfererScoreEma_Handler,
		},
		{
			MethodName: "GetForecasterScoreEma",
			Handler:    _Query_GetForecasterScoreEma_Handler,
		},
		{
			MethodName: "GetReputerScoreEma",
			Handler:    _Query_GetReputerScoreEma_Handler,
		},
		{
			MethodName: "GetInferenceScoresUntilBlock",
			Handler:    _Query_GetInferenceScoresUntilBlock_Handler,
		},
		{
			MethodName: "GetPreviousTopicQuantileForecasterScoreEma",
			Handler:    _Query_GetPreviousTopicQuantileForecasterScoreEma_Handler,
		},
		{
			MethodName: "GetPreviousTopicQuantileInfererScoreEma",
			Handler:    _Query_GetPreviousTopicQuantileInfererScoreEma_Handler,
		},
		{
			MethodName: "GetPreviousTopicQuantileReputerScoreEma",
			Handler:    _Query_GetPreviousTopicQuantileReputerScoreEma_Handler,
		},
		{
			MethodName: "GetWorkerInferenceScoresAtBlock",
			Handler:    _Query_GetWorkerInferenceScoresAtBlock_Handler,
		},
		{
			MethodName: "GetCurrentLowestInfererScore",
			Handler:    _Query_GetCurrentLowestInfererScore_Handler,
		},
		{
			MethodName: "GetForecastScoresUntilBlock",
			Handler:    _Query_GetForecastScoresUntilBlock_Handler,
		},
		{
			MethodName: "GetWorkerForecastScoresAtBlock",
			Handler:    _Query_GetWorkerForecastScoresAtBlock_Handler,
		},
		{
			MethodName: "GetCurrentLowestForecasterScore",
			Handler:    _Query_GetCurrentLowestForecasterScore_Handler,
		},
		{
			MethodName: "GetReputersScoresAtBlock",
			Handler:    _Query_GetReputersScoresAtBlock_Handler,
		},
		{
			MethodName: "GetCurrentLowestReputerScore",
			Handler:    _Query_GetCurrentLowestReputerScore_Handler,
		},
		{
			MethodName: "GetListeningCoefficient",
			Handler:    _Query_GetListeningCoefficient_Handler,
		},
		{
			MethodName: "GetPreviousReputerRewardFraction",
			Handler:    _Query_GetPreviousReputerRewardFraction_Handler,
		},
		{
			MethodName: "GetPreviousInferenceRewardFraction",
			Handler:    _Query_GetPreviousInferenceRewardFraction_Handler,
		},
		{
			MethodName: "GetPreviousForecastRewardFraction",
			Handler:    _Query_GetPreviousForecastRewardFraction_Handler,
		},
		{
			MethodName: "GetPreviousPercentageRewardToStakedReputers",
			Handler:    _Query_GetPreviousPercentageRewardToStakedReputers_Handler,
		},
		{
			MethodName: "GetTotalRewardToDistribute",
			Handler:    _Query_GetTotalRewardToDistribute_Handler,
		},
		{
			MethodName: "GetNaiveInfererNetworkRegret",
			Handler:    _Query_GetNaiveInfererNetworkRegret_Handler,
		},
		{
			MethodName: "GetOneOutInfererInfererNetworkRegret",
			Handler:    _Query_GetOneOutInfererInfererNetworkRegret_Handler,
		},
		{
			MethodName: "GetOneOutInfererForecasterNetworkRegret",
			Handler:    _Query_GetOneOutInfererForecasterNetworkRegret_Handler,
		},
		{
			MethodName: "GetOneOutForecasterInfererNetworkRegret",
			Handler:    _Query_GetOneOutForecasterInfererNetworkRegret_Handler,
		},
		{
			MethodName: "GetOneOutForecasterForecasterNetworkRegret",
			Handler:    _Query_GetOneOutForecasterForecasterNetworkRegret_Handler,
		},
		{
			MethodName: "GetActiveTopicsAtBlock",
			Handler:    _Query_GetActiveTopicsAtBlock_Handler,
		},
		{
			MethodName: "GetNextChurningBlockByTopicId",
			Handler:    _Query_GetNextChurningBlockByTopicId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "emissions/v3/query.proto",
}
