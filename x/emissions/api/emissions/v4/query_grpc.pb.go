// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: emissions/v4/query.proto

package emissionsv4

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QueryService_GetParams_FullMethodName                                   = "/emissions.v4.QueryService/GetParams"
	QueryService_GetNextTopicId_FullMethodName                              = "/emissions.v4.QueryService/GetNextTopicId"
	QueryService_GetTopic_FullMethodName                                    = "/emissions.v4.QueryService/GetTopic"
	QueryService_GetWorkerLatestInferenceByTopicId_FullMethodName           = "/emissions.v4.QueryService/GetWorkerLatestInferenceByTopicId"
	QueryService_GetInferencesAtBlock_FullMethodName                        = "/emissions.v4.QueryService/GetInferencesAtBlock"
	QueryService_GetLatestTopicInferences_FullMethodName                    = "/emissions.v4.QueryService/GetLatestTopicInferences"
	QueryService_GetForecastsAtBlock_FullMethodName                         = "/emissions.v4.QueryService/GetForecastsAtBlock"
	QueryService_GetNetworkLossBundleAtBlock_FullMethodName                 = "/emissions.v4.QueryService/GetNetworkLossBundleAtBlock"
	QueryService_GetTotalStake_FullMethodName                               = "/emissions.v4.QueryService/GetTotalStake"
	QueryService_GetReputerStakeInTopic_FullMethodName                      = "/emissions.v4.QueryService/GetReputerStakeInTopic"
	QueryService_GetMultiReputerStakeInTopic_FullMethodName                 = "/emissions.v4.QueryService/GetMultiReputerStakeInTopic"
	QueryService_GetStakeFromReputerInTopicInSelf_FullMethodName            = "/emissions.v4.QueryService/GetStakeFromReputerInTopicInSelf"
	QueryService_GetDelegateStakeInTopicInReputer_FullMethodName            = "/emissions.v4.QueryService/GetDelegateStakeInTopicInReputer"
	QueryService_GetStakeFromDelegatorInTopicInReputer_FullMethodName       = "/emissions.v4.QueryService/GetStakeFromDelegatorInTopicInReputer"
	QueryService_GetStakeFromDelegatorInTopic_FullMethodName                = "/emissions.v4.QueryService/GetStakeFromDelegatorInTopic"
	QueryService_GetTopicStake_FullMethodName                               = "/emissions.v4.QueryService/GetTopicStake"
	QueryService_GetStakeRemovalsUpUntilBlock_FullMethodName                = "/emissions.v4.QueryService/GetStakeRemovalsUpUntilBlock"
	QueryService_GetDelegateStakeRemovalsUpUntilBlock_FullMethodName        = "/emissions.v4.QueryService/GetDelegateStakeRemovalsUpUntilBlock"
	QueryService_GetStakeRemovalInfo_FullMethodName                         = "/emissions.v4.QueryService/GetStakeRemovalInfo"
	QueryService_GetDelegateStakeRemovalInfo_FullMethodName                 = "/emissions.v4.QueryService/GetDelegateStakeRemovalInfo"
	QueryService_GetWorkerNodeInfo_FullMethodName                           = "/emissions.v4.QueryService/GetWorkerNodeInfo"
	QueryService_GetReputerNodeInfo_FullMethodName                          = "/emissions.v4.QueryService/GetReputerNodeInfo"
	QueryService_IsWorkerRegisteredInTopicId_FullMethodName                 = "/emissions.v4.QueryService/IsWorkerRegisteredInTopicId"
	QueryService_IsReputerRegisteredInTopicId_FullMethodName                = "/emissions.v4.QueryService/IsReputerRegisteredInTopicId"
	QueryService_GetNetworkInferencesAtBlock_FullMethodName                 = "/emissions.v4.QueryService/GetNetworkInferencesAtBlock"
	QueryService_GetLatestNetworkInferences_FullMethodName                  = "/emissions.v4.QueryService/GetLatestNetworkInferences"
	QueryService_GetLatestAvailableNetworkInferences_FullMethodName         = "/emissions.v4.QueryService/GetLatestAvailableNetworkInferences"
	QueryService_IsWorkerNonceUnfulfilled_FullMethodName                    = "/emissions.v4.QueryService/IsWorkerNonceUnfulfilled"
	QueryService_IsReputerNonceUnfulfilled_FullMethodName                   = "/emissions.v4.QueryService/IsReputerNonceUnfulfilled"
	QueryService_GetUnfulfilledWorkerNonces_FullMethodName                  = "/emissions.v4.QueryService/GetUnfulfilledWorkerNonces"
	QueryService_GetUnfulfilledReputerNonces_FullMethodName                 = "/emissions.v4.QueryService/GetUnfulfilledReputerNonces"
	QueryService_GetInfererNetworkRegret_FullMethodName                     = "/emissions.v4.QueryService/GetInfererNetworkRegret"
	QueryService_GetForecasterNetworkRegret_FullMethodName                  = "/emissions.v4.QueryService/GetForecasterNetworkRegret"
	QueryService_GetOneInForecasterNetworkRegret_FullMethodName             = "/emissions.v4.QueryService/GetOneInForecasterNetworkRegret"
	QueryService_IsWhitelistAdmin_FullMethodName                            = "/emissions.v4.QueryService/IsWhitelistAdmin"
	QueryService_GetTopicLastWorkerCommitInfo_FullMethodName                = "/emissions.v4.QueryService/GetTopicLastWorkerCommitInfo"
	QueryService_GetTopicLastReputerCommitInfo_FullMethodName               = "/emissions.v4.QueryService/GetTopicLastReputerCommitInfo"
	QueryService_GetTopicRewardNonce_FullMethodName                         = "/emissions.v4.QueryService/GetTopicRewardNonce"
	QueryService_GetReputerLossBundlesAtBlock_FullMethodName                = "/emissions.v4.QueryService/GetReputerLossBundlesAtBlock"
	QueryService_GetStakeReputerAuthority_FullMethodName                    = "/emissions.v4.QueryService/GetStakeReputerAuthority"
	QueryService_GetDelegateStakePlacement_FullMethodName                   = "/emissions.v4.QueryService/GetDelegateStakePlacement"
	QueryService_GetDelegateStakeUponReputer_FullMethodName                 = "/emissions.v4.QueryService/GetDelegateStakeUponReputer"
	QueryService_GetDelegateRewardPerShare_FullMethodName                   = "/emissions.v4.QueryService/GetDelegateRewardPerShare"
	QueryService_GetStakeRemovalForReputerAndTopicId_FullMethodName         = "/emissions.v4.QueryService/GetStakeRemovalForReputerAndTopicId"
	QueryService_GetDelegateStakeRemoval_FullMethodName                     = "/emissions.v4.QueryService/GetDelegateStakeRemoval"
	QueryService_GetPreviousTopicWeight_FullMethodName                      = "/emissions.v4.QueryService/GetPreviousTopicWeight"
	QueryService_TopicExists_FullMethodName                                 = "/emissions.v4.QueryService/TopicExists"
	QueryService_IsTopicActive_FullMethodName                               = "/emissions.v4.QueryService/IsTopicActive"
	QueryService_GetTopicFeeRevenue_FullMethodName                          = "/emissions.v4.QueryService/GetTopicFeeRevenue"
	QueryService_GetInfererScoreEma_FullMethodName                          = "/emissions.v4.QueryService/GetInfererScoreEma"
	QueryService_GetForecasterScoreEma_FullMethodName                       = "/emissions.v4.QueryService/GetForecasterScoreEma"
	QueryService_GetReputerScoreEma_FullMethodName                          = "/emissions.v4.QueryService/GetReputerScoreEma"
	QueryService_GetInferenceScoresUntilBlock_FullMethodName                = "/emissions.v4.QueryService/GetInferenceScoresUntilBlock"
	QueryService_GetPreviousTopicQuantileForecasterScoreEma_FullMethodName  = "/emissions.v4.QueryService/GetPreviousTopicQuantileForecasterScoreEma"
	QueryService_GetPreviousTopicQuantileInfererScoreEma_FullMethodName     = "/emissions.v4.QueryService/GetPreviousTopicQuantileInfererScoreEma"
	QueryService_GetPreviousTopicQuantileReputerScoreEma_FullMethodName     = "/emissions.v4.QueryService/GetPreviousTopicQuantileReputerScoreEma"
	QueryService_GetWorkerInferenceScoresAtBlock_FullMethodName             = "/emissions.v4.QueryService/GetWorkerInferenceScoresAtBlock"
	QueryService_GetCurrentLowestInfererScore_FullMethodName                = "/emissions.v4.QueryService/GetCurrentLowestInfererScore"
	QueryService_GetForecastScoresUntilBlock_FullMethodName                 = "/emissions.v4.QueryService/GetForecastScoresUntilBlock"
	QueryService_GetWorkerForecastScoresAtBlock_FullMethodName              = "/emissions.v4.QueryService/GetWorkerForecastScoresAtBlock"
	QueryService_GetCurrentLowestForecasterScore_FullMethodName             = "/emissions.v4.QueryService/GetCurrentLowestForecasterScore"
	QueryService_GetReputersScoresAtBlock_FullMethodName                    = "/emissions.v4.QueryService/GetReputersScoresAtBlock"
	QueryService_GetCurrentLowestReputerScore_FullMethodName                = "/emissions.v4.QueryService/GetCurrentLowestReputerScore"
	QueryService_GetListeningCoefficient_FullMethodName                     = "/emissions.v4.QueryService/GetListeningCoefficient"
	QueryService_GetPreviousReputerRewardFraction_FullMethodName            = "/emissions.v4.QueryService/GetPreviousReputerRewardFraction"
	QueryService_GetPreviousInferenceRewardFraction_FullMethodName          = "/emissions.v4.QueryService/GetPreviousInferenceRewardFraction"
	QueryService_GetPreviousForecastRewardFraction_FullMethodName           = "/emissions.v4.QueryService/GetPreviousForecastRewardFraction"
	QueryService_GetPreviousPercentageRewardToStakedReputers_FullMethodName = "/emissions.v4.QueryService/GetPreviousPercentageRewardToStakedReputers"
	QueryService_GetTotalRewardToDistribute_FullMethodName                  = "/emissions.v4.QueryService/GetTotalRewardToDistribute"
	QueryService_GetNaiveInfererNetworkRegret_FullMethodName                = "/emissions.v4.QueryService/GetNaiveInfererNetworkRegret"
	QueryService_GetOneOutInfererInfererNetworkRegret_FullMethodName        = "/emissions.v4.QueryService/GetOneOutInfererInfererNetworkRegret"
	QueryService_GetOneOutInfererForecasterNetworkRegret_FullMethodName     = "/emissions.v4.QueryService/GetOneOutInfererForecasterNetworkRegret"
	QueryService_GetOneOutForecasterInfererNetworkRegret_FullMethodName     = "/emissions.v4.QueryService/GetOneOutForecasterInfererNetworkRegret"
	QueryService_GetOneOutForecasterForecasterNetworkRegret_FullMethodName  = "/emissions.v4.QueryService/GetOneOutForecasterForecasterNetworkRegret"
	QueryService_GetActiveTopicsAtBlock_FullMethodName                      = "/emissions.v4.QueryService/GetActiveTopicsAtBlock"
	QueryService_GetNextChurningBlockByTopicId_FullMethodName               = "/emissions.v4.QueryService/GetNextChurningBlockByTopicId"
	QueryService_GetActiveReputersForTopic_FullMethodName                   = "/emissions.v4.QueryService/GetActiveReputersForTopic"
	QueryService_GetActiveForecastersForTopic_FullMethodName                = "/emissions.v4.QueryService/GetActiveForecastersForTopic"
	QueryService_GetActiveInferersForTopic_FullMethodName                   = "/emissions.v4.QueryService/GetActiveInferersForTopic"
)

// QueryServiceClient is the client API for QueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryServiceClient interface {
	// Params returns the module parameters.
	GetParams(ctx context.Context, in *GetParamsRequest, opts ...grpc.CallOption) (*GetParamsResponse, error)
	GetNextTopicId(ctx context.Context, in *GetNextTopicIdRequest, opts ...grpc.CallOption) (*GetNextTopicIdResponse, error)
	GetTopic(ctx context.Context, in *GetTopicRequest, opts ...grpc.CallOption) (*GetTopicResponse, error)
	GetWorkerLatestInferenceByTopicId(ctx context.Context, in *GetWorkerLatestInferenceByTopicIdRequest, opts ...grpc.CallOption) (*GetWorkerLatestInferenceByTopicIdResponse, error)
	GetInferencesAtBlock(ctx context.Context, in *GetInferencesAtBlockRequest, opts ...grpc.CallOption) (*GetInferencesAtBlockResponse, error)
	GetLatestTopicInferences(ctx context.Context, in *GetLatestTopicInferencesRequest, opts ...grpc.CallOption) (*GetLatestTopicInferencesResponse, error)
	GetForecastsAtBlock(ctx context.Context, in *GetForecastsAtBlockRequest, opts ...grpc.CallOption) (*GetForecastsAtBlockResponse, error)
	GetNetworkLossBundleAtBlock(ctx context.Context, in *GetNetworkLossBundleAtBlockRequest, opts ...grpc.CallOption) (*GetNetworkLossBundleAtBlockResponse, error)
	GetTotalStake(ctx context.Context, in *GetTotalStakeRequest, opts ...grpc.CallOption) (*GetTotalStakeResponse, error)
	GetReputerStakeInTopic(ctx context.Context, in *GetReputerStakeInTopicRequest, opts ...grpc.CallOption) (*GetReputerStakeInTopicResponse, error)
	GetMultiReputerStakeInTopic(ctx context.Context, in *GetMultiReputerStakeInTopicRequest, opts ...grpc.CallOption) (*GetMultiReputerStakeInTopicResponse, error)
	GetStakeFromReputerInTopicInSelf(ctx context.Context, in *GetStakeFromReputerInTopicInSelfRequest, opts ...grpc.CallOption) (*GetStakeFromReputerInTopicInSelfResponse, error)
	GetDelegateStakeInTopicInReputer(ctx context.Context, in *GetDelegateStakeInTopicInReputerRequest, opts ...grpc.CallOption) (*GetDelegateStakeInTopicInReputerResponse, error)
	GetStakeFromDelegatorInTopicInReputer(ctx context.Context, in *GetStakeFromDelegatorInTopicInReputerRequest, opts ...grpc.CallOption) (*GetStakeFromDelegatorInTopicInReputerResponse, error)
	GetStakeFromDelegatorInTopic(ctx context.Context, in *GetStakeFromDelegatorInTopicRequest, opts ...grpc.CallOption) (*GetStakeFromDelegatorInTopicResponse, error)
	GetTopicStake(ctx context.Context, in *GetTopicStakeRequest, opts ...grpc.CallOption) (*GetTopicStakeResponse, error)
	GetStakeRemovalsUpUntilBlock(ctx context.Context, in *GetStakeRemovalsUpUntilBlockRequest, opts ...grpc.CallOption) (*GetStakeRemovalsUpUntilBlockResponse, error)
	GetDelegateStakeRemovalsUpUntilBlock(ctx context.Context, in *GetDelegateStakeRemovalsUpUntilBlockRequest, opts ...grpc.CallOption) (*GetDelegateStakeRemovalsUpUntilBlockResponse, error)
	GetStakeRemovalInfo(ctx context.Context, in *GetStakeRemovalInfoRequest, opts ...grpc.CallOption) (*GetStakeRemovalInfoResponse, error)
	GetDelegateStakeRemovalInfo(ctx context.Context, in *GetDelegateStakeRemovalInfoRequest, opts ...grpc.CallOption) (*GetDelegateStakeRemovalInfoResponse, error)
	GetWorkerNodeInfo(ctx context.Context, in *GetWorkerNodeInfoRequest, opts ...grpc.CallOption) (*GetWorkerNodeInfoResponse, error)
	GetReputerNodeInfo(ctx context.Context, in *GetReputerNodeInfoRequest, opts ...grpc.CallOption) (*GetReputerNodeInfoResponse, error)
	IsWorkerRegisteredInTopicId(ctx context.Context, in *IsWorkerRegisteredInTopicIdRequest, opts ...grpc.CallOption) (*IsWorkerRegisteredInTopicIdResponse, error)
	IsReputerRegisteredInTopicId(ctx context.Context, in *IsReputerRegisteredInTopicIdRequest, opts ...grpc.CallOption) (*IsReputerRegisteredInTopicIdResponse, error)
	GetNetworkInferencesAtBlock(ctx context.Context, in *GetNetworkInferencesAtBlockRequest, opts ...grpc.CallOption) (*GetNetworkInferencesAtBlockResponse, error)
	GetLatestNetworkInferences(ctx context.Context, in *GetLatestNetworkInferencesRequest, opts ...grpc.CallOption) (*GetLatestNetworkInferencesResponse, error)
	GetLatestAvailableNetworkInferences(ctx context.Context, in *GetLatestAvailableNetworkInferencesRequest, opts ...grpc.CallOption) (*GetLatestAvailableNetworkInferencesResponse, error)
	IsWorkerNonceUnfulfilled(ctx context.Context, in *IsWorkerNonceUnfulfilledRequest, opts ...grpc.CallOption) (*IsWorkerNonceUnfulfilledResponse, error)
	IsReputerNonceUnfulfilled(ctx context.Context, in *IsReputerNonceUnfulfilledRequest, opts ...grpc.CallOption) (*IsReputerNonceUnfulfilledResponse, error)
	GetUnfulfilledWorkerNonces(ctx context.Context, in *GetUnfulfilledWorkerNoncesRequest, opts ...grpc.CallOption) (*GetUnfulfilledWorkerNoncesResponse, error)
	GetUnfulfilledReputerNonces(ctx context.Context, in *GetUnfulfilledReputerNoncesRequest, opts ...grpc.CallOption) (*GetUnfulfilledReputerNoncesResponse, error)
	GetInfererNetworkRegret(ctx context.Context, in *GetInfererNetworkRegretRequest, opts ...grpc.CallOption) (*GetInfererNetworkRegretResponse, error)
	GetForecasterNetworkRegret(ctx context.Context, in *GetForecasterNetworkRegretRequest, opts ...grpc.CallOption) (*GetForecasterNetworkRegretResponse, error)
	GetOneInForecasterNetworkRegret(ctx context.Context, in *GetOneInForecasterNetworkRegretRequest, opts ...grpc.CallOption) (*GetOneInForecasterNetworkRegretResponse, error)
	IsWhitelistAdmin(ctx context.Context, in *IsWhitelistAdminRequest, opts ...grpc.CallOption) (*IsWhitelistAdminResponse, error)
	GetTopicLastWorkerCommitInfo(ctx context.Context, in *GetTopicLastWorkerCommitInfoRequest, opts ...grpc.CallOption) (*GetTopicLastWorkerCommitInfoResponse, error)
	GetTopicLastReputerCommitInfo(ctx context.Context, in *GetTopicLastReputerCommitInfoRequest, opts ...grpc.CallOption) (*GetTopicLastReputerCommitInfoResponse, error)
	GetTopicRewardNonce(ctx context.Context, in *GetTopicRewardNonceRequest, opts ...grpc.CallOption) (*GetTopicRewardNonceResponse, error)
	GetReputerLossBundlesAtBlock(ctx context.Context, in *GetReputerLossBundlesAtBlockRequest, opts ...grpc.CallOption) (*GetReputerLossBundlesAtBlockResponse, error)
	GetStakeReputerAuthority(ctx context.Context, in *GetStakeReputerAuthorityRequest, opts ...grpc.CallOption) (*GetStakeReputerAuthorityResponse, error)
	GetDelegateStakePlacement(ctx context.Context, in *GetDelegateStakePlacementRequest, opts ...grpc.CallOption) (*GetDelegateStakePlacementResponse, error)
	GetDelegateStakeUponReputer(ctx context.Context, in *GetDelegateStakeUponReputerRequest, opts ...grpc.CallOption) (*GetDelegateStakeUponReputerResponse, error)
	GetDelegateRewardPerShare(ctx context.Context, in *GetDelegateRewardPerShareRequest, opts ...grpc.CallOption) (*GetDelegateRewardPerShareResponse, error)
	GetStakeRemovalForReputerAndTopicId(ctx context.Context, in *GetStakeRemovalForReputerAndTopicIdRequest, opts ...grpc.CallOption) (*GetStakeRemovalForReputerAndTopicIdResponse, error)
	GetDelegateStakeRemoval(ctx context.Context, in *GetDelegateStakeRemovalRequest, opts ...grpc.CallOption) (*GetDelegateStakeRemovalResponse, error)
	GetPreviousTopicWeight(ctx context.Context, in *GetPreviousTopicWeightRequest, opts ...grpc.CallOption) (*GetPreviousTopicWeightResponse, error)
	TopicExists(ctx context.Context, in *TopicExistsRequest, opts ...grpc.CallOption) (*TopicExistsResponse, error)
	IsTopicActive(ctx context.Context, in *IsTopicActiveRequest, opts ...grpc.CallOption) (*IsTopicActiveResponse, error)
	GetTopicFeeRevenue(ctx context.Context, in *GetTopicFeeRevenueRequest, opts ...grpc.CallOption) (*GetTopicFeeRevenueResponse, error)
	GetInfererScoreEma(ctx context.Context, in *GetInfererScoreEmaRequest, opts ...grpc.CallOption) (*GetInfererScoreEmaResponse, error)
	GetForecasterScoreEma(ctx context.Context, in *GetForecasterScoreEmaRequest, opts ...grpc.CallOption) (*GetForecasterScoreEmaResponse, error)
	GetReputerScoreEma(ctx context.Context, in *GetReputerScoreEmaRequest, opts ...grpc.CallOption) (*GetReputerScoreEmaResponse, error)
	GetInferenceScoresUntilBlock(ctx context.Context, in *GetInferenceScoresUntilBlockRequest, opts ...grpc.CallOption) (*GetInferenceScoresUntilBlockResponse, error)
	GetPreviousTopicQuantileForecasterScoreEma(ctx context.Context, in *GetPreviousTopicQuantileForecasterScoreEmaRequest, opts ...grpc.CallOption) (*GetPreviousTopicQuantileForecasterScoreEmaResponse, error)
	GetPreviousTopicQuantileInfererScoreEma(ctx context.Context, in *GetPreviousTopicQuantileInfererScoreEmaRequest, opts ...grpc.CallOption) (*GetPreviousTopicQuantileInfererScoreEmaResponse, error)
	GetPreviousTopicQuantileReputerScoreEma(ctx context.Context, in *GetPreviousTopicQuantileReputerScoreEmaRequest, opts ...grpc.CallOption) (*GetPreviousTopicQuantileReputerScoreEmaResponse, error)
	GetWorkerInferenceScoresAtBlock(ctx context.Context, in *GetWorkerInferenceScoresAtBlockRequest, opts ...grpc.CallOption) (*GetWorkerInferenceScoresAtBlockResponse, error)
	GetCurrentLowestInfererScore(ctx context.Context, in *GetCurrentLowestInfererScoreRequest, opts ...grpc.CallOption) (*GetCurrentLowestInfererScoreResponse, error)
	GetForecastScoresUntilBlock(ctx context.Context, in *GetForecastScoresUntilBlockRequest, opts ...grpc.CallOption) (*GetForecastScoresUntilBlockResponse, error)
	GetWorkerForecastScoresAtBlock(ctx context.Context, in *GetWorkerForecastScoresAtBlockRequest, opts ...grpc.CallOption) (*GetWorkerForecastScoresAtBlockResponse, error)
	GetCurrentLowestForecasterScore(ctx context.Context, in *GetCurrentLowestForecasterScoreRequest, opts ...grpc.CallOption) (*GetCurrentLowestForecasterScoreResponse, error)
	GetReputersScoresAtBlock(ctx context.Context, in *GetReputersScoresAtBlockRequest, opts ...grpc.CallOption) (*GetReputersScoresAtBlockResponse, error)
	GetCurrentLowestReputerScore(ctx context.Context, in *GetCurrentLowestReputerScoreRequest, opts ...grpc.CallOption) (*GetCurrentLowestReputerScoreResponse, error)
	GetListeningCoefficient(ctx context.Context, in *GetListeningCoefficientRequest, opts ...grpc.CallOption) (*GetListeningCoefficientResponse, error)
	GetPreviousReputerRewardFraction(ctx context.Context, in *GetPreviousReputerRewardFractionRequest, opts ...grpc.CallOption) (*GetPreviousReputerRewardFractionResponse, error)
	GetPreviousInferenceRewardFraction(ctx context.Context, in *GetPreviousInferenceRewardFractionRequest, opts ...grpc.CallOption) (*GetPreviousInferenceRewardFractionResponse, error)
	GetPreviousForecastRewardFraction(ctx context.Context, in *GetPreviousForecastRewardFractionRequest, opts ...grpc.CallOption) (*GetPreviousForecastRewardFractionResponse, error)
	GetPreviousPercentageRewardToStakedReputers(ctx context.Context, in *GetPreviousPercentageRewardToStakedReputersRequest, opts ...grpc.CallOption) (*GetPreviousPercentageRewardToStakedReputersResponse, error)
	GetTotalRewardToDistribute(ctx context.Context, in *GetTotalRewardToDistributeRequest, opts ...grpc.CallOption) (*GetTotalRewardToDistributeResponse, error)
	GetNaiveInfererNetworkRegret(ctx context.Context, in *GetNaiveInfererNetworkRegretRequest, opts ...grpc.CallOption) (*GetNaiveInfererNetworkRegretResponse, error)
	GetOneOutInfererInfererNetworkRegret(ctx context.Context, in *GetOneOutInfererInfererNetworkRegretRequest, opts ...grpc.CallOption) (*GetOneOutInfererInfererNetworkRegretResponse, error)
	GetOneOutInfererForecasterNetworkRegret(ctx context.Context, in *GetOneOutInfererForecasterNetworkRegretRequest, opts ...grpc.CallOption) (*GetOneOutInfererForecasterNetworkRegretResponse, error)
	GetOneOutForecasterInfererNetworkRegret(ctx context.Context, in *GetOneOutForecasterInfererNetworkRegretRequest, opts ...grpc.CallOption) (*GetOneOutForecasterInfererNetworkRegretResponse, error)
	GetOneOutForecasterForecasterNetworkRegret(ctx context.Context, in *GetOneOutForecasterForecasterNetworkRegretRequest, opts ...grpc.CallOption) (*GetOneOutForecasterForecasterNetworkRegretResponse, error)
	GetActiveTopicsAtBlock(ctx context.Context, in *GetActiveTopicsAtBlockRequest, opts ...grpc.CallOption) (*GetActiveTopicsAtBlockResponse, error)
	GetNextChurningBlockByTopicId(ctx context.Context, in *GetNextChurningBlockByTopicIdRequest, opts ...grpc.CallOption) (*GetNextChurningBlockByTopicIdResponse, error)
	GetActiveReputersForTopic(ctx context.Context, in *GetActiveReputersForTopicRequest, opts ...grpc.CallOption) (*GetActiveReputersForTopicResponse, error)
	GetActiveForecastersForTopic(ctx context.Context, in *GetActiveForecastersForTopicRequest, opts ...grpc.CallOption) (*GetActiveForecastersForTopicResponse, error)
	GetActiveInferersForTopic(ctx context.Context, in *GetActiveInferersForTopicRequest, opts ...grpc.CallOption) (*GetActiveInferersForTopicResponse, error)
}

type queryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryServiceClient(cc grpc.ClientConnInterface) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) GetParams(ctx context.Context, in *GetParamsRequest, opts ...grpc.CallOption) (*GetParamsResponse, error) {
	out := new(GetParamsResponse)
	err := c.cc.Invoke(ctx, QueryService_GetParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetNextTopicId(ctx context.Context, in *GetNextTopicIdRequest, opts ...grpc.CallOption) (*GetNextTopicIdResponse, error) {
	out := new(GetNextTopicIdResponse)
	err := c.cc.Invoke(ctx, QueryService_GetNextTopicId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetTopic(ctx context.Context, in *GetTopicRequest, opts ...grpc.CallOption) (*GetTopicResponse, error) {
	out := new(GetTopicResponse)
	err := c.cc.Invoke(ctx, QueryService_GetTopic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetWorkerLatestInferenceByTopicId(ctx context.Context, in *GetWorkerLatestInferenceByTopicIdRequest, opts ...grpc.CallOption) (*GetWorkerLatestInferenceByTopicIdResponse, error) {
	out := new(GetWorkerLatestInferenceByTopicIdResponse)
	err := c.cc.Invoke(ctx, QueryService_GetWorkerLatestInferenceByTopicId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetInferencesAtBlock(ctx context.Context, in *GetInferencesAtBlockRequest, opts ...grpc.CallOption) (*GetInferencesAtBlockResponse, error) {
	out := new(GetInferencesAtBlockResponse)
	err := c.cc.Invoke(ctx, QueryService_GetInferencesAtBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetLatestTopicInferences(ctx context.Context, in *GetLatestTopicInferencesRequest, opts ...grpc.CallOption) (*GetLatestTopicInferencesResponse, error) {
	out := new(GetLatestTopicInferencesResponse)
	err := c.cc.Invoke(ctx, QueryService_GetLatestTopicInferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetForecastsAtBlock(ctx context.Context, in *GetForecastsAtBlockRequest, opts ...grpc.CallOption) (*GetForecastsAtBlockResponse, error) {
	out := new(GetForecastsAtBlockResponse)
	err := c.cc.Invoke(ctx, QueryService_GetForecastsAtBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetNetworkLossBundleAtBlock(ctx context.Context, in *GetNetworkLossBundleAtBlockRequest, opts ...grpc.CallOption) (*GetNetworkLossBundleAtBlockResponse, error) {
	out := new(GetNetworkLossBundleAtBlockResponse)
	err := c.cc.Invoke(ctx, QueryService_GetNetworkLossBundleAtBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetTotalStake(ctx context.Context, in *GetTotalStakeRequest, opts ...grpc.CallOption) (*GetTotalStakeResponse, error) {
	out := new(GetTotalStakeResponse)
	err := c.cc.Invoke(ctx, QueryService_GetTotalStake_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetReputerStakeInTopic(ctx context.Context, in *GetReputerStakeInTopicRequest, opts ...grpc.CallOption) (*GetReputerStakeInTopicResponse, error) {
	out := new(GetReputerStakeInTopicResponse)
	err := c.cc.Invoke(ctx, QueryService_GetReputerStakeInTopic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetMultiReputerStakeInTopic(ctx context.Context, in *GetMultiReputerStakeInTopicRequest, opts ...grpc.CallOption) (*GetMultiReputerStakeInTopicResponse, error) {
	out := new(GetMultiReputerStakeInTopicResponse)
	err := c.cc.Invoke(ctx, QueryService_GetMultiReputerStakeInTopic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetStakeFromReputerInTopicInSelf(ctx context.Context, in *GetStakeFromReputerInTopicInSelfRequest, opts ...grpc.CallOption) (*GetStakeFromReputerInTopicInSelfResponse, error) {
	out := new(GetStakeFromReputerInTopicInSelfResponse)
	err := c.cc.Invoke(ctx, QueryService_GetStakeFromReputerInTopicInSelf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetDelegateStakeInTopicInReputer(ctx context.Context, in *GetDelegateStakeInTopicInReputerRequest, opts ...grpc.CallOption) (*GetDelegateStakeInTopicInReputerResponse, error) {
	out := new(GetDelegateStakeInTopicInReputerResponse)
	err := c.cc.Invoke(ctx, QueryService_GetDelegateStakeInTopicInReputer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetStakeFromDelegatorInTopicInReputer(ctx context.Context, in *GetStakeFromDelegatorInTopicInReputerRequest, opts ...grpc.CallOption) (*GetStakeFromDelegatorInTopicInReputerResponse, error) {
	out := new(GetStakeFromDelegatorInTopicInReputerResponse)
	err := c.cc.Invoke(ctx, QueryService_GetStakeFromDelegatorInTopicInReputer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetStakeFromDelegatorInTopic(ctx context.Context, in *GetStakeFromDelegatorInTopicRequest, opts ...grpc.CallOption) (*GetStakeFromDelegatorInTopicResponse, error) {
	out := new(GetStakeFromDelegatorInTopicResponse)
	err := c.cc.Invoke(ctx, QueryService_GetStakeFromDelegatorInTopic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetTopicStake(ctx context.Context, in *GetTopicStakeRequest, opts ...grpc.CallOption) (*GetTopicStakeResponse, error) {
	out := new(GetTopicStakeResponse)
	err := c.cc.Invoke(ctx, QueryService_GetTopicStake_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetStakeRemovalsUpUntilBlock(ctx context.Context, in *GetStakeRemovalsUpUntilBlockRequest, opts ...grpc.CallOption) (*GetStakeRemovalsUpUntilBlockResponse, error) {
	out := new(GetStakeRemovalsUpUntilBlockResponse)
	err := c.cc.Invoke(ctx, QueryService_GetStakeRemovalsUpUntilBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetDelegateStakeRemovalsUpUntilBlock(ctx context.Context, in *GetDelegateStakeRemovalsUpUntilBlockRequest, opts ...grpc.CallOption) (*GetDelegateStakeRemovalsUpUntilBlockResponse, error) {
	out := new(GetDelegateStakeRemovalsUpUntilBlockResponse)
	err := c.cc.Invoke(ctx, QueryService_GetDelegateStakeRemovalsUpUntilBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetStakeRemovalInfo(ctx context.Context, in *GetStakeRemovalInfoRequest, opts ...grpc.CallOption) (*GetStakeRemovalInfoResponse, error) {
	out := new(GetStakeRemovalInfoResponse)
	err := c.cc.Invoke(ctx, QueryService_GetStakeRemovalInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetDelegateStakeRemovalInfo(ctx context.Context, in *GetDelegateStakeRemovalInfoRequest, opts ...grpc.CallOption) (*GetDelegateStakeRemovalInfoResponse, error) {
	out := new(GetDelegateStakeRemovalInfoResponse)
	err := c.cc.Invoke(ctx, QueryService_GetDelegateStakeRemovalInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetWorkerNodeInfo(ctx context.Context, in *GetWorkerNodeInfoRequest, opts ...grpc.CallOption) (*GetWorkerNodeInfoResponse, error) {
	out := new(GetWorkerNodeInfoResponse)
	err := c.cc.Invoke(ctx, QueryService_GetWorkerNodeInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetReputerNodeInfo(ctx context.Context, in *GetReputerNodeInfoRequest, opts ...grpc.CallOption) (*GetReputerNodeInfoResponse, error) {
	out := new(GetReputerNodeInfoResponse)
	err := c.cc.Invoke(ctx, QueryService_GetReputerNodeInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) IsWorkerRegisteredInTopicId(ctx context.Context, in *IsWorkerRegisteredInTopicIdRequest, opts ...grpc.CallOption) (*IsWorkerRegisteredInTopicIdResponse, error) {
	out := new(IsWorkerRegisteredInTopicIdResponse)
	err := c.cc.Invoke(ctx, QueryService_IsWorkerRegisteredInTopicId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) IsReputerRegisteredInTopicId(ctx context.Context, in *IsReputerRegisteredInTopicIdRequest, opts ...grpc.CallOption) (*IsReputerRegisteredInTopicIdResponse, error) {
	out := new(IsReputerRegisteredInTopicIdResponse)
	err := c.cc.Invoke(ctx, QueryService_IsReputerRegisteredInTopicId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetNetworkInferencesAtBlock(ctx context.Context, in *GetNetworkInferencesAtBlockRequest, opts ...grpc.CallOption) (*GetNetworkInferencesAtBlockResponse, error) {
	out := new(GetNetworkInferencesAtBlockResponse)
	err := c.cc.Invoke(ctx, QueryService_GetNetworkInferencesAtBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetLatestNetworkInferences(ctx context.Context, in *GetLatestNetworkInferencesRequest, opts ...grpc.CallOption) (*GetLatestNetworkInferencesResponse, error) {
	out := new(GetLatestNetworkInferencesResponse)
	err := c.cc.Invoke(ctx, QueryService_GetLatestNetworkInferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetLatestAvailableNetworkInferences(ctx context.Context, in *GetLatestAvailableNetworkInferencesRequest, opts ...grpc.CallOption) (*GetLatestAvailableNetworkInferencesResponse, error) {
	out := new(GetLatestAvailableNetworkInferencesResponse)
	err := c.cc.Invoke(ctx, QueryService_GetLatestAvailableNetworkInferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) IsWorkerNonceUnfulfilled(ctx context.Context, in *IsWorkerNonceUnfulfilledRequest, opts ...grpc.CallOption) (*IsWorkerNonceUnfulfilledResponse, error) {
	out := new(IsWorkerNonceUnfulfilledResponse)
	err := c.cc.Invoke(ctx, QueryService_IsWorkerNonceUnfulfilled_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) IsReputerNonceUnfulfilled(ctx context.Context, in *IsReputerNonceUnfulfilledRequest, opts ...grpc.CallOption) (*IsReputerNonceUnfulfilledResponse, error) {
	out := new(IsReputerNonceUnfulfilledResponse)
	err := c.cc.Invoke(ctx, QueryService_IsReputerNonceUnfulfilled_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetUnfulfilledWorkerNonces(ctx context.Context, in *GetUnfulfilledWorkerNoncesRequest, opts ...grpc.CallOption) (*GetUnfulfilledWorkerNoncesResponse, error) {
	out := new(GetUnfulfilledWorkerNoncesResponse)
	err := c.cc.Invoke(ctx, QueryService_GetUnfulfilledWorkerNonces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetUnfulfilledReputerNonces(ctx context.Context, in *GetUnfulfilledReputerNoncesRequest, opts ...grpc.CallOption) (*GetUnfulfilledReputerNoncesResponse, error) {
	out := new(GetUnfulfilledReputerNoncesResponse)
	err := c.cc.Invoke(ctx, QueryService_GetUnfulfilledReputerNonces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetInfererNetworkRegret(ctx context.Context, in *GetInfererNetworkRegretRequest, opts ...grpc.CallOption) (*GetInfererNetworkRegretResponse, error) {
	out := new(GetInfererNetworkRegretResponse)
	err := c.cc.Invoke(ctx, QueryService_GetInfererNetworkRegret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetForecasterNetworkRegret(ctx context.Context, in *GetForecasterNetworkRegretRequest, opts ...grpc.CallOption) (*GetForecasterNetworkRegretResponse, error) {
	out := new(GetForecasterNetworkRegretResponse)
	err := c.cc.Invoke(ctx, QueryService_GetForecasterNetworkRegret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetOneInForecasterNetworkRegret(ctx context.Context, in *GetOneInForecasterNetworkRegretRequest, opts ...grpc.CallOption) (*GetOneInForecasterNetworkRegretResponse, error) {
	out := new(GetOneInForecasterNetworkRegretResponse)
	err := c.cc.Invoke(ctx, QueryService_GetOneInForecasterNetworkRegret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) IsWhitelistAdmin(ctx context.Context, in *IsWhitelistAdminRequest, opts ...grpc.CallOption) (*IsWhitelistAdminResponse, error) {
	out := new(IsWhitelistAdminResponse)
	err := c.cc.Invoke(ctx, QueryService_IsWhitelistAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetTopicLastWorkerCommitInfo(ctx context.Context, in *GetTopicLastWorkerCommitInfoRequest, opts ...grpc.CallOption) (*GetTopicLastWorkerCommitInfoResponse, error) {
	out := new(GetTopicLastWorkerCommitInfoResponse)
	err := c.cc.Invoke(ctx, QueryService_GetTopicLastWorkerCommitInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetTopicLastReputerCommitInfo(ctx context.Context, in *GetTopicLastReputerCommitInfoRequest, opts ...grpc.CallOption) (*GetTopicLastReputerCommitInfoResponse, error) {
	out := new(GetTopicLastReputerCommitInfoResponse)
	err := c.cc.Invoke(ctx, QueryService_GetTopicLastReputerCommitInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetTopicRewardNonce(ctx context.Context, in *GetTopicRewardNonceRequest, opts ...grpc.CallOption) (*GetTopicRewardNonceResponse, error) {
	out := new(GetTopicRewardNonceResponse)
	err := c.cc.Invoke(ctx, QueryService_GetTopicRewardNonce_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetReputerLossBundlesAtBlock(ctx context.Context, in *GetReputerLossBundlesAtBlockRequest, opts ...grpc.CallOption) (*GetReputerLossBundlesAtBlockResponse, error) {
	out := new(GetReputerLossBundlesAtBlockResponse)
	err := c.cc.Invoke(ctx, QueryService_GetReputerLossBundlesAtBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetStakeReputerAuthority(ctx context.Context, in *GetStakeReputerAuthorityRequest, opts ...grpc.CallOption) (*GetStakeReputerAuthorityResponse, error) {
	out := new(GetStakeReputerAuthorityResponse)
	err := c.cc.Invoke(ctx, QueryService_GetStakeReputerAuthority_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetDelegateStakePlacement(ctx context.Context, in *GetDelegateStakePlacementRequest, opts ...grpc.CallOption) (*GetDelegateStakePlacementResponse, error) {
	out := new(GetDelegateStakePlacementResponse)
	err := c.cc.Invoke(ctx, QueryService_GetDelegateStakePlacement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetDelegateStakeUponReputer(ctx context.Context, in *GetDelegateStakeUponReputerRequest, opts ...grpc.CallOption) (*GetDelegateStakeUponReputerResponse, error) {
	out := new(GetDelegateStakeUponReputerResponse)
	err := c.cc.Invoke(ctx, QueryService_GetDelegateStakeUponReputer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetDelegateRewardPerShare(ctx context.Context, in *GetDelegateRewardPerShareRequest, opts ...grpc.CallOption) (*GetDelegateRewardPerShareResponse, error) {
	out := new(GetDelegateRewardPerShareResponse)
	err := c.cc.Invoke(ctx, QueryService_GetDelegateRewardPerShare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetStakeRemovalForReputerAndTopicId(ctx context.Context, in *GetStakeRemovalForReputerAndTopicIdRequest, opts ...grpc.CallOption) (*GetStakeRemovalForReputerAndTopicIdResponse, error) {
	out := new(GetStakeRemovalForReputerAndTopicIdResponse)
	err := c.cc.Invoke(ctx, QueryService_GetStakeRemovalForReputerAndTopicId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetDelegateStakeRemoval(ctx context.Context, in *GetDelegateStakeRemovalRequest, opts ...grpc.CallOption) (*GetDelegateStakeRemovalResponse, error) {
	out := new(GetDelegateStakeRemovalResponse)
	err := c.cc.Invoke(ctx, QueryService_GetDelegateStakeRemoval_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetPreviousTopicWeight(ctx context.Context, in *GetPreviousTopicWeightRequest, opts ...grpc.CallOption) (*GetPreviousTopicWeightResponse, error) {
	out := new(GetPreviousTopicWeightResponse)
	err := c.cc.Invoke(ctx, QueryService_GetPreviousTopicWeight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) TopicExists(ctx context.Context, in *TopicExistsRequest, opts ...grpc.CallOption) (*TopicExistsResponse, error) {
	out := new(TopicExistsResponse)
	err := c.cc.Invoke(ctx, QueryService_TopicExists_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) IsTopicActive(ctx context.Context, in *IsTopicActiveRequest, opts ...grpc.CallOption) (*IsTopicActiveResponse, error) {
	out := new(IsTopicActiveResponse)
	err := c.cc.Invoke(ctx, QueryService_IsTopicActive_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetTopicFeeRevenue(ctx context.Context, in *GetTopicFeeRevenueRequest, opts ...grpc.CallOption) (*GetTopicFeeRevenueResponse, error) {
	out := new(GetTopicFeeRevenueResponse)
	err := c.cc.Invoke(ctx, QueryService_GetTopicFeeRevenue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetInfererScoreEma(ctx context.Context, in *GetInfererScoreEmaRequest, opts ...grpc.CallOption) (*GetInfererScoreEmaResponse, error) {
	out := new(GetInfererScoreEmaResponse)
	err := c.cc.Invoke(ctx, QueryService_GetInfererScoreEma_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetForecasterScoreEma(ctx context.Context, in *GetForecasterScoreEmaRequest, opts ...grpc.CallOption) (*GetForecasterScoreEmaResponse, error) {
	out := new(GetForecasterScoreEmaResponse)
	err := c.cc.Invoke(ctx, QueryService_GetForecasterScoreEma_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetReputerScoreEma(ctx context.Context, in *GetReputerScoreEmaRequest, opts ...grpc.CallOption) (*GetReputerScoreEmaResponse, error) {
	out := new(GetReputerScoreEmaResponse)
	err := c.cc.Invoke(ctx, QueryService_GetReputerScoreEma_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetInferenceScoresUntilBlock(ctx context.Context, in *GetInferenceScoresUntilBlockRequest, opts ...grpc.CallOption) (*GetInferenceScoresUntilBlockResponse, error) {
	out := new(GetInferenceScoresUntilBlockResponse)
	err := c.cc.Invoke(ctx, QueryService_GetInferenceScoresUntilBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetPreviousTopicQuantileForecasterScoreEma(ctx context.Context, in *GetPreviousTopicQuantileForecasterScoreEmaRequest, opts ...grpc.CallOption) (*GetPreviousTopicQuantileForecasterScoreEmaResponse, error) {
	out := new(GetPreviousTopicQuantileForecasterScoreEmaResponse)
	err := c.cc.Invoke(ctx, QueryService_GetPreviousTopicQuantileForecasterScoreEma_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetPreviousTopicQuantileInfererScoreEma(ctx context.Context, in *GetPreviousTopicQuantileInfererScoreEmaRequest, opts ...grpc.CallOption) (*GetPreviousTopicQuantileInfererScoreEmaResponse, error) {
	out := new(GetPreviousTopicQuantileInfererScoreEmaResponse)
	err := c.cc.Invoke(ctx, QueryService_GetPreviousTopicQuantileInfererScoreEma_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetPreviousTopicQuantileReputerScoreEma(ctx context.Context, in *GetPreviousTopicQuantileReputerScoreEmaRequest, opts ...grpc.CallOption) (*GetPreviousTopicQuantileReputerScoreEmaResponse, error) {
	out := new(GetPreviousTopicQuantileReputerScoreEmaResponse)
	err := c.cc.Invoke(ctx, QueryService_GetPreviousTopicQuantileReputerScoreEma_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetWorkerInferenceScoresAtBlock(ctx context.Context, in *GetWorkerInferenceScoresAtBlockRequest, opts ...grpc.CallOption) (*GetWorkerInferenceScoresAtBlockResponse, error) {
	out := new(GetWorkerInferenceScoresAtBlockResponse)
	err := c.cc.Invoke(ctx, QueryService_GetWorkerInferenceScoresAtBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetCurrentLowestInfererScore(ctx context.Context, in *GetCurrentLowestInfererScoreRequest, opts ...grpc.CallOption) (*GetCurrentLowestInfererScoreResponse, error) {
	out := new(GetCurrentLowestInfererScoreResponse)
	err := c.cc.Invoke(ctx, QueryService_GetCurrentLowestInfererScore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetForecastScoresUntilBlock(ctx context.Context, in *GetForecastScoresUntilBlockRequest, opts ...grpc.CallOption) (*GetForecastScoresUntilBlockResponse, error) {
	out := new(GetForecastScoresUntilBlockResponse)
	err := c.cc.Invoke(ctx, QueryService_GetForecastScoresUntilBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetWorkerForecastScoresAtBlock(ctx context.Context, in *GetWorkerForecastScoresAtBlockRequest, opts ...grpc.CallOption) (*GetWorkerForecastScoresAtBlockResponse, error) {
	out := new(GetWorkerForecastScoresAtBlockResponse)
	err := c.cc.Invoke(ctx, QueryService_GetWorkerForecastScoresAtBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetCurrentLowestForecasterScore(ctx context.Context, in *GetCurrentLowestForecasterScoreRequest, opts ...grpc.CallOption) (*GetCurrentLowestForecasterScoreResponse, error) {
	out := new(GetCurrentLowestForecasterScoreResponse)
	err := c.cc.Invoke(ctx, QueryService_GetCurrentLowestForecasterScore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetReputersScoresAtBlock(ctx context.Context, in *GetReputersScoresAtBlockRequest, opts ...grpc.CallOption) (*GetReputersScoresAtBlockResponse, error) {
	out := new(GetReputersScoresAtBlockResponse)
	err := c.cc.Invoke(ctx, QueryService_GetReputersScoresAtBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetCurrentLowestReputerScore(ctx context.Context, in *GetCurrentLowestReputerScoreRequest, opts ...grpc.CallOption) (*GetCurrentLowestReputerScoreResponse, error) {
	out := new(GetCurrentLowestReputerScoreResponse)
	err := c.cc.Invoke(ctx, QueryService_GetCurrentLowestReputerScore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetListeningCoefficient(ctx context.Context, in *GetListeningCoefficientRequest, opts ...grpc.CallOption) (*GetListeningCoefficientResponse, error) {
	out := new(GetListeningCoefficientResponse)
	err := c.cc.Invoke(ctx, QueryService_GetListeningCoefficient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetPreviousReputerRewardFraction(ctx context.Context, in *GetPreviousReputerRewardFractionRequest, opts ...grpc.CallOption) (*GetPreviousReputerRewardFractionResponse, error) {
	out := new(GetPreviousReputerRewardFractionResponse)
	err := c.cc.Invoke(ctx, QueryService_GetPreviousReputerRewardFraction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetPreviousInferenceRewardFraction(ctx context.Context, in *GetPreviousInferenceRewardFractionRequest, opts ...grpc.CallOption) (*GetPreviousInferenceRewardFractionResponse, error) {
	out := new(GetPreviousInferenceRewardFractionResponse)
	err := c.cc.Invoke(ctx, QueryService_GetPreviousInferenceRewardFraction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetPreviousForecastRewardFraction(ctx context.Context, in *GetPreviousForecastRewardFractionRequest, opts ...grpc.CallOption) (*GetPreviousForecastRewardFractionResponse, error) {
	out := new(GetPreviousForecastRewardFractionResponse)
	err := c.cc.Invoke(ctx, QueryService_GetPreviousForecastRewardFraction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetPreviousPercentageRewardToStakedReputers(ctx context.Context, in *GetPreviousPercentageRewardToStakedReputersRequest, opts ...grpc.CallOption) (*GetPreviousPercentageRewardToStakedReputersResponse, error) {
	out := new(GetPreviousPercentageRewardToStakedReputersResponse)
	err := c.cc.Invoke(ctx, QueryService_GetPreviousPercentageRewardToStakedReputers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetTotalRewardToDistribute(ctx context.Context, in *GetTotalRewardToDistributeRequest, opts ...grpc.CallOption) (*GetTotalRewardToDistributeResponse, error) {
	out := new(GetTotalRewardToDistributeResponse)
	err := c.cc.Invoke(ctx, QueryService_GetTotalRewardToDistribute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetNaiveInfererNetworkRegret(ctx context.Context, in *GetNaiveInfererNetworkRegretRequest, opts ...grpc.CallOption) (*GetNaiveInfererNetworkRegretResponse, error) {
	out := new(GetNaiveInfererNetworkRegretResponse)
	err := c.cc.Invoke(ctx, QueryService_GetNaiveInfererNetworkRegret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetOneOutInfererInfererNetworkRegret(ctx context.Context, in *GetOneOutInfererInfererNetworkRegretRequest, opts ...grpc.CallOption) (*GetOneOutInfererInfererNetworkRegretResponse, error) {
	out := new(GetOneOutInfererInfererNetworkRegretResponse)
	err := c.cc.Invoke(ctx, QueryService_GetOneOutInfererInfererNetworkRegret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetOneOutInfererForecasterNetworkRegret(ctx context.Context, in *GetOneOutInfererForecasterNetworkRegretRequest, opts ...grpc.CallOption) (*GetOneOutInfererForecasterNetworkRegretResponse, error) {
	out := new(GetOneOutInfererForecasterNetworkRegretResponse)
	err := c.cc.Invoke(ctx, QueryService_GetOneOutInfererForecasterNetworkRegret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetOneOutForecasterInfererNetworkRegret(ctx context.Context, in *GetOneOutForecasterInfererNetworkRegretRequest, opts ...grpc.CallOption) (*GetOneOutForecasterInfererNetworkRegretResponse, error) {
	out := new(GetOneOutForecasterInfererNetworkRegretResponse)
	err := c.cc.Invoke(ctx, QueryService_GetOneOutForecasterInfererNetworkRegret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetOneOutForecasterForecasterNetworkRegret(ctx context.Context, in *GetOneOutForecasterForecasterNetworkRegretRequest, opts ...grpc.CallOption) (*GetOneOutForecasterForecasterNetworkRegretResponse, error) {
	out := new(GetOneOutForecasterForecasterNetworkRegretResponse)
	err := c.cc.Invoke(ctx, QueryService_GetOneOutForecasterForecasterNetworkRegret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetActiveTopicsAtBlock(ctx context.Context, in *GetActiveTopicsAtBlockRequest, opts ...grpc.CallOption) (*GetActiveTopicsAtBlockResponse, error) {
	out := new(GetActiveTopicsAtBlockResponse)
	err := c.cc.Invoke(ctx, QueryService_GetActiveTopicsAtBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetNextChurningBlockByTopicId(ctx context.Context, in *GetNextChurningBlockByTopicIdRequest, opts ...grpc.CallOption) (*GetNextChurningBlockByTopicIdResponse, error) {
	out := new(GetNextChurningBlockByTopicIdResponse)
	err := c.cc.Invoke(ctx, QueryService_GetNextChurningBlockByTopicId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetActiveReputersForTopic(ctx context.Context, in *GetActiveReputersForTopicRequest, opts ...grpc.CallOption) (*GetActiveReputersForTopicResponse, error) {
	out := new(GetActiveReputersForTopicResponse)
	err := c.cc.Invoke(ctx, QueryService_GetActiveReputersForTopic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetActiveForecastersForTopic(ctx context.Context, in *GetActiveForecastersForTopicRequest, opts ...grpc.CallOption) (*GetActiveForecastersForTopicResponse, error) {
	out := new(GetActiveForecastersForTopicResponse)
	err := c.cc.Invoke(ctx, QueryService_GetActiveForecastersForTopic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetActiveInferersForTopic(ctx context.Context, in *GetActiveInferersForTopicRequest, opts ...grpc.CallOption) (*GetActiveInferersForTopicResponse, error) {
	out := new(GetActiveInferersForTopicResponse)
	err := c.cc.Invoke(ctx, QueryService_GetActiveInferersForTopic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServiceServer is the server API for QueryService service.
// All implementations must embed UnimplementedQueryServiceServer
// for forward compatibility
type QueryServiceServer interface {
	// Params returns the module parameters.
	GetParams(context.Context, *GetParamsRequest) (*GetParamsResponse, error)
	GetNextTopicId(context.Context, *GetNextTopicIdRequest) (*GetNextTopicIdResponse, error)
	GetTopic(context.Context, *GetTopicRequest) (*GetTopicResponse, error)
	GetWorkerLatestInferenceByTopicId(context.Context, *GetWorkerLatestInferenceByTopicIdRequest) (*GetWorkerLatestInferenceByTopicIdResponse, error)
	GetInferencesAtBlock(context.Context, *GetInferencesAtBlockRequest) (*GetInferencesAtBlockResponse, error)
	GetLatestTopicInferences(context.Context, *GetLatestTopicInferencesRequest) (*GetLatestTopicInferencesResponse, error)
	GetForecastsAtBlock(context.Context, *GetForecastsAtBlockRequest) (*GetForecastsAtBlockResponse, error)
	GetNetworkLossBundleAtBlock(context.Context, *GetNetworkLossBundleAtBlockRequest) (*GetNetworkLossBundleAtBlockResponse, error)
	GetTotalStake(context.Context, *GetTotalStakeRequest) (*GetTotalStakeResponse, error)
	GetReputerStakeInTopic(context.Context, *GetReputerStakeInTopicRequest) (*GetReputerStakeInTopicResponse, error)
	GetMultiReputerStakeInTopic(context.Context, *GetMultiReputerStakeInTopicRequest) (*GetMultiReputerStakeInTopicResponse, error)
	GetStakeFromReputerInTopicInSelf(context.Context, *GetStakeFromReputerInTopicInSelfRequest) (*GetStakeFromReputerInTopicInSelfResponse, error)
	GetDelegateStakeInTopicInReputer(context.Context, *GetDelegateStakeInTopicInReputerRequest) (*GetDelegateStakeInTopicInReputerResponse, error)
	GetStakeFromDelegatorInTopicInReputer(context.Context, *GetStakeFromDelegatorInTopicInReputerRequest) (*GetStakeFromDelegatorInTopicInReputerResponse, error)
	GetStakeFromDelegatorInTopic(context.Context, *GetStakeFromDelegatorInTopicRequest) (*GetStakeFromDelegatorInTopicResponse, error)
	GetTopicStake(context.Context, *GetTopicStakeRequest) (*GetTopicStakeResponse, error)
	GetStakeRemovalsUpUntilBlock(context.Context, *GetStakeRemovalsUpUntilBlockRequest) (*GetStakeRemovalsUpUntilBlockResponse, error)
	GetDelegateStakeRemovalsUpUntilBlock(context.Context, *GetDelegateStakeRemovalsUpUntilBlockRequest) (*GetDelegateStakeRemovalsUpUntilBlockResponse, error)
	GetStakeRemovalInfo(context.Context, *GetStakeRemovalInfoRequest) (*GetStakeRemovalInfoResponse, error)
	GetDelegateStakeRemovalInfo(context.Context, *GetDelegateStakeRemovalInfoRequest) (*GetDelegateStakeRemovalInfoResponse, error)
	GetWorkerNodeInfo(context.Context, *GetWorkerNodeInfoRequest) (*GetWorkerNodeInfoResponse, error)
	GetReputerNodeInfo(context.Context, *GetReputerNodeInfoRequest) (*GetReputerNodeInfoResponse, error)
	IsWorkerRegisteredInTopicId(context.Context, *IsWorkerRegisteredInTopicIdRequest) (*IsWorkerRegisteredInTopicIdResponse, error)
	IsReputerRegisteredInTopicId(context.Context, *IsReputerRegisteredInTopicIdRequest) (*IsReputerRegisteredInTopicIdResponse, error)
	GetNetworkInferencesAtBlock(context.Context, *GetNetworkInferencesAtBlockRequest) (*GetNetworkInferencesAtBlockResponse, error)
	GetLatestNetworkInferences(context.Context, *GetLatestNetworkInferencesRequest) (*GetLatestNetworkInferencesResponse, error)
	GetLatestAvailableNetworkInferences(context.Context, *GetLatestAvailableNetworkInferencesRequest) (*GetLatestAvailableNetworkInferencesResponse, error)
	IsWorkerNonceUnfulfilled(context.Context, *IsWorkerNonceUnfulfilledRequest) (*IsWorkerNonceUnfulfilledResponse, error)
	IsReputerNonceUnfulfilled(context.Context, *IsReputerNonceUnfulfilledRequest) (*IsReputerNonceUnfulfilledResponse, error)
	GetUnfulfilledWorkerNonces(context.Context, *GetUnfulfilledWorkerNoncesRequest) (*GetUnfulfilledWorkerNoncesResponse, error)
	GetUnfulfilledReputerNonces(context.Context, *GetUnfulfilledReputerNoncesRequest) (*GetUnfulfilledReputerNoncesResponse, error)
	GetInfererNetworkRegret(context.Context, *GetInfererNetworkRegretRequest) (*GetInfererNetworkRegretResponse, error)
	GetForecasterNetworkRegret(context.Context, *GetForecasterNetworkRegretRequest) (*GetForecasterNetworkRegretResponse, error)
	GetOneInForecasterNetworkRegret(context.Context, *GetOneInForecasterNetworkRegretRequest) (*GetOneInForecasterNetworkRegretResponse, error)
	IsWhitelistAdmin(context.Context, *IsWhitelistAdminRequest) (*IsWhitelistAdminResponse, error)
	GetTopicLastWorkerCommitInfo(context.Context, *GetTopicLastWorkerCommitInfoRequest) (*GetTopicLastWorkerCommitInfoResponse, error)
	GetTopicLastReputerCommitInfo(context.Context, *GetTopicLastReputerCommitInfoRequest) (*GetTopicLastReputerCommitInfoResponse, error)
	GetTopicRewardNonce(context.Context, *GetTopicRewardNonceRequest) (*GetTopicRewardNonceResponse, error)
	GetReputerLossBundlesAtBlock(context.Context, *GetReputerLossBundlesAtBlockRequest) (*GetReputerLossBundlesAtBlockResponse, error)
	GetStakeReputerAuthority(context.Context, *GetStakeReputerAuthorityRequest) (*GetStakeReputerAuthorityResponse, error)
	GetDelegateStakePlacement(context.Context, *GetDelegateStakePlacementRequest) (*GetDelegateStakePlacementResponse, error)
	GetDelegateStakeUponReputer(context.Context, *GetDelegateStakeUponReputerRequest) (*GetDelegateStakeUponReputerResponse, error)
	GetDelegateRewardPerShare(context.Context, *GetDelegateRewardPerShareRequest) (*GetDelegateRewardPerShareResponse, error)
	GetStakeRemovalForReputerAndTopicId(context.Context, *GetStakeRemovalForReputerAndTopicIdRequest) (*GetStakeRemovalForReputerAndTopicIdResponse, error)
	GetDelegateStakeRemoval(context.Context, *GetDelegateStakeRemovalRequest) (*GetDelegateStakeRemovalResponse, error)
	GetPreviousTopicWeight(context.Context, *GetPreviousTopicWeightRequest) (*GetPreviousTopicWeightResponse, error)
	TopicExists(context.Context, *TopicExistsRequest) (*TopicExistsResponse, error)
	IsTopicActive(context.Context, *IsTopicActiveRequest) (*IsTopicActiveResponse, error)
	GetTopicFeeRevenue(context.Context, *GetTopicFeeRevenueRequest) (*GetTopicFeeRevenueResponse, error)
	GetInfererScoreEma(context.Context, *GetInfererScoreEmaRequest) (*GetInfererScoreEmaResponse, error)
	GetForecasterScoreEma(context.Context, *GetForecasterScoreEmaRequest) (*GetForecasterScoreEmaResponse, error)
	GetReputerScoreEma(context.Context, *GetReputerScoreEmaRequest) (*GetReputerScoreEmaResponse, error)
	GetInferenceScoresUntilBlock(context.Context, *GetInferenceScoresUntilBlockRequest) (*GetInferenceScoresUntilBlockResponse, error)
	GetPreviousTopicQuantileForecasterScoreEma(context.Context, *GetPreviousTopicQuantileForecasterScoreEmaRequest) (*GetPreviousTopicQuantileForecasterScoreEmaResponse, error)
	GetPreviousTopicQuantileInfererScoreEma(context.Context, *GetPreviousTopicQuantileInfererScoreEmaRequest) (*GetPreviousTopicQuantileInfererScoreEmaResponse, error)
	GetPreviousTopicQuantileReputerScoreEma(context.Context, *GetPreviousTopicQuantileReputerScoreEmaRequest) (*GetPreviousTopicQuantileReputerScoreEmaResponse, error)
	GetWorkerInferenceScoresAtBlock(context.Context, *GetWorkerInferenceScoresAtBlockRequest) (*GetWorkerInferenceScoresAtBlockResponse, error)
	GetCurrentLowestInfererScore(context.Context, *GetCurrentLowestInfererScoreRequest) (*GetCurrentLowestInfererScoreResponse, error)
	GetForecastScoresUntilBlock(context.Context, *GetForecastScoresUntilBlockRequest) (*GetForecastScoresUntilBlockResponse, error)
	GetWorkerForecastScoresAtBlock(context.Context, *GetWorkerForecastScoresAtBlockRequest) (*GetWorkerForecastScoresAtBlockResponse, error)
	GetCurrentLowestForecasterScore(context.Context, *GetCurrentLowestForecasterScoreRequest) (*GetCurrentLowestForecasterScoreResponse, error)
	GetReputersScoresAtBlock(context.Context, *GetReputersScoresAtBlockRequest) (*GetReputersScoresAtBlockResponse, error)
	GetCurrentLowestReputerScore(context.Context, *GetCurrentLowestReputerScoreRequest) (*GetCurrentLowestReputerScoreResponse, error)
	GetListeningCoefficient(context.Context, *GetListeningCoefficientRequest) (*GetListeningCoefficientResponse, error)
	GetPreviousReputerRewardFraction(context.Context, *GetPreviousReputerRewardFractionRequest) (*GetPreviousReputerRewardFractionResponse, error)
	GetPreviousInferenceRewardFraction(context.Context, *GetPreviousInferenceRewardFractionRequest) (*GetPreviousInferenceRewardFractionResponse, error)
	GetPreviousForecastRewardFraction(context.Context, *GetPreviousForecastRewardFractionRequest) (*GetPreviousForecastRewardFractionResponse, error)
	GetPreviousPercentageRewardToStakedReputers(context.Context, *GetPreviousPercentageRewardToStakedReputersRequest) (*GetPreviousPercentageRewardToStakedReputersResponse, error)
	GetTotalRewardToDistribute(context.Context, *GetTotalRewardToDistributeRequest) (*GetTotalRewardToDistributeResponse, error)
	GetNaiveInfererNetworkRegret(context.Context, *GetNaiveInfererNetworkRegretRequest) (*GetNaiveInfererNetworkRegretResponse, error)
	GetOneOutInfererInfererNetworkRegret(context.Context, *GetOneOutInfererInfererNetworkRegretRequest) (*GetOneOutInfererInfererNetworkRegretResponse, error)
	GetOneOutInfererForecasterNetworkRegret(context.Context, *GetOneOutInfererForecasterNetworkRegretRequest) (*GetOneOutInfererForecasterNetworkRegretResponse, error)
	GetOneOutForecasterInfererNetworkRegret(context.Context, *GetOneOutForecasterInfererNetworkRegretRequest) (*GetOneOutForecasterInfererNetworkRegretResponse, error)
	GetOneOutForecasterForecasterNetworkRegret(context.Context, *GetOneOutForecasterForecasterNetworkRegretRequest) (*GetOneOutForecasterForecasterNetworkRegretResponse, error)
	GetActiveTopicsAtBlock(context.Context, *GetActiveTopicsAtBlockRequest) (*GetActiveTopicsAtBlockResponse, error)
	GetNextChurningBlockByTopicId(context.Context, *GetNextChurningBlockByTopicIdRequest) (*GetNextChurningBlockByTopicIdResponse, error)
	GetActiveReputersForTopic(context.Context, *GetActiveReputersForTopicRequest) (*GetActiveReputersForTopicResponse, error)
	GetActiveForecastersForTopic(context.Context, *GetActiveForecastersForTopicRequest) (*GetActiveForecastersForTopicResponse, error)
	GetActiveInferersForTopic(context.Context, *GetActiveInferersForTopicRequest) (*GetActiveInferersForTopicResponse, error)
	mustEmbedUnimplementedQueryServiceServer()
}

// UnimplementedQueryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServiceServer struct {
}

func (UnimplementedQueryServiceServer) GetParams(context.Context, *GetParamsRequest) (*GetParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParams not implemented")
}
func (UnimplementedQueryServiceServer) GetNextTopicId(context.Context, *GetNextTopicIdRequest) (*GetNextTopicIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextTopicId not implemented")
}
func (UnimplementedQueryServiceServer) GetTopic(context.Context, *GetTopicRequest) (*GetTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopic not implemented")
}
func (UnimplementedQueryServiceServer) GetWorkerLatestInferenceByTopicId(context.Context, *GetWorkerLatestInferenceByTopicIdRequest) (*GetWorkerLatestInferenceByTopicIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerLatestInferenceByTopicId not implemented")
}
func (UnimplementedQueryServiceServer) GetInferencesAtBlock(context.Context, *GetInferencesAtBlockRequest) (*GetInferencesAtBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInferencesAtBlock not implemented")
}
func (UnimplementedQueryServiceServer) GetLatestTopicInferences(context.Context, *GetLatestTopicInferencesRequest) (*GetLatestTopicInferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestTopicInferences not implemented")
}
func (UnimplementedQueryServiceServer) GetForecastsAtBlock(context.Context, *GetForecastsAtBlockRequest) (*GetForecastsAtBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForecastsAtBlock not implemented")
}
func (UnimplementedQueryServiceServer) GetNetworkLossBundleAtBlock(context.Context, *GetNetworkLossBundleAtBlockRequest) (*GetNetworkLossBundleAtBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkLossBundleAtBlock not implemented")
}
func (UnimplementedQueryServiceServer) GetTotalStake(context.Context, *GetTotalStakeRequest) (*GetTotalStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalStake not implemented")
}
func (UnimplementedQueryServiceServer) GetReputerStakeInTopic(context.Context, *GetReputerStakeInTopicRequest) (*GetReputerStakeInTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReputerStakeInTopic not implemented")
}
func (UnimplementedQueryServiceServer) GetMultiReputerStakeInTopic(context.Context, *GetMultiReputerStakeInTopicRequest) (*GetMultiReputerStakeInTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMultiReputerStakeInTopic not implemented")
}
func (UnimplementedQueryServiceServer) GetStakeFromReputerInTopicInSelf(context.Context, *GetStakeFromReputerInTopicInSelfRequest) (*GetStakeFromReputerInTopicInSelfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakeFromReputerInTopicInSelf not implemented")
}
func (UnimplementedQueryServiceServer) GetDelegateStakeInTopicInReputer(context.Context, *GetDelegateStakeInTopicInReputerRequest) (*GetDelegateStakeInTopicInReputerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegateStakeInTopicInReputer not implemented")
}
func (UnimplementedQueryServiceServer) GetStakeFromDelegatorInTopicInReputer(context.Context, *GetStakeFromDelegatorInTopicInReputerRequest) (*GetStakeFromDelegatorInTopicInReputerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakeFromDelegatorInTopicInReputer not implemented")
}
func (UnimplementedQueryServiceServer) GetStakeFromDelegatorInTopic(context.Context, *GetStakeFromDelegatorInTopicRequest) (*GetStakeFromDelegatorInTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakeFromDelegatorInTopic not implemented")
}
func (UnimplementedQueryServiceServer) GetTopicStake(context.Context, *GetTopicStakeRequest) (*GetTopicStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicStake not implemented")
}
func (UnimplementedQueryServiceServer) GetStakeRemovalsUpUntilBlock(context.Context, *GetStakeRemovalsUpUntilBlockRequest) (*GetStakeRemovalsUpUntilBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakeRemovalsUpUntilBlock not implemented")
}
func (UnimplementedQueryServiceServer) GetDelegateStakeRemovalsUpUntilBlock(context.Context, *GetDelegateStakeRemovalsUpUntilBlockRequest) (*GetDelegateStakeRemovalsUpUntilBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegateStakeRemovalsUpUntilBlock not implemented")
}
func (UnimplementedQueryServiceServer) GetStakeRemovalInfo(context.Context, *GetStakeRemovalInfoRequest) (*GetStakeRemovalInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakeRemovalInfo not implemented")
}
func (UnimplementedQueryServiceServer) GetDelegateStakeRemovalInfo(context.Context, *GetDelegateStakeRemovalInfoRequest) (*GetDelegateStakeRemovalInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegateStakeRemovalInfo not implemented")
}
func (UnimplementedQueryServiceServer) GetWorkerNodeInfo(context.Context, *GetWorkerNodeInfoRequest) (*GetWorkerNodeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerNodeInfo not implemented")
}
func (UnimplementedQueryServiceServer) GetReputerNodeInfo(context.Context, *GetReputerNodeInfoRequest) (*GetReputerNodeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReputerNodeInfo not implemented")
}
func (UnimplementedQueryServiceServer) IsWorkerRegisteredInTopicId(context.Context, *IsWorkerRegisteredInTopicIdRequest) (*IsWorkerRegisteredInTopicIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsWorkerRegisteredInTopicId not implemented")
}
func (UnimplementedQueryServiceServer) IsReputerRegisteredInTopicId(context.Context, *IsReputerRegisteredInTopicIdRequest) (*IsReputerRegisteredInTopicIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsReputerRegisteredInTopicId not implemented")
}
func (UnimplementedQueryServiceServer) GetNetworkInferencesAtBlock(context.Context, *GetNetworkInferencesAtBlockRequest) (*GetNetworkInferencesAtBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkInferencesAtBlock not implemented")
}
func (UnimplementedQueryServiceServer) GetLatestNetworkInferences(context.Context, *GetLatestNetworkInferencesRequest) (*GetLatestNetworkInferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestNetworkInferences not implemented")
}
func (UnimplementedQueryServiceServer) GetLatestAvailableNetworkInferences(context.Context, *GetLatestAvailableNetworkInferencesRequest) (*GetLatestAvailableNetworkInferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestAvailableNetworkInferences not implemented")
}
func (UnimplementedQueryServiceServer) IsWorkerNonceUnfulfilled(context.Context, *IsWorkerNonceUnfulfilledRequest) (*IsWorkerNonceUnfulfilledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsWorkerNonceUnfulfilled not implemented")
}
func (UnimplementedQueryServiceServer) IsReputerNonceUnfulfilled(context.Context, *IsReputerNonceUnfulfilledRequest) (*IsReputerNonceUnfulfilledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsReputerNonceUnfulfilled not implemented")
}
func (UnimplementedQueryServiceServer) GetUnfulfilledWorkerNonces(context.Context, *GetUnfulfilledWorkerNoncesRequest) (*GetUnfulfilledWorkerNoncesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnfulfilledWorkerNonces not implemented")
}
func (UnimplementedQueryServiceServer) GetUnfulfilledReputerNonces(context.Context, *GetUnfulfilledReputerNoncesRequest) (*GetUnfulfilledReputerNoncesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnfulfilledReputerNonces not implemented")
}
func (UnimplementedQueryServiceServer) GetInfererNetworkRegret(context.Context, *GetInfererNetworkRegretRequest) (*GetInfererNetworkRegretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfererNetworkRegret not implemented")
}
func (UnimplementedQueryServiceServer) GetForecasterNetworkRegret(context.Context, *GetForecasterNetworkRegretRequest) (*GetForecasterNetworkRegretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForecasterNetworkRegret not implemented")
}
func (UnimplementedQueryServiceServer) GetOneInForecasterNetworkRegret(context.Context, *GetOneInForecasterNetworkRegretRequest) (*GetOneInForecasterNetworkRegretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneInForecasterNetworkRegret not implemented")
}
func (UnimplementedQueryServiceServer) IsWhitelistAdmin(context.Context, *IsWhitelistAdminRequest) (*IsWhitelistAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsWhitelistAdmin not implemented")
}
func (UnimplementedQueryServiceServer) GetTopicLastWorkerCommitInfo(context.Context, *GetTopicLastWorkerCommitInfoRequest) (*GetTopicLastWorkerCommitInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicLastWorkerCommitInfo not implemented")
}
func (UnimplementedQueryServiceServer) GetTopicLastReputerCommitInfo(context.Context, *GetTopicLastReputerCommitInfoRequest) (*GetTopicLastReputerCommitInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicLastReputerCommitInfo not implemented")
}
func (UnimplementedQueryServiceServer) GetTopicRewardNonce(context.Context, *GetTopicRewardNonceRequest) (*GetTopicRewardNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicRewardNonce not implemented")
}
func (UnimplementedQueryServiceServer) GetReputerLossBundlesAtBlock(context.Context, *GetReputerLossBundlesAtBlockRequest) (*GetReputerLossBundlesAtBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReputerLossBundlesAtBlock not implemented")
}
func (UnimplementedQueryServiceServer) GetStakeReputerAuthority(context.Context, *GetStakeReputerAuthorityRequest) (*GetStakeReputerAuthorityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakeReputerAuthority not implemented")
}
func (UnimplementedQueryServiceServer) GetDelegateStakePlacement(context.Context, *GetDelegateStakePlacementRequest) (*GetDelegateStakePlacementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegateStakePlacement not implemented")
}
func (UnimplementedQueryServiceServer) GetDelegateStakeUponReputer(context.Context, *GetDelegateStakeUponReputerRequest) (*GetDelegateStakeUponReputerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegateStakeUponReputer not implemented")
}
func (UnimplementedQueryServiceServer) GetDelegateRewardPerShare(context.Context, *GetDelegateRewardPerShareRequest) (*GetDelegateRewardPerShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegateRewardPerShare not implemented")
}
func (UnimplementedQueryServiceServer) GetStakeRemovalForReputerAndTopicId(context.Context, *GetStakeRemovalForReputerAndTopicIdRequest) (*GetStakeRemovalForReputerAndTopicIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakeRemovalForReputerAndTopicId not implemented")
}
func (UnimplementedQueryServiceServer) GetDelegateStakeRemoval(context.Context, *GetDelegateStakeRemovalRequest) (*GetDelegateStakeRemovalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegateStakeRemoval not implemented")
}
func (UnimplementedQueryServiceServer) GetPreviousTopicWeight(context.Context, *GetPreviousTopicWeightRequest) (*GetPreviousTopicWeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreviousTopicWeight not implemented")
}
func (UnimplementedQueryServiceServer) TopicExists(context.Context, *TopicExistsRequest) (*TopicExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopicExists not implemented")
}
func (UnimplementedQueryServiceServer) IsTopicActive(context.Context, *IsTopicActiveRequest) (*IsTopicActiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsTopicActive not implemented")
}
func (UnimplementedQueryServiceServer) GetTopicFeeRevenue(context.Context, *GetTopicFeeRevenueRequest) (*GetTopicFeeRevenueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicFeeRevenue not implemented")
}
func (UnimplementedQueryServiceServer) GetInfererScoreEma(context.Context, *GetInfererScoreEmaRequest) (*GetInfererScoreEmaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfererScoreEma not implemented")
}
func (UnimplementedQueryServiceServer) GetForecasterScoreEma(context.Context, *GetForecasterScoreEmaRequest) (*GetForecasterScoreEmaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForecasterScoreEma not implemented")
}
func (UnimplementedQueryServiceServer) GetReputerScoreEma(context.Context, *GetReputerScoreEmaRequest) (*GetReputerScoreEmaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReputerScoreEma not implemented")
}
func (UnimplementedQueryServiceServer) GetInferenceScoresUntilBlock(context.Context, *GetInferenceScoresUntilBlockRequest) (*GetInferenceScoresUntilBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInferenceScoresUntilBlock not implemented")
}
func (UnimplementedQueryServiceServer) GetPreviousTopicQuantileForecasterScoreEma(context.Context, *GetPreviousTopicQuantileForecasterScoreEmaRequest) (*GetPreviousTopicQuantileForecasterScoreEmaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreviousTopicQuantileForecasterScoreEma not implemented")
}
func (UnimplementedQueryServiceServer) GetPreviousTopicQuantileInfererScoreEma(context.Context, *GetPreviousTopicQuantileInfererScoreEmaRequest) (*GetPreviousTopicQuantileInfererScoreEmaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreviousTopicQuantileInfererScoreEma not implemented")
}
func (UnimplementedQueryServiceServer) GetPreviousTopicQuantileReputerScoreEma(context.Context, *GetPreviousTopicQuantileReputerScoreEmaRequest) (*GetPreviousTopicQuantileReputerScoreEmaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreviousTopicQuantileReputerScoreEma not implemented")
}
func (UnimplementedQueryServiceServer) GetWorkerInferenceScoresAtBlock(context.Context, *GetWorkerInferenceScoresAtBlockRequest) (*GetWorkerInferenceScoresAtBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerInferenceScoresAtBlock not implemented")
}
func (UnimplementedQueryServiceServer) GetCurrentLowestInfererScore(context.Context, *GetCurrentLowestInfererScoreRequest) (*GetCurrentLowestInfererScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentLowestInfererScore not implemented")
}
func (UnimplementedQueryServiceServer) GetForecastScoresUntilBlock(context.Context, *GetForecastScoresUntilBlockRequest) (*GetForecastScoresUntilBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForecastScoresUntilBlock not implemented")
}
func (UnimplementedQueryServiceServer) GetWorkerForecastScoresAtBlock(context.Context, *GetWorkerForecastScoresAtBlockRequest) (*GetWorkerForecastScoresAtBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerForecastScoresAtBlock not implemented")
}
func (UnimplementedQueryServiceServer) GetCurrentLowestForecasterScore(context.Context, *GetCurrentLowestForecasterScoreRequest) (*GetCurrentLowestForecasterScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentLowestForecasterScore not implemented")
}
func (UnimplementedQueryServiceServer) GetReputersScoresAtBlock(context.Context, *GetReputersScoresAtBlockRequest) (*GetReputersScoresAtBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReputersScoresAtBlock not implemented")
}
func (UnimplementedQueryServiceServer) GetCurrentLowestReputerScore(context.Context, *GetCurrentLowestReputerScoreRequest) (*GetCurrentLowestReputerScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentLowestReputerScore not implemented")
}
func (UnimplementedQueryServiceServer) GetListeningCoefficient(context.Context, *GetListeningCoefficientRequest) (*GetListeningCoefficientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListeningCoefficient not implemented")
}
func (UnimplementedQueryServiceServer) GetPreviousReputerRewardFraction(context.Context, *GetPreviousReputerRewardFractionRequest) (*GetPreviousReputerRewardFractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreviousReputerRewardFraction not implemented")
}
func (UnimplementedQueryServiceServer) GetPreviousInferenceRewardFraction(context.Context, *GetPreviousInferenceRewardFractionRequest) (*GetPreviousInferenceRewardFractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreviousInferenceRewardFraction not implemented")
}
func (UnimplementedQueryServiceServer) GetPreviousForecastRewardFraction(context.Context, *GetPreviousForecastRewardFractionRequest) (*GetPreviousForecastRewardFractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreviousForecastRewardFraction not implemented")
}
func (UnimplementedQueryServiceServer) GetPreviousPercentageRewardToStakedReputers(context.Context, *GetPreviousPercentageRewardToStakedReputersRequest) (*GetPreviousPercentageRewardToStakedReputersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreviousPercentageRewardToStakedReputers not implemented")
}
func (UnimplementedQueryServiceServer) GetTotalRewardToDistribute(context.Context, *GetTotalRewardToDistributeRequest) (*GetTotalRewardToDistributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalRewardToDistribute not implemented")
}
func (UnimplementedQueryServiceServer) GetNaiveInfererNetworkRegret(context.Context, *GetNaiveInfererNetworkRegretRequest) (*GetNaiveInfererNetworkRegretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNaiveInfererNetworkRegret not implemented")
}
func (UnimplementedQueryServiceServer) GetOneOutInfererInfererNetworkRegret(context.Context, *GetOneOutInfererInfererNetworkRegretRequest) (*GetOneOutInfererInfererNetworkRegretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneOutInfererInfererNetworkRegret not implemented")
}
func (UnimplementedQueryServiceServer) GetOneOutInfererForecasterNetworkRegret(context.Context, *GetOneOutInfererForecasterNetworkRegretRequest) (*GetOneOutInfererForecasterNetworkRegretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneOutInfererForecasterNetworkRegret not implemented")
}
func (UnimplementedQueryServiceServer) GetOneOutForecasterInfererNetworkRegret(context.Context, *GetOneOutForecasterInfererNetworkRegretRequest) (*GetOneOutForecasterInfererNetworkRegretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneOutForecasterInfererNetworkRegret not implemented")
}
func (UnimplementedQueryServiceServer) GetOneOutForecasterForecasterNetworkRegret(context.Context, *GetOneOutForecasterForecasterNetworkRegretRequest) (*GetOneOutForecasterForecasterNetworkRegretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneOutForecasterForecasterNetworkRegret not implemented")
}
func (UnimplementedQueryServiceServer) GetActiveTopicsAtBlock(context.Context, *GetActiveTopicsAtBlockRequest) (*GetActiveTopicsAtBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveTopicsAtBlock not implemented")
}
func (UnimplementedQueryServiceServer) GetNextChurningBlockByTopicId(context.Context, *GetNextChurningBlockByTopicIdRequest) (*GetNextChurningBlockByTopicIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextChurningBlockByTopicId not implemented")
}
func (UnimplementedQueryServiceServer) GetActiveReputersForTopic(context.Context, *GetActiveReputersForTopicRequest) (*GetActiveReputersForTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveReputersForTopic not implemented")
}
func (UnimplementedQueryServiceServer) GetActiveForecastersForTopic(context.Context, *GetActiveForecastersForTopicRequest) (*GetActiveForecastersForTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveForecastersForTopic not implemented")
}
func (UnimplementedQueryServiceServer) GetActiveInferersForTopic(context.Context, *GetActiveInferersForTopicRequest) (*GetActiveInferersForTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveInferersForTopic not implemented")
}
func (UnimplementedQueryServiceServer) mustEmbedUnimplementedQueryServiceServer() {}

// UnsafeQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServiceServer will
// result in compilation errors.
type UnsafeQueryServiceServer interface {
	mustEmbedUnimplementedQueryServiceServer()
}

func RegisterQueryServiceServer(s grpc.ServiceRegistrar, srv QueryServiceServer) {
	s.RegisterService(&QueryService_ServiceDesc, srv)
}

func _QueryService_GetParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetParams(ctx, req.(*GetParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetNextTopicId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNextTopicIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetNextTopicId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetNextTopicId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetNextTopicId(ctx, req.(*GetNextTopicIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetTopic(ctx, req.(*GetTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetWorkerLatestInferenceByTopicId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkerLatestInferenceByTopicIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetWorkerLatestInferenceByTopicId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetWorkerLatestInferenceByTopicId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetWorkerLatestInferenceByTopicId(ctx, req.(*GetWorkerLatestInferenceByTopicIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetInferencesAtBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInferencesAtBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetInferencesAtBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetInferencesAtBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetInferencesAtBlock(ctx, req.(*GetInferencesAtBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetLatestTopicInferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestTopicInferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetLatestTopicInferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetLatestTopicInferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetLatestTopicInferences(ctx, req.(*GetLatestTopicInferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetForecastsAtBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetForecastsAtBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetForecastsAtBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetForecastsAtBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetForecastsAtBlock(ctx, req.(*GetForecastsAtBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetNetworkLossBundleAtBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkLossBundleAtBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetNetworkLossBundleAtBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetNetworkLossBundleAtBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetNetworkLossBundleAtBlock(ctx, req.(*GetNetworkLossBundleAtBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetTotalStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTotalStakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetTotalStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetTotalStake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetTotalStake(ctx, req.(*GetTotalStakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetReputerStakeInTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReputerStakeInTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetReputerStakeInTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetReputerStakeInTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetReputerStakeInTopic(ctx, req.(*GetReputerStakeInTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetMultiReputerStakeInTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMultiReputerStakeInTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetMultiReputerStakeInTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetMultiReputerStakeInTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetMultiReputerStakeInTopic(ctx, req.(*GetMultiReputerStakeInTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetStakeFromReputerInTopicInSelf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStakeFromReputerInTopicInSelfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetStakeFromReputerInTopicInSelf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetStakeFromReputerInTopicInSelf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetStakeFromReputerInTopicInSelf(ctx, req.(*GetStakeFromReputerInTopicInSelfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetDelegateStakeInTopicInReputer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDelegateStakeInTopicInReputerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetDelegateStakeInTopicInReputer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetDelegateStakeInTopicInReputer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetDelegateStakeInTopicInReputer(ctx, req.(*GetDelegateStakeInTopicInReputerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetStakeFromDelegatorInTopicInReputer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStakeFromDelegatorInTopicInReputerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetStakeFromDelegatorInTopicInReputer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetStakeFromDelegatorInTopicInReputer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetStakeFromDelegatorInTopicInReputer(ctx, req.(*GetStakeFromDelegatorInTopicInReputerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetStakeFromDelegatorInTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStakeFromDelegatorInTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetStakeFromDelegatorInTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetStakeFromDelegatorInTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetStakeFromDelegatorInTopic(ctx, req.(*GetStakeFromDelegatorInTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetTopicStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopicStakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetTopicStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetTopicStake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetTopicStake(ctx, req.(*GetTopicStakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetStakeRemovalsUpUntilBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStakeRemovalsUpUntilBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetStakeRemovalsUpUntilBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetStakeRemovalsUpUntilBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetStakeRemovalsUpUntilBlock(ctx, req.(*GetStakeRemovalsUpUntilBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetDelegateStakeRemovalsUpUntilBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDelegateStakeRemovalsUpUntilBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetDelegateStakeRemovalsUpUntilBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetDelegateStakeRemovalsUpUntilBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetDelegateStakeRemovalsUpUntilBlock(ctx, req.(*GetDelegateStakeRemovalsUpUntilBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetStakeRemovalInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStakeRemovalInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetStakeRemovalInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetStakeRemovalInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetStakeRemovalInfo(ctx, req.(*GetStakeRemovalInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetDelegateStakeRemovalInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDelegateStakeRemovalInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetDelegateStakeRemovalInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetDelegateStakeRemovalInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetDelegateStakeRemovalInfo(ctx, req.(*GetDelegateStakeRemovalInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetWorkerNodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkerNodeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetWorkerNodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetWorkerNodeInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetWorkerNodeInfo(ctx, req.(*GetWorkerNodeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetReputerNodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReputerNodeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetReputerNodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetReputerNodeInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetReputerNodeInfo(ctx, req.(*GetReputerNodeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_IsWorkerRegisteredInTopicId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsWorkerRegisteredInTopicIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).IsWorkerRegisteredInTopicId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_IsWorkerRegisteredInTopicId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).IsWorkerRegisteredInTopicId(ctx, req.(*IsWorkerRegisteredInTopicIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_IsReputerRegisteredInTopicId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsReputerRegisteredInTopicIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).IsReputerRegisteredInTopicId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_IsReputerRegisteredInTopicId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).IsReputerRegisteredInTopicId(ctx, req.(*IsReputerRegisteredInTopicIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetNetworkInferencesAtBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkInferencesAtBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetNetworkInferencesAtBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetNetworkInferencesAtBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetNetworkInferencesAtBlock(ctx, req.(*GetNetworkInferencesAtBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetLatestNetworkInferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestNetworkInferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetLatestNetworkInferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetLatestNetworkInferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetLatestNetworkInferences(ctx, req.(*GetLatestNetworkInferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetLatestAvailableNetworkInferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestAvailableNetworkInferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetLatestAvailableNetworkInferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetLatestAvailableNetworkInferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetLatestAvailableNetworkInferences(ctx, req.(*GetLatestAvailableNetworkInferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_IsWorkerNonceUnfulfilled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsWorkerNonceUnfulfilledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).IsWorkerNonceUnfulfilled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_IsWorkerNonceUnfulfilled_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).IsWorkerNonceUnfulfilled(ctx, req.(*IsWorkerNonceUnfulfilledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_IsReputerNonceUnfulfilled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsReputerNonceUnfulfilledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).IsReputerNonceUnfulfilled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_IsReputerNonceUnfulfilled_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).IsReputerNonceUnfulfilled(ctx, req.(*IsReputerNonceUnfulfilledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetUnfulfilledWorkerNonces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnfulfilledWorkerNoncesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetUnfulfilledWorkerNonces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetUnfulfilledWorkerNonces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetUnfulfilledWorkerNonces(ctx, req.(*GetUnfulfilledWorkerNoncesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetUnfulfilledReputerNonces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnfulfilledReputerNoncesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetUnfulfilledReputerNonces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetUnfulfilledReputerNonces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetUnfulfilledReputerNonces(ctx, req.(*GetUnfulfilledReputerNoncesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetInfererNetworkRegret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfererNetworkRegretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetInfererNetworkRegret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetInfererNetworkRegret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetInfererNetworkRegret(ctx, req.(*GetInfererNetworkRegretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetForecasterNetworkRegret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetForecasterNetworkRegretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetForecasterNetworkRegret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetForecasterNetworkRegret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetForecasterNetworkRegret(ctx, req.(*GetForecasterNetworkRegretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetOneInForecasterNetworkRegret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneInForecasterNetworkRegretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetOneInForecasterNetworkRegret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetOneInForecasterNetworkRegret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetOneInForecasterNetworkRegret(ctx, req.(*GetOneInForecasterNetworkRegretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_IsWhitelistAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsWhitelistAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).IsWhitelistAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_IsWhitelistAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).IsWhitelistAdmin(ctx, req.(*IsWhitelistAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetTopicLastWorkerCommitInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopicLastWorkerCommitInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetTopicLastWorkerCommitInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetTopicLastWorkerCommitInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetTopicLastWorkerCommitInfo(ctx, req.(*GetTopicLastWorkerCommitInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetTopicLastReputerCommitInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopicLastReputerCommitInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetTopicLastReputerCommitInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetTopicLastReputerCommitInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetTopicLastReputerCommitInfo(ctx, req.(*GetTopicLastReputerCommitInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetTopicRewardNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopicRewardNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetTopicRewardNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetTopicRewardNonce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetTopicRewardNonce(ctx, req.(*GetTopicRewardNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetReputerLossBundlesAtBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReputerLossBundlesAtBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetReputerLossBundlesAtBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetReputerLossBundlesAtBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetReputerLossBundlesAtBlock(ctx, req.(*GetReputerLossBundlesAtBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetStakeReputerAuthority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStakeReputerAuthorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetStakeReputerAuthority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetStakeReputerAuthority_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetStakeReputerAuthority(ctx, req.(*GetStakeReputerAuthorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetDelegateStakePlacement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDelegateStakePlacementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetDelegateStakePlacement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetDelegateStakePlacement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetDelegateStakePlacement(ctx, req.(*GetDelegateStakePlacementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetDelegateStakeUponReputer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDelegateStakeUponReputerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetDelegateStakeUponReputer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetDelegateStakeUponReputer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetDelegateStakeUponReputer(ctx, req.(*GetDelegateStakeUponReputerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetDelegateRewardPerShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDelegateRewardPerShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetDelegateRewardPerShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetDelegateRewardPerShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetDelegateRewardPerShare(ctx, req.(*GetDelegateRewardPerShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetStakeRemovalForReputerAndTopicId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStakeRemovalForReputerAndTopicIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetStakeRemovalForReputerAndTopicId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetStakeRemovalForReputerAndTopicId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetStakeRemovalForReputerAndTopicId(ctx, req.(*GetStakeRemovalForReputerAndTopicIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetDelegateStakeRemoval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDelegateStakeRemovalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetDelegateStakeRemoval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetDelegateStakeRemoval_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetDelegateStakeRemoval(ctx, req.(*GetDelegateStakeRemovalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetPreviousTopicWeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPreviousTopicWeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetPreviousTopicWeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetPreviousTopicWeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetPreviousTopicWeight(ctx, req.(*GetPreviousTopicWeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_TopicExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopicExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).TopicExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_TopicExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).TopicExists(ctx, req.(*TopicExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_IsTopicActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsTopicActiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).IsTopicActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_IsTopicActive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).IsTopicActive(ctx, req.(*IsTopicActiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetTopicFeeRevenue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopicFeeRevenueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetTopicFeeRevenue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetTopicFeeRevenue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetTopicFeeRevenue(ctx, req.(*GetTopicFeeRevenueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetInfererScoreEma_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfererScoreEmaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetInfererScoreEma(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetInfererScoreEma_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetInfererScoreEma(ctx, req.(*GetInfererScoreEmaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetForecasterScoreEma_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetForecasterScoreEmaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetForecasterScoreEma(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetForecasterScoreEma_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetForecasterScoreEma(ctx, req.(*GetForecasterScoreEmaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetReputerScoreEma_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReputerScoreEmaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetReputerScoreEma(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetReputerScoreEma_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetReputerScoreEma(ctx, req.(*GetReputerScoreEmaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetInferenceScoresUntilBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInferenceScoresUntilBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetInferenceScoresUntilBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetInferenceScoresUntilBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetInferenceScoresUntilBlock(ctx, req.(*GetInferenceScoresUntilBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetPreviousTopicQuantileForecasterScoreEma_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPreviousTopicQuantileForecasterScoreEmaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetPreviousTopicQuantileForecasterScoreEma(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetPreviousTopicQuantileForecasterScoreEma_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetPreviousTopicQuantileForecasterScoreEma(ctx, req.(*GetPreviousTopicQuantileForecasterScoreEmaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetPreviousTopicQuantileInfererScoreEma_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPreviousTopicQuantileInfererScoreEmaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetPreviousTopicQuantileInfererScoreEma(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetPreviousTopicQuantileInfererScoreEma_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetPreviousTopicQuantileInfererScoreEma(ctx, req.(*GetPreviousTopicQuantileInfererScoreEmaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetPreviousTopicQuantileReputerScoreEma_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPreviousTopicQuantileReputerScoreEmaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetPreviousTopicQuantileReputerScoreEma(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetPreviousTopicQuantileReputerScoreEma_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetPreviousTopicQuantileReputerScoreEma(ctx, req.(*GetPreviousTopicQuantileReputerScoreEmaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetWorkerInferenceScoresAtBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkerInferenceScoresAtBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetWorkerInferenceScoresAtBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetWorkerInferenceScoresAtBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetWorkerInferenceScoresAtBlock(ctx, req.(*GetWorkerInferenceScoresAtBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetCurrentLowestInfererScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentLowestInfererScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetCurrentLowestInfererScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetCurrentLowestInfererScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetCurrentLowestInfererScore(ctx, req.(*GetCurrentLowestInfererScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetForecastScoresUntilBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetForecastScoresUntilBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetForecastScoresUntilBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetForecastScoresUntilBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetForecastScoresUntilBlock(ctx, req.(*GetForecastScoresUntilBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetWorkerForecastScoresAtBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkerForecastScoresAtBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetWorkerForecastScoresAtBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetWorkerForecastScoresAtBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetWorkerForecastScoresAtBlock(ctx, req.(*GetWorkerForecastScoresAtBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetCurrentLowestForecasterScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentLowestForecasterScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetCurrentLowestForecasterScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetCurrentLowestForecasterScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetCurrentLowestForecasterScore(ctx, req.(*GetCurrentLowestForecasterScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetReputersScoresAtBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReputersScoresAtBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetReputersScoresAtBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetReputersScoresAtBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetReputersScoresAtBlock(ctx, req.(*GetReputersScoresAtBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetCurrentLowestReputerScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentLowestReputerScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetCurrentLowestReputerScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetCurrentLowestReputerScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetCurrentLowestReputerScore(ctx, req.(*GetCurrentLowestReputerScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetListeningCoefficient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListeningCoefficientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetListeningCoefficient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetListeningCoefficient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetListeningCoefficient(ctx, req.(*GetListeningCoefficientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetPreviousReputerRewardFraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPreviousReputerRewardFractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetPreviousReputerRewardFraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetPreviousReputerRewardFraction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetPreviousReputerRewardFraction(ctx, req.(*GetPreviousReputerRewardFractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetPreviousInferenceRewardFraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPreviousInferenceRewardFractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetPreviousInferenceRewardFraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetPreviousInferenceRewardFraction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetPreviousInferenceRewardFraction(ctx, req.(*GetPreviousInferenceRewardFractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetPreviousForecastRewardFraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPreviousForecastRewardFractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetPreviousForecastRewardFraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetPreviousForecastRewardFraction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetPreviousForecastRewardFraction(ctx, req.(*GetPreviousForecastRewardFractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetPreviousPercentageRewardToStakedReputers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPreviousPercentageRewardToStakedReputersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetPreviousPercentageRewardToStakedReputers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetPreviousPercentageRewardToStakedReputers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetPreviousPercentageRewardToStakedReputers(ctx, req.(*GetPreviousPercentageRewardToStakedReputersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetTotalRewardToDistribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTotalRewardToDistributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetTotalRewardToDistribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetTotalRewardToDistribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetTotalRewardToDistribute(ctx, req.(*GetTotalRewardToDistributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetNaiveInfererNetworkRegret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNaiveInfererNetworkRegretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetNaiveInfererNetworkRegret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetNaiveInfererNetworkRegret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetNaiveInfererNetworkRegret(ctx, req.(*GetNaiveInfererNetworkRegretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetOneOutInfererInfererNetworkRegret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneOutInfererInfererNetworkRegretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetOneOutInfererInfererNetworkRegret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetOneOutInfererInfererNetworkRegret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetOneOutInfererInfererNetworkRegret(ctx, req.(*GetOneOutInfererInfererNetworkRegretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetOneOutInfererForecasterNetworkRegret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneOutInfererForecasterNetworkRegretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetOneOutInfererForecasterNetworkRegret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetOneOutInfererForecasterNetworkRegret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetOneOutInfererForecasterNetworkRegret(ctx, req.(*GetOneOutInfererForecasterNetworkRegretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetOneOutForecasterInfererNetworkRegret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneOutForecasterInfererNetworkRegretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetOneOutForecasterInfererNetworkRegret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetOneOutForecasterInfererNetworkRegret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetOneOutForecasterInfererNetworkRegret(ctx, req.(*GetOneOutForecasterInfererNetworkRegretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetOneOutForecasterForecasterNetworkRegret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneOutForecasterForecasterNetworkRegretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetOneOutForecasterForecasterNetworkRegret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetOneOutForecasterForecasterNetworkRegret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetOneOutForecasterForecasterNetworkRegret(ctx, req.(*GetOneOutForecasterForecasterNetworkRegretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetActiveTopicsAtBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveTopicsAtBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetActiveTopicsAtBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetActiveTopicsAtBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetActiveTopicsAtBlock(ctx, req.(*GetActiveTopicsAtBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetNextChurningBlockByTopicId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNextChurningBlockByTopicIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetNextChurningBlockByTopicId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetNextChurningBlockByTopicId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetNextChurningBlockByTopicId(ctx, req.(*GetNextChurningBlockByTopicIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetActiveReputersForTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveReputersForTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetActiveReputersForTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetActiveReputersForTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetActiveReputersForTopic(ctx, req.(*GetActiveReputersForTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetActiveForecastersForTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveForecastersForTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetActiveForecastersForTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetActiveForecastersForTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetActiveForecastersForTopic(ctx, req.(*GetActiveForecastersForTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetActiveInferersForTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveInferersForTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetActiveInferersForTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_GetActiveInferersForTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetActiveInferersForTopic(ctx, req.(*GetActiveInferersForTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QueryService_ServiceDesc is the grpc.ServiceDesc for QueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "emissions.v4.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetParams",
			Handler:    _QueryService_GetParams_Handler,
		},
		{
			MethodName: "GetNextTopicId",
			Handler:    _QueryService_GetNextTopicId_Handler,
		},
		{
			MethodName: "GetTopic",
			Handler:    _QueryService_GetTopic_Handler,
		},
		{
			MethodName: "GetWorkerLatestInferenceByTopicId",
			Handler:    _QueryService_GetWorkerLatestInferenceByTopicId_Handler,
		},
		{
			MethodName: "GetInferencesAtBlock",
			Handler:    _QueryService_GetInferencesAtBlock_Handler,
		},
		{
			MethodName: "GetLatestTopicInferences",
			Handler:    _QueryService_GetLatestTopicInferences_Handler,
		},
		{
			MethodName: "GetForecastsAtBlock",
			Handler:    _QueryService_GetForecastsAtBlock_Handler,
		},
		{
			MethodName: "GetNetworkLossBundleAtBlock",
			Handler:    _QueryService_GetNetworkLossBundleAtBlock_Handler,
		},
		{
			MethodName: "GetTotalStake",
			Handler:    _QueryService_GetTotalStake_Handler,
		},
		{
			MethodName: "GetReputerStakeInTopic",
			Handler:    _QueryService_GetReputerStakeInTopic_Handler,
		},
		{
			MethodName: "GetMultiReputerStakeInTopic",
			Handler:    _QueryService_GetMultiReputerStakeInTopic_Handler,
		},
		{
			MethodName: "GetStakeFromReputerInTopicInSelf",
			Handler:    _QueryService_GetStakeFromReputerInTopicInSelf_Handler,
		},
		{
			MethodName: "GetDelegateStakeInTopicInReputer",
			Handler:    _QueryService_GetDelegateStakeInTopicInReputer_Handler,
		},
		{
			MethodName: "GetStakeFromDelegatorInTopicInReputer",
			Handler:    _QueryService_GetStakeFromDelegatorInTopicInReputer_Handler,
		},
		{
			MethodName: "GetStakeFromDelegatorInTopic",
			Handler:    _QueryService_GetStakeFromDelegatorInTopic_Handler,
		},
		{
			MethodName: "GetTopicStake",
			Handler:    _QueryService_GetTopicStake_Handler,
		},
		{
			MethodName: "GetStakeRemovalsUpUntilBlock",
			Handler:    _QueryService_GetStakeRemovalsUpUntilBlock_Handler,
		},
		{
			MethodName: "GetDelegateStakeRemovalsUpUntilBlock",
			Handler:    _QueryService_GetDelegateStakeRemovalsUpUntilBlock_Handler,
		},
		{
			MethodName: "GetStakeRemovalInfo",
			Handler:    _QueryService_GetStakeRemovalInfo_Handler,
		},
		{
			MethodName: "GetDelegateStakeRemovalInfo",
			Handler:    _QueryService_GetDelegateStakeRemovalInfo_Handler,
		},
		{
			MethodName: "GetWorkerNodeInfo",
			Handler:    _QueryService_GetWorkerNodeInfo_Handler,
		},
		{
			MethodName: "GetReputerNodeInfo",
			Handler:    _QueryService_GetReputerNodeInfo_Handler,
		},
		{
			MethodName: "IsWorkerRegisteredInTopicId",
			Handler:    _QueryService_IsWorkerRegisteredInTopicId_Handler,
		},
		{
			MethodName: "IsReputerRegisteredInTopicId",
			Handler:    _QueryService_IsReputerRegisteredInTopicId_Handler,
		},
		{
			MethodName: "GetNetworkInferencesAtBlock",
			Handler:    _QueryService_GetNetworkInferencesAtBlock_Handler,
		},
		{
			MethodName: "GetLatestNetworkInferences",
			Handler:    _QueryService_GetLatestNetworkInferences_Handler,
		},
		{
			MethodName: "GetLatestAvailableNetworkInferences",
			Handler:    _QueryService_GetLatestAvailableNetworkInferences_Handler,
		},
		{
			MethodName: "IsWorkerNonceUnfulfilled",
			Handler:    _QueryService_IsWorkerNonceUnfulfilled_Handler,
		},
		{
			MethodName: "IsReputerNonceUnfulfilled",
			Handler:    _QueryService_IsReputerNonceUnfulfilled_Handler,
		},
		{
			MethodName: "GetUnfulfilledWorkerNonces",
			Handler:    _QueryService_GetUnfulfilledWorkerNonces_Handler,
		},
		{
			MethodName: "GetUnfulfilledReputerNonces",
			Handler:    _QueryService_GetUnfulfilledReputerNonces_Handler,
		},
		{
			MethodName: "GetInfererNetworkRegret",
			Handler:    _QueryService_GetInfererNetworkRegret_Handler,
		},
		{
			MethodName: "GetForecasterNetworkRegret",
			Handler:    _QueryService_GetForecasterNetworkRegret_Handler,
		},
		{
			MethodName: "GetOneInForecasterNetworkRegret",
			Handler:    _QueryService_GetOneInForecasterNetworkRegret_Handler,
		},
		{
			MethodName: "IsWhitelistAdmin",
			Handler:    _QueryService_IsWhitelistAdmin_Handler,
		},
		{
			MethodName: "GetTopicLastWorkerCommitInfo",
			Handler:    _QueryService_GetTopicLastWorkerCommitInfo_Handler,
		},
		{
			MethodName: "GetTopicLastReputerCommitInfo",
			Handler:    _QueryService_GetTopicLastReputerCommitInfo_Handler,
		},
		{
			MethodName: "GetTopicRewardNonce",
			Handler:    _QueryService_GetTopicRewardNonce_Handler,
		},
		{
			MethodName: "GetReputerLossBundlesAtBlock",
			Handler:    _QueryService_GetReputerLossBundlesAtBlock_Handler,
		},
		{
			MethodName: "GetStakeReputerAuthority",
			Handler:    _QueryService_GetStakeReputerAuthority_Handler,
		},
		{
			MethodName: "GetDelegateStakePlacement",
			Handler:    _QueryService_GetDelegateStakePlacement_Handler,
		},
		{
			MethodName: "GetDelegateStakeUponReputer",
			Handler:    _QueryService_GetDelegateStakeUponReputer_Handler,
		},
		{
			MethodName: "GetDelegateRewardPerShare",
			Handler:    _QueryService_GetDelegateRewardPerShare_Handler,
		},
		{
			MethodName: "GetStakeRemovalForReputerAndTopicId",
			Handler:    _QueryService_GetStakeRemovalForReputerAndTopicId_Handler,
		},
		{
			MethodName: "GetDelegateStakeRemoval",
			Handler:    _QueryService_GetDelegateStakeRemoval_Handler,
		},
		{
			MethodName: "GetPreviousTopicWeight",
			Handler:    _QueryService_GetPreviousTopicWeight_Handler,
		},
		{
			MethodName: "TopicExists",
			Handler:    _QueryService_TopicExists_Handler,
		},
		{
			MethodName: "IsTopicActive",
			Handler:    _QueryService_IsTopicActive_Handler,
		},
		{
			MethodName: "GetTopicFeeRevenue",
			Handler:    _QueryService_GetTopicFeeRevenue_Handler,
		},
		{
			MethodName: "GetInfererScoreEma",
			Handler:    _QueryService_GetInfererScoreEma_Handler,
		},
		{
			MethodName: "GetForecasterScoreEma",
			Handler:    _QueryService_GetForecasterScoreEma_Handler,
		},
		{
			MethodName: "GetReputerScoreEma",
			Handler:    _QueryService_GetReputerScoreEma_Handler,
		},
		{
			MethodName: "GetInferenceScoresUntilBlock",
			Handler:    _QueryService_GetInferenceScoresUntilBlock_Handler,
		},
		{
			MethodName: "GetPreviousTopicQuantileForecasterScoreEma",
			Handler:    _QueryService_GetPreviousTopicQuantileForecasterScoreEma_Handler,
		},
		{
			MethodName: "GetPreviousTopicQuantileInfererScoreEma",
			Handler:    _QueryService_GetPreviousTopicQuantileInfererScoreEma_Handler,
		},
		{
			MethodName: "GetPreviousTopicQuantileReputerScoreEma",
			Handler:    _QueryService_GetPreviousTopicQuantileReputerScoreEma_Handler,
		},
		{
			MethodName: "GetWorkerInferenceScoresAtBlock",
			Handler:    _QueryService_GetWorkerInferenceScoresAtBlock_Handler,
		},
		{
			MethodName: "GetCurrentLowestInfererScore",
			Handler:    _QueryService_GetCurrentLowestInfererScore_Handler,
		},
		{
			MethodName: "GetForecastScoresUntilBlock",
			Handler:    _QueryService_GetForecastScoresUntilBlock_Handler,
		},
		{
			MethodName: "GetWorkerForecastScoresAtBlock",
			Handler:    _QueryService_GetWorkerForecastScoresAtBlock_Handler,
		},
		{
			MethodName: "GetCurrentLowestForecasterScore",
			Handler:    _QueryService_GetCurrentLowestForecasterScore_Handler,
		},
		{
			MethodName: "GetReputersScoresAtBlock",
			Handler:    _QueryService_GetReputersScoresAtBlock_Handler,
		},
		{
			MethodName: "GetCurrentLowestReputerScore",
			Handler:    _QueryService_GetCurrentLowestReputerScore_Handler,
		},
		{
			MethodName: "GetListeningCoefficient",
			Handler:    _QueryService_GetListeningCoefficient_Handler,
		},
		{
			MethodName: "GetPreviousReputerRewardFraction",
			Handler:    _QueryService_GetPreviousReputerRewardFraction_Handler,
		},
		{
			MethodName: "GetPreviousInferenceRewardFraction",
			Handler:    _QueryService_GetPreviousInferenceRewardFraction_Handler,
		},
		{
			MethodName: "GetPreviousForecastRewardFraction",
			Handler:    _QueryService_GetPreviousForecastRewardFraction_Handler,
		},
		{
			MethodName: "GetPreviousPercentageRewardToStakedReputers",
			Handler:    _QueryService_GetPreviousPercentageRewardToStakedReputers_Handler,
		},
		{
			MethodName: "GetTotalRewardToDistribute",
			Handler:    _QueryService_GetTotalRewardToDistribute_Handler,
		},
		{
			MethodName: "GetNaiveInfererNetworkRegret",
			Handler:    _QueryService_GetNaiveInfererNetworkRegret_Handler,
		},
		{
			MethodName: "GetOneOutInfererInfererNetworkRegret",
			Handler:    _QueryService_GetOneOutInfererInfererNetworkRegret_Handler,
		},
		{
			MethodName: "GetOneOutInfererForecasterNetworkRegret",
			Handler:    _QueryService_GetOneOutInfererForecasterNetworkRegret_Handler,
		},
		{
			MethodName: "GetOneOutForecasterInfererNetworkRegret",
			Handler:    _QueryService_GetOneOutForecasterInfererNetworkRegret_Handler,
		},
		{
			MethodName: "GetOneOutForecasterForecasterNetworkRegret",
			Handler:    _QueryService_GetOneOutForecasterForecasterNetworkRegret_Handler,
		},
		{
			MethodName: "GetActiveTopicsAtBlock",
			Handler:    _QueryService_GetActiveTopicsAtBlock_Handler,
		},
		{
			MethodName: "GetNextChurningBlockByTopicId",
			Handler:    _QueryService_GetNextChurningBlockByTopicId_Handler,
		},
		{
			MethodName: "GetActiveReputersForTopic",
			Handler:    _QueryService_GetActiveReputersForTopic_Handler,
		},
		{
			MethodName: "GetActiveForecastersForTopic",
			Handler:    _QueryService_GetActiveForecastersForTopic_Handler,
		},
		{
			MethodName: "GetActiveInferersForTopic",
			Handler:    _QueryService_GetActiveInferersForTopic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "emissions/v4/query.proto",
}
